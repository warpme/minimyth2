#!/bin/sh
################################################################################
# dhcp
################################################################################
. /etc/rc.d/functions
. /etc/minimyth.d/minimyth.conf

start() {

    local DHCLIENT_CONF
    local INTERFACE
    local INTERFACE_ITEM
    local INTERFACE_LIST
    local IP_ADDRESS

    UDHCPC_CONF='/etc/udhcpc.conf'

    # variables used at static networking configuration
    HOSTS_CONF='/etc/hosts'
    LOG_CONF='/etc/log.conf'
    NTP_CONF='/etc/ntp.conf'
    RESOLV_CONF='/etc/resolv.conf'
    TZ_CONF='/etc/localtime'

    # Create a 'udhcpc.conf' file.
    /bin/rm -f "${UDHCPC_CONF}~"
    /bin/mkdir -p "`/usr/bin/dirname ${UDHCPC_CONF}~`"
    /bin/touch "${UDHCPC_CONF}~"
    /bin/chmod 644 "${UDHCPC_CONF}~"
    set | /bin/grep -e '^MM_DHCP_' > "${UDHCPC_CONF}~"
    /bin/mv -f "${UDHCPC_CONF}~" "${UDHCPC_CONF}"

    # If 'udhcpc' is running, then stop it.
    if [ -n "`/bin/pidof udhcpc`" ] ; then
        mm_message_output info "stopping DHCP client ..."
        while [ -n "`/bin/pidof udhcpc`" 2> /dev/null ] ; do
            /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] Stoping DHCP client ..."
            /usr/bin/killall udhcpc
        done
    fi

    # Start 'udhcpc'.
    if [ -z "`/bin/pidof udhcpc`" ] ; then
        INTERFACE=${MM_NETWORK_INTERFACE}
        if [ -z "${INTERFACE}" ] ; then
            # Locate a connected network interface.
            # We use the first connected network interface found.
            INTERFACE_LIST=
            if [ -e /sys/class/net ] ; then
                INTERFACE_LIST=`/bin/ls -1 /sys/class/net | /bin/grep -v '^lo$' | sort`
            fi
            /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] Avaliable interfaces: ${INTERFACE_LIST}"
            INTERFACE=
            for INTERFACE_ITEM in ${INTERFACE_LIST} ; do
                if [[ ${INTERFACE_ITEM} =~ "wlan" ]] ; then
                    iwctl station ${INTERFACE_ITEM} show | grep -q "connect"
                    if [ $? -eq 0 ] ; then
                        INTERFACE=${INTERFACE_ITEM}
                        /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] Will use ${INTERFACE} interface ..."
                        break
                    fi
                elif [[ ${INTERFACE_ITEM} =~ "eth" ]] && [ ! -e /var/run/.connected_with_wlan ] ; then
                    /sbin/ip link set ${INTERFACE_ITEM} up
                    i=0
                    while [ $i -lt 5 ] ; do
                        i=$((${i} + 1))
                        /usr/sbin/ifplugstatus -q ${INTERFACE_ITEM}
                        if [ $? -eq 2 ] ; then
                            INTERFACE=${INTERFACE_ITEM}
                            if [ ! -z "${MM_NETWORK_ETH_MAC_ADDRESS}" ] ; then
                                /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] Will use ${INTERFACE} interface with changed MAC to ${MM_NETWORK_ETH_MAC_ADDRESS} ..."
                                mm_message_output info "${INTERFACE} connected. changing MAC address ..."
                                /sbin/ip link set ${INTERFACE} down
                                /sbin/ip link set ${INTERFACE} address ${MM_NETWORK_ETH_MAC_ADDRESS}
                                /sbin/ip link set ${INTERFACE} up
                                /bin/sleep 2
                            else
                                /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] Will use ${INTERFACE} interface ..."
                                mm_message_output info "${INTERFACE} connected ..."
                            fi
                            break
                        else
                            /bin/sleep 1
                            /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] ${i} try for ${INTERFACE_ITEM} interface ..."
                            mm_message_output info "waiting ${i}sec for connection on ${INTERFACE_ITEM} ..."
                        fi
                    done
                    if [ -z "${INTERFACE}" ] ; then
                        /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] giving-up on ${INTERFACE_ITEM} interface ..."
                    else
                        break
                    fi
                fi
            done
        fi
        if [ -z "${INTERFACE}" ] ; then
            /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] No any network interface with linkbeat or status connected. Blind fallback to ${INTERFACE} ..."
            INTERFACE='eth0'
        fi

        # Waiting 15sec for Eth interface. On some platforms apperaing Eth needs some time...
        i=0
        while [ $i -lt 15 ] ; do
            no_iface=`/sbin/ifconfig ${INTERFACE} | /bin/grep "${INTERFACE}"`
            i=$((${i} + 1))
            if [ "x${no_iface}" = "x" ] ; then
                if [ $i -eq 15 ] ; then
                    mm_message_output err "error: After 15sec still no '${INTERFACE}' interface in system ..."
                    /usr/bin/logger -t minimyth -p "local0.err" "[init.d/dhcp] Timeout waiting for ${INTERFACE} interface ..."
                    return 1
                else
                    /sbin/ifconfig ${INTERFACE} > /var/log/eth-interface
                    /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] Waiting for ${INTERFACE} interface ..."
                    /bin/sleep 1
                fi
            else
                /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] ${INTERFACE} present. Starting configuring networking ..."
                i=15
            fi
        done

        if [ -z "${MM_NETWORK_STATIC_IP}" ] ; then
            # Start DHCP on the interface.
            mm_message_output info "starting DHCP client ..."
            IP_ADDRESS=`/sbin/ifconfig ${INTERFACE} | /bin/grep '^ *inet addr:' | /bin/sed 's%^ *inet addr:\([^ ]*\) .*%\1%'`
            if [ -z "${IP_ADDRESS}" ] ; then
                /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] Starting DHCP client on ${INTERFACE} ..."
                /sbin/udhcpc -S -p /var/run/udhcpc.pid -s /etc/udhcpc.script -i ${INTERFACE} -O tzdbstr -O logsrv  > /var/log/udhcpc 2>&1
            else
                /usr/bin/logger -t minimyth -p "local0.info" "[init.d/dhcp] Starting DHCP client on ${INTERFACE} with forced IP=${IP_ADDRESS} ..."
                /sbin/udhcpc -S -p /var/run/udhcpc.pid -s /etc/udhcpc.script -i ${INTERFACE} -r ${IP_ADDRESS}  -O tzdbstr -O logsrv > /var/log/udhcpc 2>&1
            fi
            if [ $? -ne 0 ] ; then
                mm_message_output err "error: DHCP on interface '${INTERFACE}' failed."
                return 1
            fi
            # Make sure we got an IP address.
            IP_ADDRESS=`/sbin/ifconfig ${INTERFACE} | /bin/grep '^ *inet addr:' | /bin/sed 's%^ *inet addr:\([^ ]*\) .*%\1%'`
            if [ -z "${IP_ADDRESS}" ] ; then
                mm_message_output err "error: Can't get IP from DHCP on interface '${INTERFACE}' ..."
                return 1
            fi
        else
            # configuring with static IP
            mm_message_output info "configuring networking with static config ..."

            # Configure interface basics.
            [ -n "${MM_NETWORK_BROADCAST_IP}" ] && BROADCAST="broadcast ${MM_NETWORK_BROADCAST_IP}"
            [ -n "${MM_NETWORK_SUBNET}" ] && NETMASK="netmask ${MM_NETWORK_SUBNET}"
            /sbin/ifconfig ${INTERFACE} ${MM_NETWORK_STATIC_IP} ${BROADCAST} ${NETMASK}

            # Make sure we got an IP address.
            IP_ADDRESS=`/sbin/ifconfig ${INTERFACE} | /bin/grep '^ *inet addr:' | /bin/sed 's%^ *inet addr:\([^ ]*\) .*%\1%'`
            if [ -z "${IP_ADDRESS}" ] ; then
                mm_message_output err "error: Seting static IP on interface '${INTERFACE}' failed ..."
                return 1
            fi

            # Configure default gateways.
            while /sbin/route del default gw 0.0.0.0 dev ${INTERFACE} 2> /dev/null ; do
                :
            done
            for GATEWAY in ${MM_NETWORK_DEFAULT_GW} ; do
                /sbin/route add default gw ${GATEWAY} dev ${INTERFACE}
                export MM_NETWORK_DEFAULT_GW=${MM_NETWORK_DEFAULT_GW}
            done

            # Set host name.
            [ -n ${MM_NETWORK_HOST_NAME} ] && /bin/hostname "${MM_NETWORK_HOST_NAME}"

            # Set time zone.
            if   [ -z "${MM_NETWORK_TCODE}" ] ; then
                /bin/rm -f ${TZ_CONF}
            elif [ ! -r /usr/share/zoneinfo/${MM_NETWORK_TCODE} ] ; then
                /bin/rm -f ${TZ_CONF}
                /usr/bin/logger -s -t udhcpc -p "daemon.err" \
                    "error: tzdbstr (MM_NETWORK_TCODE) '${MM_NETWORK_TCODE}' not valid."
            else
                /bin/rm -f ${TZ_CONF}~
                /bin/touch ${TZ_CONF}~
                /bin/chmod 644 ${TZ_CONF}~
                /bin/cat /usr/share/zoneinfo/${MM_NETWORK_TCODE} > ${TZ_CONF}~
                /usr/bin/cmp -s "${TZ_CONF}~" "${TZ_CONF}" 2> /dev/null
                if [ $? -ne 0 ] ; then
                    /bin/mv -f ${TZ_CONF}~ ${TZ_CONF}
                else
                    /bin/rm -f ${TZ_CONF}~
                fi
            fi

            # Create domain name resolution file.
            /bin/rm -f ${RESOLV_CONF}~
            /bin/touch ${RESOLV_CONF}~
            /bin/chmod 644 ${RESOLV_CONF}~
            if [ -n "${MM_NETWORK_DOMAIN_NAME}" ] ; then
                /bin/echo search ${MM_NETWORK_DOMAIN_NAME} >> ${RESOLV_CONF}~
            fi
            for DOMAIN_NAME_SERVER in ${MM_NETWORK_DOMAIN_NAME_SERVERS} ; do
                if [ -n "${DOMAIN_NAME_SERVER}" ] ; then
                    /bin/echo nameserver ${DOMAIN_NAME_SERVER} >> ${RESOLV_CONF}~
                fi
            done
            /usr/bin/cmp -s "${RESOLV_CONF}~" "${RESOLV_CONF}" 2> /dev/null
            if [ $? -ne 0 ] ; then
                /bin/mv -f ${RESOLV_CONF}~ ${RESOLV_CONF}
            else
                /bin/rm -f ${RESOLV_CONF}~
            fi

            # Create NTP configuration file.
            /bin/rm -f ${NTP_CONF}~
            /bin/touch ${NTP_CONF}~
            /bin/chmod 644 ${NTP_CONF}~
            for NTP_SERVER in ${MM_NETWORK_NTP_SERVERS}; do
                if [ -n "${NTP_SERVER}" ] ; then
                    /bin/echo server ${NTP_SERVER} >> ${NTP_CONF}~
                fi
            done
            /usr/bin/cmp -s "${NTP_CONF}~" "${NTP_CONF}" 2> /dev/null
            if [ $? -ne 0 ] ; then
                /bin/mv -f ${NTP_CONF}~ ${NTP_CONF}
            else
                /bin/rm -f ${NTP_CONF}~
            fi

        fi

    fi

    HOST_NAME=`/bin/hostname`
    if [ "x${HOST_NAME}" = "x?" ] ; then

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/dhcp] NOTICE:    !!! No hostname assigned by DHCP server nor by MM_NETWORK_HOST_NAME !!!"

        # Add last 2 bytes from MAC as suffix
        # SUFFIX=`cat /sys/class/net/${INTERFACE}/address | sed -e "s/\(.*\):\(.*\):\(.*\):\(.*\):\(.*\):\(.*\)/\6/"`
        # Add full MAC as suffix
        SUFFIX=`cat /sys/class/net/${INTERFACE}/address | sed -e "s/://g"`

        if [ -z "${SUFFIX}" ] ; then
            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/dhcp] NOTICE:    Can't determine MAC address on ${INTERFACE}. Will use \"Default\" suffix..."
            HOST_NAME="myth-frontend-default"
        else
            HOST_NAME="myth-frontend-${SUFFIX}"
            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/dhcp] NOTICE:    !!! Hostname will be auto-set to \"${HOST_NAME}\" !!!"
        fi

        /bin/hostname ${HOST_NAME}

    fi

    # Create local hosts file.
    /bin/rm -f ${HOSTS_CONF}~
    /bin/touch ${HOSTS_CONF}~
    /bin/chmod 644 ${HOSTS_CONF}~
    /bin/echo "127.0.0.1 localhost.localdomain localhost" >> ${HOSTS_CONF}~
    if [ -n "${HOST_NAME}" ] ; then
        /bin/echo -n "${IP_ADDRESS}" >> ${HOSTS_CONF}~
        if [ -n "${domain}" ] ; then
            /bin/echo -n " ${MM_NETWORK_HOST_NAME}.${domain}" >> ${HOSTS_CONF}~
        fi
        /bin/echo -n " ${HOST_NAME}" >> ${HOSTS_CONF}~
    fi
    /usr/bin/cmp -s "${HOSTS_CONF}~" "${HOSTS_CONF}" 2> /dev/null
    if [ $? -ne 0 ] ; then
        /bin/mv -f ${HOSTS_CONF}~ ${HOSTS_CONF}
    else
        /bin/rm -f ${HOSTS_CONF}~
    fi

    this_script_done
}

stop() {

    mm_message_output info "stopping DHCP client ..."
    if [ -n "`/bin/pidof udhcpc`" ] ; then
        /usr/bin/killall udhcpc
    fi

    return 0
}

case $1 in
    start) start ;;
    stop)  stop  ;;
esac
