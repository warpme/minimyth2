From dfe8db7dd47e0ba076f10cf13399e469bc1d007e Mon Sep 17 00:00:00 2001
From: Detlev Casanova <detlev.casanova@collabora.com>
Date: Thu, 21 Nov 2024 10:56:47 -0500
Subject: [PATCH 7/7] wip: hevc: Add ref frames support

---
 .../platform/rockchip/rkvdec2/rkvdec2-hevc.c  | 216 +++++++++++++++---
 1 file changed, 180 insertions(+), 36 deletions(-)

diff --git a/drivers/media/platform/rockchip/rkvdec2/rkvdec2-hevc.c b/drivers/media/platform/rockchip/rkvdec2/rkvdec2-hevc.c
index 89d9ed9f28..6df75312f4 100644
--- a/drivers/media/platform/rockchip/rkvdec2/rkvdec2-hevc.c
+++ b/drivers/media/platform/rockchip/rkvdec2/rkvdec2-hevc.c
@@ -122,6 +122,7 @@ struct rkvdec2_rps_refs {
 } __attribute((__packed__));
 
 struct rkvdec2_rps_short_term_ref_set {
+	//TODO: Rename those if their meaning is indeed before/after instead
 	u32 num_negative	: 4;
 	u32 num_positive	: 4;
 	u32 delta_poc0		: 16;
@@ -188,9 +189,11 @@ struct rkvdec2_hevc_reflists {
 struct rkvdec2_hevc_run {
 	struct rkvdec2_run 				base;
 	const struct v4l2_ctrl_hevc_decode_params 	*decode_params;
+	const struct v4l2_ctrl_hevc_slice_params 	*slice_params;
 	const struct v4l2_ctrl_hevc_sps 		*sps;
 	const struct v4l2_ctrl_hevc_pps 		*pps;
 	const struct v4l2_ctrl_hevc_scaling_matrix 	*scaling_matrix;
+	u8						num_slices;
 	struct vb2_buffer *ref_buf[V4L2_HEVC_DPB_ENTRIES_NUM_MAX];
 };
 
@@ -431,15 +434,112 @@ static void assemble_hw_pps(struct rkvdec2_ctx *ctx,
 		memcpy(&priv_tbl->param_set[i], priv_tbl->param_set, sizeof(struct rkvdec2_sps_pps_packet));
 }
 
+static void set_ref_poc(struct rkvdec2_rps_short_term_ref_set *set, int poc, int value, int flag)
+{
+	switch(poc) {
+	case 0:
+		set->delta_poc0 = value;
+		set->used_flag0 = flag;
+		break;
+	case 1:
+		set->delta_poc1 = value;
+		set->used_flag1 = flag;
+		break;
+	case 2:
+		set->delta_poc2 = value;
+		set->used_flag2 = flag;
+		break;
+	case 3:
+		set->delta_poc3 = value;
+		set->used_flag3 = flag;
+		break;
+	case 4:
+		set->delta_poc4 = value;
+		set->used_flag4 = flag;
+		break;
+	case 5:
+		set->delta_poc5 = value;
+		set->used_flag5 = flag;
+		break;
+	case 6:
+		set->delta_poc6 = value;
+		set->used_flag6 = flag;
+		break;
+	case 7:
+		set->delta_poc7 = value;
+		set->used_flag7 = flag;
+		break;
+	case 8:
+		set->delta_poc8 = value;
+		set->used_flag8 = flag;
+		break;
+	case 9:
+		set->delta_poc9 = value;
+		set->used_flag9 = flag;
+		break;
+	case 10:
+		set->delta_poc10 = value;
+		set->used_flag10 = flag;
+		break;
+	case 11:
+		set->delta_poc11 = value;
+		set->used_flag11 = flag;
+		break;
+	case 12:
+		set->delta_poc12 = value;
+		set->used_flag12 = flag;
+		break;
+	case 13:
+		set->delta_poc13 = value;
+		set->used_flag13 = flag;
+		break;
+	case 14:
+		set->delta_poc14 = value;
+		set->used_flag14 = flag;
+		break;
+	}
+}
+
 static void assemble_hw_rps(struct rkvdec2_ctx *ctx,
 			    struct rkvdec2_hevc_run *run)
 {
 	struct rkvdec2_hevc_ctx *hevc_ctx = ctx->priv;
 	struct rkvdec2_hevc_priv_tbl *priv_tbl = hevc_ctx->priv_tbl.cpu;
+	struct rkvdec2_rps *rps = &priv_tbl->rps;
+	const struct v4l2_ctrl_hevc_decode_params *dec_params = run->decode_params;
+	const struct v4l2_ctrl_hevc_slice_params *slice_params = run->slice_params;
+	//const struct rkvdec2
+	const struct v4l2_ctrl_hevc_sps *sps = run->sps;
+	const struct v4l2_hevc_dpb_entry *dpb = dec_params->dpb;
+
+	memset(rps, 0, sizeof(*rps));
 
-	memset(&priv_tbl->rps, 0, sizeof(priv_tbl->rps));
+	return;
 
-	//TODO: Write RPS
+	// FIXME: Do we support more than 1 slice ? is it really the num_slices value that is needed here ?
+	for (int i = 0; i < run->num_slices; i++) {
+		// That seems incorrect.
+		rps->refs[i].lt_ref_pic_poc_lsb = slice_params[i].long_term_ref_pic_set_size;
+		rps->refs[i].used_by_curr_pic_lt_flag = !!(slice_params[i].flags & V4L2_HEVC_SPS_FLAG_LONG_TERM_REF_PICS_PRESENT);
+	}
+
+	for (int i = 0; i < sps->num_short_term_ref_pic_sets; i++) {
+		int poc = 0;
+		int j = 0;
+		struct rkvdec2_sps_pps_packet *hw_ps;
+		hw_ps = &priv_tbl->param_set[i];
+
+		rps->short_term_ref_sets[i].num_negative = dec_params->num_poc_st_curr_before;
+		rps->short_term_ref_sets[i].num_positive = dec_params->num_poc_st_curr_after;
+
+		for (; j < dec_params->num_poc_st_curr_before; j++) {
+			set_ref_poc(&rps->short_term_ref_sets[i], j, dec_params->poc_st_curr_before[j], 1);
+		}
+
+		for (; j < dec_params->num_poc_st_curr_after; j++) {
+			set_ref_poc(&rps->short_term_ref_sets[i], j, dec_params->poc_st_curr_after[j], 1);
+		}
+	}
 }
 
 static inline void rkvdec2_memcpy_toio(void __iomem *dst, void *src, size_t len)
@@ -512,6 +612,29 @@ static void rkvdec2_write_regs(struct rkvdec2_ctx *ctx)
 	dump_regs(rkvdec, hevc_ctx);
 }
 
+static struct vb2_buffer *
+get_ref_buf(struct rkvdec2_ctx *ctx, struct rkvdec2_hevc_run *run,
+	    unsigned int dpb_idx)
+{
+	struct v4l2_m2m_ctx *m2m_ctx = ctx->fh.m2m_ctx;
+	const struct v4l2_ctrl_hevc_decode_params *decode_params = run->decode_params;
+	const struct v4l2_hevc_dpb_entry *dpb = decode_params->dpb;
+	struct vb2_queue *cap_q = &m2m_ctx->cap_q_ctx.q;
+	struct vb2_buffer *buf = NULL;
+
+	if (dpb_idx < decode_params->num_active_dpb_entries)
+		buf = vb2_find_buffer(cap_q, dpb[dpb_idx].timestamp);
+
+	/*
+	 * If a DPB entry is unused or invalid, the address of current destination
+	 * buffer is returned.
+	 */
+	if (!buf)
+		return &run->base.bufs.dst->vb2_buf;
+
+	return buf;
+}
+
 static void config_registers(struct rkvdec2_ctx *ctx,
 			     struct rkvdec2_hevc_run *run)
 {
@@ -589,17 +712,8 @@ static void config_registers(struct rkvdec2_ctx *ctx,
 
 	/* Set ref pic address & poc */
 	for (i = 0; i < ARRAY_SIZE(dec_params->dpb); i++) {
-		struct vb2_buffer *vb_buf = run->ref_buf[i];
-		dma_addr_t buf_dma;
-
-		/*
-		 * If a DPB entry is unused or invalid, address of current destination
-		 * buffer is returned.
-		 */
-		if (!vb_buf)
-			vb_buf = &dst_buf->vb2_buf;
-
-		buf_dma = vb2_dma_contig_plane_dma_addr(vb_buf, 0);
+		struct vb2_buffer *vb_buf = get_ref_buf(ctx, run, i);
+		dma_addr_t buf_dma = vb2_dma_contig_plane_dma_addr(vb_buf, 0);
 
 		/* Set reference addresses */
 		regs->hevc_addr.ref_base[i] = buf_dma;
@@ -607,25 +721,58 @@ static void config_registers(struct rkvdec2_ctx *ctx,
 		/* Set COLMV addresses */
 		regs->hevc_addr.colmv_base[i] = buf_dma + ctx->colmv_offset;
 
-
-		// TODO
-		// struct rkvdec2_h264_ref_info *ref_info =
-		// 	&regs->hevc_param.reg099_102_ref_info[i / 4].ref_info[i % 4];
-
-		// ref_info->ref_field =
-		// 	!!(dpb[i].flags & V4L2_H264_DPB_ENTRY_FLAG_FIELD);
-		// ref_info->ref_colmv_use_flag =
-		// 	!!(dpb[i].flags & V4L2_H264_DPB_ENTRY_FLAG_ACTIVE);
-		// ref_info->ref_topfield_used =
-		// 	!!(dpb[i].fields & V4L2_H264_TOP_FIELD_REF);
-		// ref_info->ref_botfield_used =
-		// 	!!(dpb[i].fields & V4L2_H264_BOTTOM_FIELD_REF);
-
 		regs->hevc_param.reg067_082_ref_poc[i] =
 			dpb[i].pic_order_cnt_val;
+		
+		// TODO: Improve this 
+		switch(i) {
+		case 0:
+			regs->hevc_param.reg099.hevc_ref_valid_0 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 1:
+			regs->hevc_param.reg099.hevc_ref_valid_1 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 2:
+			regs->hevc_param.reg099.hevc_ref_valid_2 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 3:
+			regs->hevc_param.reg099.hevc_ref_valid_3 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 4:
+			regs->hevc_param.reg099.hevc_ref_valid_4 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 5:
+			regs->hevc_param.reg099.hevc_ref_valid_5 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 6:
+			regs->hevc_param.reg099.hevc_ref_valid_6 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 7:
+			regs->hevc_param.reg099.hevc_ref_valid_7 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 8:
+			regs->hevc_param.reg099.hevc_ref_valid_8 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 9:
+			regs->hevc_param.reg099.hevc_ref_valid_9 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 10:
+			regs->hevc_param.reg099.hevc_ref_valid_10 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 11:
+			regs->hevc_param.reg099.hevc_ref_valid_11 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 12:
+			regs->hevc_param.reg099.hevc_ref_valid_12 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 13:
+			regs->hevc_param.reg099.hevc_ref_valid_13 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		case 14:
+			regs->hevc_param.reg099.hevc_ref_valid_14 = !!(dec_params->num_active_dpb_entries > i);
+			break;
+		}
 
-		if (dpb[i].flags & V4L2_HEVC_DPB_ENTRY_LONG_TERM_REFERENCE)
-			dev_warn(rkvdec->dev, "YES");
 		regs->hevc_param.reg103.ref_pic_layer_same_with_cur |= 1 << i;
 	}
 
@@ -775,6 +922,10 @@ static void rkvdec2_hevc_run_preamble(struct rkvdec2_ctx *ctx,
 	ctrl = v4l2_ctrl_find(&ctx->ctrl_hdl,
 			      V4L2_CID_STATELESS_HEVC_DECODE_PARAMS);
 	run->decode_params = ctrl ? ctrl->p_cur.p : NULL;
+	ctrl = v4l2_ctrl_find(&ctx->ctrl_hdl,
+			      V4L2_CID_STATELESS_HEVC_SLICE_PARAMS);
+	run->slice_params = ctrl ? ctrl->p_cur.p : NULL;
+	run->num_slices = ctrl ? ctrl->new_elems : 0;
 	ctrl = v4l2_ctrl_find(&ctx->ctrl_hdl,
 			      V4L2_CID_STATELESS_HEVC_SPS);
 	run->sps = ctrl ? ctrl->p_cur.p : NULL;
@@ -828,13 +979,6 @@ static int rkvdec2_hevc_run(struct rkvdec2_ctx *ctx)
 
 	rkvdec2_hevc_run_preamble(ctx, &run);
 
-	/* Build the P/B{0,1} ref lists. */
-	/*v4l2_hevc_init_reflist_builder(&reflist_builder, run.decode_params,
-				       run.sps, run.decode_params->dpb);
-	v4l2_hevc_build_p_ref_list(&reflist_builder, hevc_ctx->reflists.p);
-	v4l2_hevc_build_b_ref_lists(&reflist_builder, hevc_ctx->reflists.b0,
-				    hevc_ctx->reflists.b1);
-	*/
 	assemble_hw_scaling_matrix(ctx, &run);
 	assemble_hw_pps(ctx, &run);
 	//lookup_ref_buf_idx(ctx, &run);
-- 
2.46.0

