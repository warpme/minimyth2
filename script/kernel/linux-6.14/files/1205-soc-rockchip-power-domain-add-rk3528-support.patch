
Add pm domains support for RK3528 SoCs.

Code based on BSP by
Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>

diff --speed-large-files --no-dereference --minimal -Naur linux-6.4.11/drivers/pmdomain/rockchip/pm-domains.c linux-6.4.11/drivers/pmdomain/rockchip/pm-domains.c
--- linux-6.4.11/drivers/pmdomain/rockchip/pm-domains.c	2023-08-23 16:28:18.180091826 +0200
+++ linux-6.4.11/drivers/pmdomain/rockchip/pm-domains.c	2023-08-23 16:21:41.603423825 +0200
@@ -30,6 +30,7 @@
 #include <dt-bindings/power/rk3366-power.h>
 #include <dt-bindings/power/rk3368-power.h>
 #include <dt-bindings/power/rk3399-power.h>
+#include <dt-bindings/power/rk3528-power.h>
 #include <dt-bindings/power/rk3568-power.h>
 #include <dt-bindings/power/rk3588-power.h>
 
@@ -46,6 +47,8 @@
 	int repair_status_mask;
 	u32 pwr_offset;
 	u32 req_offset;
+	bool keepon_startup;
+	bool always_on;
 };
 
 struct rockchip_pmu_info {
@@ -80,8 +83,10 @@
 	int num_qos;
 	struct regmap **qos_regmap;
 	u32 *qos_save_regs[MAX_QOS_REGS_NUM];
+	bool *qos_is_need_init[MAX_QOS_REGS_NUM];
 	int num_clks;
 	struct clk_bulk_data *clks;
+	bool is_qos_need_init;
 };
 
 struct rockchip_pmu {
@@ -119,6 +124,21 @@
 	.active_wakeup = wakeup,			\
 }
 
+#define DOMAIN_M_A(_name, pwr, status, req, idle, ack, always, wakeup, keepon)	\
+{							\
+	.name = _name,				\
+	.pwr_w_mask = (pwr) << 16,			\
+	.pwr_mask = (pwr),				\
+	.status_mask = (status),			\
+	.req_w_mask = (req) << 16,			\
+	.req_mask = (req),				\
+	.idle_mask = (idle),				\
+	.ack_mask = (ack),				\
+	.active_wakeup = wakeup,			\
+	.always_on = always,				\
+	.keepon_startup = keepon,			\
+}
+
 #define DOMAIN_M_O_R(_name, p_offset, pwr, status, m_offset, m_status, r_status, r_offset, req, idle, ack, wakeup)	\
 {							\
 	.name = _name,					\
@@ -163,6 +183,9 @@
 #define DOMAIN_RK3399(name, pwr, status, req, wakeup)		\
 	DOMAIN(name, pwr, status, req, req, req, wakeup)
 
+#define DOMAIN_RK3528(name, pwr, req, always, wakeup)		\
+	DOMAIN_M_A(name, pwr, pwr, req, req, req, always, wakeup, false)
+
 #define DOMAIN_RK3568(name, pwr, req, wakeup)		\
 	DOMAIN_M(name, pwr, pwr, req, req, req, wakeup)
 
@@ -361,6 +384,45 @@
 }
 EXPORT_SYMBOL(rockchip_pmu_idle_request);
 
+static void rockchip_pmu_init_qos(struct rockchip_pm_domain *pd)
+{
+	int i;
+
+	if (!pd->is_qos_need_init)
+		return;
+
+	for (i = 0; i < pd->num_qos; i++) {
+		if (pd->qos_is_need_init[0][i])
+			regmap_write(pd->qos_regmap[i],
+				     QOS_PRIORITY,
+				     pd->qos_save_regs[0][i]);
+
+		if (pd->qos_is_need_init[1][i])
+			regmap_write(pd->qos_regmap[i],
+				     QOS_MODE,
+				     pd->qos_save_regs[1][i]);
+
+		if (pd->qos_is_need_init[2][i])
+			regmap_write(pd->qos_regmap[i],
+				     QOS_BANDWIDTH,
+				     pd->qos_save_regs[2][i]);
+
+		if (pd->qos_is_need_init[3][i])
+			regmap_write(pd->qos_regmap[i],
+				     QOS_SATURATION,
+				     pd->qos_save_regs[3][i]);
+
+		if (pd->qos_is_need_init[4][i])
+			regmap_write(pd->qos_regmap[i],
+				     QOS_EXTCONTROL,
+				     pd->qos_save_regs[4][i]);
+	}
+
+	kfree(pd->qos_is_need_init[0]);
+	pd->qos_is_need_init[0] = NULL;
+	pd->is_qos_need_init = false;
+}
+
 static int rockchip_pmu_save_qos(struct rockchip_pm_domain *pd)
 {
 	int i;
@@ -550,6 +612,48 @@
 	pm_clk_destroy(dev);
 }
 
+static void rockchip_pd_qos_init(struct rockchip_pm_domain *pd)
+{
+	int is_pd_on, ret = 0;
+
+	if (!pd->is_qos_need_init) {
+		kfree(pd->qos_is_need_init[0]);
+		pd->qos_is_need_init[0] = NULL;
+		return;
+	}
+
+	is_pd_on = rockchip_pmu_domain_is_on(pd);
+	if (is_pd_on) {
+		ret = clk_bulk_enable(pd->num_clks, pd->clks);
+		if (ret < 0) {
+			dev_err(pd->pmu->dev, "failed to enable clocks\n");
+			return;
+		}
+		rockchip_pmu_init_qos(pd);
+		clk_bulk_disable(pd->num_clks, pd->clks);
+	}
+}
+
+static int rockchip_pd_add_alwasy_on_flag(struct rockchip_pm_domain *pd)
+{
+	int error;
+
+	if (pd->genpd.flags & GENPD_FLAG_ALWAYS_ON)
+		return 0;
+	pd->genpd.flags |= GENPD_FLAG_ALWAYS_ON;
+	if (!rockchip_pmu_domain_is_on(pd)) {
+		error = rockchip_pd_power(pd, true);
+		if (error) {
+			dev_err(pd->pmu->dev,
+				"failed to power on domain '%s': %d\n",
+			pd->genpd.name, error);
+			return error;
+		}
+	}
+
+	return 0;
+}
+
 static int rockchip_pm_add_one_domain(struct rockchip_pmu *pmu,
 				      struct device_node *node)
 {
@@ -668,6 +772,12 @@
 	pd->genpd.flags = GENPD_FLAG_PM_CLK;
 	if (pd_info->active_wakeup)
 		pd->genpd.flags |= GENPD_FLAG_ACTIVE_WAKEUP;
+	if (pd_info->always_on || pd_info->keepon_startup) {
+		error = rockchip_pd_add_alwasy_on_flag(pd);
+		if (error)
+		goto err_unprepare_clocks;
+	}
+	rockchip_pd_qos_init(pd);
 	pm_genpd_init(&pd->genpd, NULL,
 		      !rockchip_pmu_domain_is_on(pd) ||
 		      (pd->info->mem_status_mask && !rockchip_pmu_domain_is_mem_on(pd)));
@@ -1034,6 +1144,18 @@
 	[RK3399_PD_SDIOAUDIO]	= DOMAIN_RK3399("sdioaudio", BIT(31), BIT(31), BIT(29), true),
 };
 
+static const struct rockchip_domain_info rk3528_pm_domains[] = {
+	[RK3528_PD_PMU]		= DOMAIN_RK3528("pmu",    0,      BIT(0),  true, false),
+	[RK3528_PD_BUS]		= DOMAIN_RK3528("bus",    0,      BIT(1),  true, false),
+	[RK3528_PD_DDR]		= DOMAIN_RK3528("ddr",    0,      BIT(2),  true, false),
+	[RK3528_PD_MSCH]	= DOMAIN_RK3528("msch",   0,      BIT(3),  true, false),
+	[RK3528_PD_GPU]		= DOMAIN_RK3528("gpu",    BIT(0), BIT(4),  true, false),
+	[RK3528_PD_RKVDEC]	= DOMAIN_RK3528("rkvdec", 0,      BIT(5),  true, false),
+	[RK3528_PD_RKVENC]	= DOMAIN_RK3528("rkvenc", 0,      BIT(6),  true, false),
+	[RK3528_PD_VO]		= DOMAIN_RK3528("vo",     0,      BIT(7),  true, false),
+	[RK3528_PD_VPU]		= DOMAIN_RK3528("vpu",    0,      BIT(8),  true, false),
+};
+
 static const struct rockchip_domain_info rk3568_pm_domains[] = {
 	[RK3568_PD_NPU]		= DOMAIN_RK3568("npu",  BIT(1), BIT(2),  false),
 	[RK3568_PD_GPU]		= DOMAIN_RK3568("gpu",  BIT(0), BIT(1),  false),
@@ -1213,6 +1335,17 @@
 	.domain_info = rk3399_pm_domains,
 };
 
+static const struct rockchip_pmu_info rk3528_pmu = {
+	.pwr_offset = 0x1210,
+	.status_offset = 0x1230,
+	.req_offset = 0x1110,
+	.idle_offset = 0x1128,
+	.ack_offset = 0x1120,
+
+	.num_domains = ARRAY_SIZE(rk3528_pm_domains),
+	.domain_info = rk3528_pm_domains,
+};
+
 static const struct rockchip_pmu_info rk3568_pmu = {
 	.pwr_offset = 0xa0,
 	.status_offset = 0x98,
@@ -1293,6 +1426,10 @@
 		.data = (void *)&rk3399_pmu,
 	},
 	{
+		.compatible = "rockchip,rk3528-power-controller",
+		.data = (void *)&rk3528_pmu,
+	},
+	{
 		.compatible = "rockchip,rk3568-power-controller",
 		.data = (void *)&rk3568_pmu,
 	},
diff --speed-large-files --no-dereference --minimal -Naur linux-6.9-rc7/drivers/pmdomain/rockchip/Makefile linux-6.9-rc7/drivers/pmdomain/rockchip/Makefile
--- linux-6.9-rc7/drivers/pmdomain/rockchip/Makefile	2024-05-05 23:06:01.000000000 +0200
+++ linux-6.9-rc7/drivers/pmdomain/rockchip/Makefile	2024-05-10 17:52:26.353754481 +0200
@@ -1,2 +1,4 @@
 # SPDX-License-Identifier: GPL-2.0-only
 obj-$(CONFIG_ROCKCHIP_PM_DOMAINS)	+= pm-domains.o
+
+KBUILD_CFLAGS += "-Wno-implicit-function-declaration"
