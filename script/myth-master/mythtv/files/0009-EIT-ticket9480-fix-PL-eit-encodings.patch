diff -Naur mythtv-master-20201010-g68e85b9-old/mythtv/libs/libmythtv/eitfixup.h mythtv-master-20201010-g68e85b9-new/mythtv/libs/libmythtv/eitfixup.h
--- mythtv-master-20201010-g68e85b9-old/mythtv/libs/libmythtv/eitfixup.h	2020-10-10 16:07:22.263333333 +0200
+++ mythtv-master-20201010-g68e85b9-new/mythtv/libs/libmythtv/eitfixup.h	2020-10-10 16:07:23.759999999 +0200
@@ -70,6 +70,7 @@
         kFixGreekSubtitle    = 1 << 29,
         kFixGreekEIT         = 1 << 30,
         kFixGreekCategories  = 1U << 31,
+        kEFixForceISO6937    = 1ull << 32,
     };
 
     EITFixUp();
diff -Naur mythtv-master-20201010-g68e85b9-old/mythtv/libs/libmythtv/eithelper.cpp mythtv-master-20201010-g68e85b9-new/mythtv/libs/libmythtv/eithelper.cpp
--- mythtv-master-20201010-g68e85b9-old/mythtv/libs/libmythtv/eithelper.cpp	2020-10-10 16:07:22.263333333 +0200
+++ mythtv-master-20201010-g68e85b9-new/mythtv/libs/libmythtv/eithelper.cpp	2020-10-10 16:07:23.759999999 +0200
@@ -217,9 +217,16 @@
     const enc_override enc_7  { 0x10, 0x00, 0x07 }; // Latin/Greek Alphabet
     const enc_override enc_9  { 0x10, 0x00, 0x09 }; // could use { 0x05 } instead
     const enc_override enc_15 { 0x10, 0x00, 0x0f }; // could use { 0x0B } instead
+    const enc_override enc_0  { 0x20 };
     const enc_override enc_none {};
     enc_override enc = enc_none;
 
+    // Use an encoding override of ISO 6937
+    if (fix & EITFixUp::kEFixForceISO6937)
+    {
+        enc = enc_0;
+    }
+
     // Is this BellExpressVU EIT (Canada) ?
     // Use an encoding override of ISO 8859-1 (Latin1)
     if (fix & EITFixUp::kEFixForceISO8859_1)
@@ -329,15 +336,25 @@
         return;
 
     uint descCompression = (eit->TableID() > 0x80) ? 2 : 1;
-    FixupValue fix = m_fixup.value((FixupKey)eit->OriginalNetworkID() << 16);
+    uint fix = EITFixUp::kFixGenericDVB;
+    if (eit->SourceNetworkID() && eit->SourceTransportID()) {
+        fix |= m_fixup[1<<15 | (FixupKey)eit->SourceNetworkID() << 16];
+        fix |= m_fixup[1<<15 | (((FixupKey)eit->SourceTransportID()) << 32) |
+                     ((FixupKey)eit->SourceNetworkID() << 16)];
+        fix |= m_fixup[1<<15 | ((FixupKey)eit->SourceNetworkID() << 16) | (FixupKey)eit->ServiceID()];
+        fix |= m_fixup[1<<15 | (((FixupKey)eit->SourceTransportID()) << 32) |
+                     (FixupKey)((FixupKey)eit->SourceNetworkID() << 16) |
+                     (FixupKey)(FixupKey)eit->ServiceID()];
+    }
+    fix |= m_fixup[eit->OriginalNetworkID() << 16];
+
     fix |= m_fixup.value((((FixupKey)eit->TSID()) << 32) |
                  ((FixupKey)eit->OriginalNetworkID() << 16));
     fix |= m_fixup.value(((FixupKey)eit->OriginalNetworkID() << 16) |
                  (FixupKey)eit->ServiceID());
     fix |= m_fixup.value((((FixupKey)eit->TSID()) << 32) |
                  ((FixupKey)eit->OriginalNetworkID() << 16) |
-                  (FixupKey)eit->ServiceID());
-    fix |= EITFixUp::kFixGenericDVB;
+                 (FixupKey)eit->ServiceID());
 
     uint tableid   = eit->TableID();
     uint version   = eit->Version();
diff -Naur mythtv-master-20201010-g68e85b9-old/mythtv/libs/libmythtv/mpeg/dvbdescriptors.cpp mythtv-master-20201010-g68e85b9-new/mythtv/libs/libmythtv/mpeg/dvbdescriptors.cpp
--- mythtv-master-20201010-g68e85b9-old/mythtv/libs/libmythtv/mpeg/dvbdescriptors.cpp	2020-10-10 16:07:22.269999999 +0200
+++ mythtv-master-20201010-g68e85b9-new/mythtv/libs/libmythtv/mpeg/dvbdescriptors.cpp	2020-10-10 16:07:23.763333333 +0200
@@ -88,9 +88,20 @@
     auto *dst = new unsigned char[raw_length + encoding_override.size()];
 
     uint length = 0;
-    if (!encoding_override.empty() && (src[0] >= 0x20)) {
-        std::copy(encoding_override.cbegin(), encoding_override.cend(), dst);
-        length = encoding_override.size();
+    if (!encoding_override.empty()) {
+        if (src[0] >= 0x20) {
+            std::copy(encoding_override.cbegin(), encoding_override.cend(), dst);
+            length = encoding_override.size();
+        } else {
+            //incorrect ISO-8859 encoding marker,
+            //when text has been encoded using ISO-6937
+            if ((src[0] >= 0x01) && (src[0] <= 0x0B)
+                    && (encoding_override.size() == 1)
+                    && (encoding_override[0] == 0x20)) {
+                src++;
+                raw_length--;
+            }
+        }
     }
 
     // Strip formatting characters
diff -Naur mythtv-master-20201010-g68e85b9-old/mythtv/libs/libmythtv/mpeg/dvbstreamdata.cpp mythtv-master-20201010-g68e85b9-new/mythtv/libs/libmythtv/mpeg/dvbstreamdata.cpp
--- mythtv-master-20201010-g68e85b9-old/mythtv/libs/libmythtv/mpeg/dvbstreamdata.cpp	2020-10-10 16:07:22.269999999 +0200
+++ mythtv-master-20201010-g68e85b9-new/mythtv/libs/libmythtv/mpeg/dvbstreamdata.cpp	2020-10-10 16:07:23.763333333 +0200
@@ -378,7 +378,7 @@
         m_eitStatus.SetSectionSeen(key, psip.Version(), psip.Section(),
                                     psip.LastSection());
 
-        DVBEventInformationTable eit(psip);
+        DVBEventInformationTable eit(psip, m_desiredNetId, m_desiredTsId);
         for (auto & listener : m_dvbEitListeners)
             listener->HandleEIT(&eit);
 
diff -Naur mythtv-master-20201010-g68e85b9-old/mythtv/libs/libmythtv/mpeg/dvbtables.h mythtv-master-20201010-g68e85b9-new/mythtv/libs/libmythtv/mpeg/dvbtables.h
--- mythtv-master-20201010-g68e85b9-old/mythtv/libs/libmythtv/mpeg/dvbtables.h	2020-10-10 16:07:22.269999999 +0200
+++ mythtv-master-20201010-g68e85b9-new/mythtv/libs/libmythtv/mpeg/dvbtables.h	2020-10-10 16:07:23.763333333 +0200
@@ -295,6 +295,15 @@
 class MTV_PUBLIC DVBEventInformationTable : public PSIPTable
 {
   public:
+    explicit DVBEventInformationTable(const PSIPTable& table,
+                             uint SourceNetworkID, 
+                             uint SourceTransportID) : PSIPTable(table)
+    {
+        _source_netid = SourceNetworkID,
+        _source_tsid  = SourceTransportID;
+        assert(IsEIT(TableID()));
+        Parse();
+    }
     explicit DVBEventInformationTable(const PSIPTable& table) : PSIPTable(table)
     {
     // table_id                 8   0.0       0xC7
@@ -372,9 +381,20 @@
     void Parse(void) const;
 
     static bool IsEIT(uint table_id);
+    
+    uint SourceNetworkID(void)   const { return _source_netid; }
+    uint SourceTransportID(void) const { return _source_tsid;  }
+    bool ActualTS() const {
+        return (TableID() == TableID::PF_EIT)
+                || ((TableID() > TableID::SC_EITbeg) 
+                     && (TableID() < TableID::SC_EITend));
+    }
+
 
   private:
     mutable std::vector<const unsigned char*> m_ptrs; // used to parse
+    uint _source_netid;
+    uint _source_tsid;
 };
 
 /** \class TimeDateTable
