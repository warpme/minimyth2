diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/drivers/pci/Kconfig linux-6.16/drivers/pci/Kconfig
--- linux-6.16/drivers/pci/Kconfig	2025-07-27 23:26:38.000000000 +0200
+++ linux-6.16/drivers/pci/Kconfig	2025-07-30 16:41:21.913334349 +0200
@@ -325,5 +325,6 @@
 source "drivers/pci/endpoint/Kconfig"
 source "drivers/pci/switch/Kconfig"
 source "drivers/pci/pwrctrl/Kconfig"
+source "drivers/pci/pcie-sunxi/Kconfig"
 
 endif
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/drivers/pci/Makefile linux-6.16/drivers/pci/Makefile
--- linux-6.16/drivers/pci/Makefile	2025-07-27 23:26:38.000000000 +0200
+++ linux-6.16/drivers/pci/Makefile	2025-07-30 16:41:21.913334349 +0200
@@ -43,5 +43,6 @@
 
 obj-y				+= controller/
 obj-y				+= switch/
+obj-y				+= pcie-sunxi/
 
 subdir-ccflags-$(CONFIG_PCI_DEBUG) := -DDEBUG
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/drivers/pci/pcie-sunxi/include/sunxi_nsi.h linux-6.16/drivers/pci/pcie-sunxi/include/sunxi_nsi.h
--- linux-6.16/drivers/pci/pcie-sunxi/include/sunxi_nsi.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.16/drivers/pci/pcie-sunxi/include/sunxi_nsi.h	2025-07-30 16:41:21.913334349 +0200
@@ -0,0 +1,180 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/* Copyright(c) 2020 - 2023 Allwinner Technology Co.,Ltd. All rights reserved. */
+/*
+ * SUNXI MBUS support
+ *
+ * Copyright (C) 2015 AllWinnertech Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __LINUX_SUNXI_MBUS_H
+#define __LINUX_SUNXI_MBUS_H
+
+#include <linux/types.h>
+#include <linux/cdev.h>
+
+/* MBUS PMU ids */
+enum nsi_pmu {
+#if IS_ENABLED(CONFIG_ARCH_SUN50IW10)
+	MBUS_PMU_CPU    = 0,
+	MBUS_PMU_GPU     = 1,
+	MBUS_PMU_SD1     = 2,
+	MBUS_PMU_MSTG    = 3,
+	MBUS_PMU_GMAC0   = 4,
+	MBUS_PMU_GMAC1   = 5,
+	MBUS_PMU_USB0    = 6,
+	MBUS_PMU_USB1    = 7,
+	MBUS_PMU_NDFC    = 8,
+	MBUS_PMU_DMAC    = 9,
+	MBUS_PMU_CE      = 10,
+	MBUS_PMU_DE0     = 11,
+	MBUS_PMU_DE1     = 12,
+	MBUS_PMU_VE      = 13,
+	MBUS_PMU_CSI     = 14,
+	MBUS_PMU_ISP     = 15,
+	MBUS_PMU_G2D     = 16,
+	MBUS_PMU_EINK    = 17,
+	MBUS_PMU_IOMMU   = 18,
+	MBUS_PMU_SYS_CPU = 19,
+	MBUS_PMU_IAG_MAX,
+	MBUS_PMU_TAG = 23,
+#elif IS_ENABLED(CONFIG_ARCH_SUN50IW12)
+	MBUS_PMU_CPU    = 0,
+	MBUS_PMU_GPU     = 1,
+	MBUS_PMU_VE_R			= 2,
+	MBUS_PMU_VE				= 3,
+	MBUS_PMU_TVDISP_MBUS	= 4,
+	MBUS_PMU_TVDISP_AXI		= 5,
+	MBUS_PMU_VE_RW			= 6,
+	MBUS_PMU_TVFE			= 7,
+	MBUS_PMU_NDFC			= 8,
+	MBUS_PMU_DMAC			= 9,
+	MBUS_PMU_CE				= 10,
+	MBUS_PMU_IOMMU			= 11,
+	MBUS_PMU_TVCAP			= 12,
+	MBUS_PMU_GMAC0			= 13,
+	MBUS_PMU_MSTG			= 14,
+	MBUS_PMU_MIPS			= 15,
+	MBUS_PMU_USB0			= 16,
+	MBUS_PMU_USB1			= 17,
+	MBUS_PMU_USB2			= 18,
+	MBUS_PMU_MSTG1			= 19,
+	MBUS_PMU_MSTG2			= 20,
+	MBUS_PMU_NPD			= 21,
+	MBUS_PMU_IAG_MAX,
+	/* use RA1 to get total bandwidth, because no TA pmu for sun50iw12 */
+	MBUS_PMU_TAG = 24,
+#elif IS_ENABLED(CONFIG_SUN55I_A523_CCU)
+	MBUS_PMU_GPU			= 0,
+	MBUS_PMU_GIC			= 1,
+	MBUS_PMU_USB3			= 2,
+	MBUS_PMU_PCIE			= 3,
+	MBUS_PMU_CE			= 4,
+	MBUS_PMU_NPU			= 5,
+	MBUS_PMU_ISP			= 6,
+	MBUS_PMU_DSP			= 7,
+	MBUS_PMU_G2D			= 8,
+	MBUS_PMU_DI			= 9,
+	MBUS_PMU_IOMMU			= 10,
+	MBUS_PMU_VE_R			= 11,
+	MBUS_PMU_VE_RW			= 12,
+	MBUS_PMU_DE			= 13,
+	MBUS_PMU_CSI			= 14,
+	MBUS_PMU_NAND			= 15,
+	MBUS_PMU_MATRIX			= 16,
+	MBUS_PMU_SPI			= 17,
+	MBUS_PMU_GMAC0			= 18,
+	MBUS_PMU_GMAC1			= 19,
+	MBUS_PMU_SMHC0			= 20,
+	MBUS_PMU_SMHC1			= 21,
+	MBUS_PMU_SMHC2			= 22,
+	MBUS_PMU_USB0			= 23,
+	MBUS_PMU_USB1			= 24,
+	MBUS_PMU_USB2			= 25,
+	MBUS_PMU_NPD			= 26,
+	MBUS_PMU_DMAC			= 27,
+	MBUS_PMU_DMA			= 28,
+	MBUS_PMU_IAG_MAX,
+	MBUS_PMU_TAG			= 31,
+#elif IS_ENABLED(CONFIG_ARCH_SUN60IW2)
+	MBUS_PMU_GMAC			= 0,
+	MBUS_PMU_MSI_LITE0			= 1,
+	MBUS_PMU_DE			= 2,
+	MBUS_PMU_EINK			= 3,
+	MBUS_PMU_DI			= 4,
+	MBUS_PMU_G2D			= 5,
+	MBUS_PMU_GPU			= 6,
+	MBUS_PMU_VE0			= 7,
+	MBUS_PMU_VE1			= 8,
+	MBUS_PMU_VE2		= 9,
+	MBUS_PMU_GIC			= 10,
+	MBUS_PMU_MSI_LITE1		= 11,
+	MBUS_PMU_MSI_LITE2			= 12,
+	MBUS_PMU_USB_PCIE			= 13,
+	MBUS_PMU_IOMMU0			= 14,
+	MBUS_PMU_IOMMU1			= 15,
+	MBUS_PMU_ISP			= 16,
+	MBUS_PMU_CSI			= 17,
+	MBUS_PMU_NPU			= 18,
+	MBUS_PMU_CPU			= 19,
+	MBUS_PMU_CPU1			= 20,
+	MBUS_PMU_IAG_MAX,
+	MBUS_PMU_TAG			= 31,
+#endif
+	MBUS_PMU_MAX,
+};
+
+#if IS_ENABLED(CONFIG_ARCH_SUN50IW10)
+static const char *const pmu_name[] = {
+	"cpu", "gpu", "sd1", "mstg", "gmac0", "gmac1", "usb0", "usb1", "ndfc",
+	"dmac", "ce", "de0", "de1", "ve", "csi", "isp", "g2d", "eink", "iommu",
+	"sys_cpu", "total",
+};
+#elif IS_ENABLED(CONFIG_ARCH_SUN50IW12)
+static const char *const pmu_name[] = {
+	"cpu", "gpu", "ve_r", "ve", "tvd_mbus", "tvd_axi", "ve_rw", "tvfe", "ndfc", "dmac", "ce",
+	"iommu", "tvcap", "gmac0", "mstg", "mips", "usb0", "usb1", "usb2", "mstg1", "mstg2",
+	"npd", "total",
+};
+#elif IS_ENABLED(CONFIG_SUN55I_A523_CCU)
+static const char *const pmu_name[] = {
+	"cpu", "gpu", "gic", "usb3", "pcie", "ce", "npu", "isp", "dsp", "g2d", "di", "iommu",
+	"ve_r", "ve_rw", "de", "csi", "nand", "matrix", "spi", "gmac0", "gmac1", "smhc0",
+	"smhc1", "smhc2", "usb0", "usb1", "usb2", "npd", "dmac", "dma", "total"
+};
+#elif IS_ENABLED(CONFIG_ARCH_SUN60IW2)
+static const char *const pmu_name[] = {
+	"gmac", "msi_list0", "de", "eink", "di", "g2d", "gpu", "ve0", "ve1", "ve2", "gic",
+	"msi_lite1", "msi_lite2", "usb_pcie", "iommu0", "iommu1", "isp", "csi", "npu", "cpu0", "cpu1",
+};
+#endif
+
+#define get_name(n)      pmu_name[n]
+
+#if IS_ENABLED(CONFIG_AW_NSI)
+extern int nsi_port_setpri(enum nsi_pmu port, unsigned int pri);
+extern int nsi_port_setqos(enum nsi_pmu port, unsigned int qos);
+extern bool nsi_probed(void);
+extern int notrace nsi_port_set_abs_bwl(enum nsi_pmu port, unsigned int bwl);
+extern int notrace nsi_port_set_abs_bwlen(enum nsi_pmu port, bool en);
+#endif
+
+#if IS_ENABLED(CONFIG_SUN55I_A523_CCU)
+#define AW_NSI_CPU_CHANNEL	1
+#endif
+
+#define nsi_disable_port_by_index(dev) \
+	nsi_port_control_by_index(dev, false)
+#define nsi_enable_port_by_index(dev) \
+	nsi_port_control_by_index(dev, true)
+
+#endif
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/drivers/pci/pcie-sunxi/Kconfig linux-6.16/drivers/pci/pcie-sunxi/Kconfig
--- linux-6.16/drivers/pci/pcie-sunxi/Kconfig	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.16/drivers/pci/pcie-sunxi/Kconfig	2025-07-30 16:41:21.913334349 +0200
@@ -0,0 +1,26 @@
+# SPDX-License-Identifier: GPL-2.0-only
+
+menu "PCIe Drivers"
+	depends on ARCH_SUNXI
+
+choice
+	prompt "Allwinner PCIe controller"
+	default  AW_PCIE_NONE
+
+config AW_PCIE_RC
+	bool "RC controller - Host mode"
+	depends on ARCH_SUNXI
+	help
+	  Enables support for the PCIe RC controller in the Allwinner SoC.
+
+config AW_PCIE_NONE
+	bool "None"
+	depends on ARCH_SUNXI
+	help
+	  Disable support for the PCIe controller in the Allwinner SoC.
+
+endchoice
+
+endmenu
+
+ccflags-y += -Idrivers/pci/pcie-sunxi/include
\ No newline at end of file
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/drivers/pci/pcie-sunxi/Makefile linux-6.16/drivers/pci/pcie-sunxi/Makefile
--- linux-6.16/drivers/pci/pcie-sunxi/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.16/drivers/pci/pcie-sunxi/Makefile	2025-07-30 16:41:21.913334349 +0200
@@ -0,0 +1,9 @@
+# SPDX-License-Identifier: GPL-2.0
+ccflag-y += -DDYNAMIC_DEBUG_MODULE
+
+ccflags-y += -I $(srctree)/drivers/pci/
+ccflags-y += -Idrivers/pci/pcie-sunxi/include
+pcie_sunxi_host-objs := pcie-sunxi-rc.o pcie-sunxi-dma.o pcie-sunxi-plat.o
+pcie_sunxi_ep-objs := pcie-sunxi-ep.o pcie-sunxi-dma.o pcie-sunxi-plat.o
+obj-$(CONFIG_AW_PCIE_RC) += pcie_sunxi_host.o
+
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-dma.c linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-dma.c
--- linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-dma.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-dma.c	2025-07-30 09:45:21.863341687 +0200
@@ -0,0 +1,269 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright(c) 2020 - 2023 Allwinner Technology Co.,Ltd. All rights reserved. */
+/*
+ * Copyright (C) 2022 Allwinner Co., Ltd.
+ *
+ * The pcie_dma_chnl_request() is used to apply for pcie DMA channels;
+ * The pcie_dma_mem_xxx() is to initiate DMA read and write operations;
+ *
+ */
+
+#define SUNXI_MODNAME "pcie-edma"
+#include <linux/delay.h>
+#include <linux/fs.h>
+#include <linux/gpio.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/kthread.h>
+#include <linux/module.h>
+#include <linux/list.h>
+#include <linux/miscdevice.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/of_pci.h>
+#include <linux/platform_device.h>
+#include <linux/poll.h>
+#include <linux/reset.h>
+#include <linux/resource.h>
+#include <linux/signal.h>
+#include <linux/types.h>
+#include <linux/uaccess.h>
+#include "pcie-sunxi-dma.h"
+
+
+static struct dma_trx_obj *obj_global;
+
+sunxi_pci_edma_chan_t *sunxi_pcie_dma_chan_request(enum dma_dir dma_trx, void *cb, void *data)
+{
+	struct sunxi_pcie *pci = dev_get_drvdata(obj_global->dev);
+	sunxi_pci_edma_chan_t *edma_chan = NULL;
+	u32 free_chan;
+
+	if (dma_trx == PCIE_DMA_WRITE) {
+		free_chan = find_first_zero_bit(pci->wr_edma_map, pci->num_edma);
+
+		if (free_chan >= pci->num_edma) {
+			printk("sunxi-pcie: No free pcie edma write channel.\n");
+			return NULL;
+		}
+
+		set_bit(free_chan, pci->wr_edma_map);
+
+		edma_chan = &pci->dma_wr_chn[free_chan];
+
+		edma_chan->dma_trx = PCIE_DMA_WRITE;
+		edma_chan->chnl_num = free_chan;
+		edma_chan->callback = cb;
+		edma_chan->callback_param = data;
+
+		return edma_chan;
+	} else if (dma_trx == PCIE_DMA_READ) {
+		free_chan = find_first_zero_bit(pci->rd_edma_map, pci->num_edma);
+
+		if (free_chan >= pci->num_edma) {
+			printk("sunxi-pcie: No free pcie edma read channel.\n");
+			return NULL;
+		}
+
+		set_bit(free_chan, pci->rd_edma_map);
+
+		edma_chan = &pci->dma_rd_chn[free_chan];
+
+		edma_chan->dma_trx = PCIE_DMA_READ;
+		edma_chan->chnl_num = free_chan;
+		edma_chan->callback = cb;
+		edma_chan->callback_param = data;
+
+		return edma_chan;
+	} else {
+		printk("sunxi-pcie: ERR: unsupported type:%d \n", dma_trx);
+	}
+
+	return NULL;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_dma_chan_request);
+
+int sunxi_pcie_dma_chan_release(struct sunxi_pci_edma_chan *edma_chan, enum dma_dir dma_trx)
+{
+	struct sunxi_pcie *pci = dev_get_drvdata(obj_global->dev);
+
+	if (edma_chan->chnl_num >= pci->num_edma) {
+		printk("sunxi-pcie: ERR: the channel num:%d is error\n", edma_chan->chnl_num);
+		return -1;
+	}
+
+	if (PCIE_DMA_WRITE == dma_trx) {
+		edma_chan->callback = NULL;
+		edma_chan->callback_param = NULL;
+		clear_bit(edma_chan->chnl_num, pci->wr_edma_map);
+	} else if (PCIE_DMA_READ == dma_trx) {
+		edma_chan->callback = NULL;
+		edma_chan->callback_param = NULL;
+		clear_bit(edma_chan->chnl_num, pci->rd_edma_map);
+	} else {
+		printk("sunxi-pcie: ERR: unsupported type:%d \n", dma_trx);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_dma_chan_release);
+
+static int sunxi_pcie_init_edma_map(struct sunxi_pcie *pci)
+{
+	pci->rd_edma_map = devm_bitmap_zalloc(pci->dev, pci->num_edma, GFP_KERNEL);
+	if (!pci->rd_edma_map)
+		return -ENOMEM;
+
+	pci->wr_edma_map = devm_bitmap_zalloc(pci->dev, pci->num_edma, GFP_KERNEL);
+	if (!pci->wr_edma_map)
+		return -ENOMEM;
+
+	return 0;
+}
+
+int sunxi_pcie_dma_get_chan(struct platform_device *pdev)
+{
+	struct sunxi_pcie *pci = platform_get_drvdata(pdev);
+	sunxi_pci_edma_chan_t *edma_chan = NULL;
+	int ret, i;
+
+	ret = of_property_read_u32(pdev->dev.of_node, "num-edma", &pci->num_edma);
+	if (ret) {
+		printk("sunxi-pcie: Failed to parse the number of edma\n");
+		return -EINVAL;
+	} else {
+		ret = sunxi_pcie_init_edma_map(pci);
+		if (ret)
+			return -EINVAL;
+	}
+
+	pci->dma_wr_chn = devm_kcalloc(&pdev->dev, pci->num_edma, sizeof(sunxi_pci_edma_chan_t), GFP_KERNEL);
+	pci->dma_rd_chn = devm_kcalloc(&pdev->dev, pci->num_edma, sizeof(sunxi_pci_edma_chan_t), GFP_KERNEL);
+	if (!pci->dma_wr_chn || !pci->dma_rd_chn) {
+		printk("sunxi-pcie: PCIe edma init failed\n");
+		return -EINVAL;
+	}
+
+	for (i = 0; i < pci->num_edma; i++) {
+		edma_chan = &pci->dma_wr_chn[i];
+		spin_lock_init(&edma_chan->lock);
+	}
+
+	for (i = 0; i < pci->num_edma; i++) {
+		edma_chan = &pci->dma_rd_chn[i];
+		spin_lock_init(&edma_chan->lock);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_dma_get_chan);
+
+int sunxi_pcie_edma_config_start(struct sunxi_pci_edma_chan *edma_chan)
+{
+	struct dma_table edma_table = {0};
+	int ret;
+
+	if (likely(obj_global->config_dma_trx_func)) {
+		ret = obj_global->config_dma_trx_func(&edma_table, edma_chan->src_addr, edma_chan->dst_addr,
+				edma_chan->size, edma_chan->dma_trx, edma_chan);
+
+		if (ret < 0) {
+			printk("sunxi-pcie: pcie dma mem read error ! \n");
+			return -EINVAL;
+		}
+	} else {
+		printk("sunxi-pcie: config_dma_trx_func is NULL ! \n");
+		return -EINVAL;
+	}
+
+	obj_global->start_dma_trx_func(&edma_table, obj_global);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_edma_config_start);
+
+int sunxi_pcie_dma_mem_read(phys_addr_t src_addr, phys_addr_t dst_addr, unsigned int size, void *chan)
+{
+	struct dma_table read_table = {0};
+	int ret;
+
+	if (likely(obj_global->config_dma_trx_func)) {
+		ret = obj_global->config_dma_trx_func(&read_table, src_addr, dst_addr, size, PCIE_DMA_READ, chan);
+
+		if (ret < 0) {
+			printk("sunxi-pcie: pcie dma mem read error ! \n");
+			return -EINVAL;
+		}
+	} else {
+		printk("sunxi-pcie: config_dma_trx_func is NULL ! \n");
+		return -EINVAL;
+	}
+
+	obj_global->start_dma_trx_func(&read_table, obj_global);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_dma_mem_read);
+
+int sunxi_pcie_dma_mem_write(phys_addr_t src_addr, phys_addr_t dst_addr, unsigned int size, void *chan)
+{
+	struct dma_table write_table = {0};
+	int ret;
+
+	if (likely(obj_global->config_dma_trx_func)) {
+		ret = obj_global->config_dma_trx_func(&write_table, src_addr, dst_addr, size, PCIE_DMA_WRITE, chan);
+
+		if (ret < 0) {
+			printk("sunxi-pcie: pcie dma mem write error ! \n");
+			return -EINVAL;
+		}
+	} else {
+		printk("sunxi-pcie: config_dma_trx_func is NULL ! \n");
+		return -EINVAL;
+	}
+
+	obj_global->start_dma_trx_func(&write_table, obj_global);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_dma_mem_write);
+
+struct dma_trx_obj *sunxi_pcie_dma_obj_probe(struct device *dev)
+{
+	struct dma_trx_obj *obj;
+
+	obj = devm_kzalloc(dev, sizeof(*obj), GFP_KERNEL);
+	if (!obj)
+		return ERR_PTR(-ENOMEM);
+
+	obj_global = obj;
+	obj->dev = dev;
+
+	INIT_LIST_HEAD(&obj->dma_list);
+	spin_lock_init(&obj->dma_list_lock);
+
+	mutex_init(&obj->count_mutex);
+
+	return obj;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_dma_obj_probe);
+
+int sunxi_pcie_dma_obj_remove(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct sunxi_pcie *pci = platform_get_drvdata(pdev);
+
+	memset(pci->dma_wr_chn, 0, sizeof(sunxi_pci_edma_chan_t) * pci->num_edma);
+	memset(pci->dma_rd_chn, 0, sizeof(sunxi_pci_edma_chan_t) * pci->num_edma);
+
+	obj_global->dma_list.next = NULL;
+	obj_global->dma_list.prev = NULL;
+	mutex_destroy(&obj_global->count_mutex);
+
+	obj_global = NULL;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_dma_obj_remove);
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-dma.h linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-dma.h
--- linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-dma.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-dma.h	2025-07-29 21:53:51.123340853 +0200
@@ -0,0 +1,280 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/* Copyright(c) 2020 - 2023 Allwinner Technology Co.,Ltd. All rights reserved. */
+/*
+ * allwinner PCIe dma driver
+ *
+ * Copyright (C) 2022 allwinner Co., Ltd.
+ *
+ * Author: songjundong <songjundong@allwinnertech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#ifndef _PCIE_SUNXI_DMA_H
+#define _PCIE_SUNXI_DMA_H
+
+#include <linux/debugfs.h>
+#include <linux/platform_device.h>
+
+#include "pcie-sunxi.h"
+
+#define PCIE_DMA_TABLE_NUM		8
+#define PCIE_DMA_TRX_TYPE_NUM		3
+
+#define PCIE_WEIGHT			0x1f
+/*
+ * MASK_DONE_CNT_xx and MASK_ABORT_CNT_xx used in dma interrupt
+ */
+#define MASK_DONE_CNT_WR   ((2 << (PCIE_DMA_WR_CHN_CNT - 1)) - 1)
+#define MASK_DONE_CNT_RD   ((2 << (PCIE_DMA_RD_CHN_CNT - 1)) - 1)
+
+#define MASK_ABORD_CNT_WR  (((2 << (PCIE_DMA_WR_CHN_CNT - 1)) - 1))
+#define MASK_ABORD_CNT_RD  (((2 << (PCIE_DMA_RD_CHN_CNT - 1)) - 1))
+
+#define PCIE_DMA_OFFSET			0x380000
+
+#define PCIE_DMA_WR_ENB			0xc
+#define PCIE_DMA_WR_CTRL_LO		0x200
+#define PCIE_DMA_WR_CTRL_HI		0x204
+#define PCIE_DMA_WR_XFERSIZE		0x208
+#define PCIE_DMA_WR_SAR_LO		0x20c
+#define PCIE_DMA_WR_SAR_HI		0x210
+#define PCIE_DMA_WR_DAR_LO		0x214
+#define PCIE_DMA_WR_DAR_HI		0x218
+#define PCIE_DMA_WR_WEILO		0x18
+#define PCIE_DMA_WR_WEIHI		0x1c
+#define PCIE_DMA_WR_DOORBELL		0x10
+#define PCIE_DMA_WR_INT_STATUS		0x4c
+#define PCIE_DMA_WR_INT_MASK		0x54
+#define PCIE_DMA_WR_INT_CLEAR		0x58
+
+#define PCIE_DMA_RD_ENB			0x2c
+#define PCIE_DMA_RD_CTRL_LO		0x300
+#define PCIE_DMA_RD_CTRL_HI		0x304
+#define PCIE_DMA_RD_XFERSIZE		0x308
+#define PCIE_DMA_RD_SAR_LO		0x30c
+#define PCIE_DMA_RD_SAR_HI		0x310
+#define PCIE_DMA_RD_DAR_LO		0x314
+#define PCIE_DMA_RD_DAR_HI		0x318
+#define PCIE_DMA_RD_WEILO		0x38
+#define PCIE_DMA_RD_WEIHI		0x3c
+#define PCIE_DMA_RD_DOORBELL		0x30
+#define PCIE_DMA_RD_INT_STATUS		0xa0
+#define PCIE_DMA_RD_INT_MASK		0xa8
+#define PCIE_DMA_RD_INT_CLEAR		0xac
+
+#define PCIE_DMA_INT_MASK		0xf000f
+
+enum dma_dir {
+	PCIE_DMA_WRITE = 0,
+	PCIE_DMA_READ,
+};
+
+typedef void (*sunxi_pcie_edma_callback)(void *param);
+
+typedef struct sunxi_pci_edma_chan {
+	u32		chnl_num;
+	spinlock_t	lock;
+	bool		cookie;
+	phys_addr_t	src_addr;
+	phys_addr_t	dst_addr;
+	u32		size;
+	enum dma_dir	dma_trx;
+	void		*callback_param;
+	sunxi_pcie_edma_callback callback;
+} sunxi_pci_edma_chan_t;
+
+/*
+ * The Channel Control Register for read and write.
+ */
+union chan_ctrl_lo {
+	struct {
+		u32	cb		:1;	/* 0 bit */
+		u32	tcb		:1;	/* 1	 */
+		u32	llp		:1;	/* 2	 */
+		u32	lie		:1;	/* 3	 */
+		u32	rie		:1;	/* 4	 */
+		u32	cs		:2;	/* 5:6   */
+		u32	rsvd1		:1;	/* 7	 */
+		u32	ccs		:1;	/* 8	 */
+		u32	llen		:1;	/* 9	 */
+		u32	b_64s		:1;	/* 10	 */
+		u32	b_64d		:1;	/* 11	 */
+		u32	fn		:5;	/* 12:16 */
+		u32	rsvd2		:7;	/* 17:23 */
+		u32	ns		:1;	/* 24	 */
+		u32	ro		:1;	/* 25	 */
+		u32	td		:1;	/* 26	 */
+		u32	tc		:3;	/* 27:29 */
+		u32	at		:2;	/* 30:31 */
+	};
+	u32 dword;
+};
+
+/*
+ * The Channel Control Register high part for read and write.
+ * Note: depend on CX_SRIOV_ENABLE
+ * Note: Need to confirm the difference between PCIe 2.0 with 3.0
+ */
+union chan_ctrl_hi {
+	struct {
+		u32	vfenb		:1;	/* 0 bit */
+		u32	vfunc		:8;	/* 1-8	 */
+		u32	rsvd0		:23;	/* 9-31  */
+	};
+	u32 dword;
+};
+
+struct ctx_reg {
+	union chan_ctrl_lo		ctrllo;
+	union chan_ctrl_hi		ctrlhi;
+	u32				xfersize;
+	u32				sarptrlo;
+	u32				sarptrhi;
+	u32				darptrlo;
+	u32				darptrhi;
+};
+
+/*
+ * The Channel Weight Register for read and write.
+ *
+ * weight_lo->weight0 means set channel 0
+ * weight_hi->weight0 means set channel 4;
+ *
+ * Example:
+ * write channel #0 weight to 32
+ * write channel #1 weight to 16
+ *
+ * Then the DMA will issue 32 MRd requests for #0,followed by 16 MRd requests for #1,
+ * followed by the 32 MRd requests for #0 and so on...
+ */
+union weight {
+	struct {
+		u32	weight0		:5;	/* 0:4 bit */
+		u32	weight1		:5;	/* 5:9	   */
+		u32	weight2		:5;	/* 10:14   */
+		u32	weight3		:5;	/* 15:19   */
+		u32	rsvd		:12;	/* 20:31   */
+	};
+	u32 dword;
+};
+
+
+/*
+ * The Doorbell Register for read and write.
+ * if is read  db: you need write 0x0 for that channel
+ * if is write db: you need write channel number for that channel.
+ */
+union db {
+	struct {
+		u32	chnl		:3;	/* 0 bit */
+		u32	rsvd     	:28;	/* 3:30  */
+		u32	stop		:1;	/* 31    */
+	};
+	u32 dword;
+};
+
+/*
+ * The Enable VIEWPORT Register for read and write.
+ */
+union enb {
+	struct {
+		u32	enb		:1;	/* 0 bit */
+		u32	rsvd    	:31;	/* 1:31  */
+	};
+	u32 dword;
+};
+
+/*
+ * The Interrupt Status Register for read and write.
+ */
+union int_status {
+	struct {
+		u32	done		:8;	/* 0:7 bit */
+		u32	rsvd0		:8;	/* 8:15    */
+		u32	abort		:8;	/* 16:23   */
+		u32	rsvd1		:8;	/* 24:31   */
+	};
+	u32 dword;
+};
+
+/*
+ * The Interrupt Status Register for read and write.
+ */
+union int_clear {
+	struct {
+		u32	doneclr		:8;	/* 0:7 bit */
+		u32	rsvd0		:8;	/* 8:15    */
+		u32	abortclr	:8;	/* 16:23   */
+		u32	rsvd1		:8;	/* 24:31   */
+	};
+	u32 dword;
+};
+
+/*
+ * The Context Registers for read and write.
+ */
+struct ctx_regs {
+	union chan_ctrl_lo		ctrllo;
+	union chan_ctrl_hi		ctrlhi;
+	u32				xfersize;
+	u32				sarptrlo;
+	u32				sarptrhi;
+	u32				darptrlo;
+	u32				darptrhi;
+};
+
+struct dma_table {
+	u32				*descs;
+	int				chn;
+	phys_addr_t			phys_descs;
+	enum dma_dir			dir;
+	u32				type;
+	struct list_head		dma_tbl;
+	union enb			enb;
+	struct ctx_regs			ctx_reg;
+	union weight			weilo;
+	union weight			weihi;
+	union db			start;
+	phys_addr_t			local;
+	phys_addr_t			bus;
+	size_t				size;
+};
+
+struct dma_trx_obj {
+	struct device			*dev;
+	void				*mem_base;
+	phys_addr_t			mem_start;
+	size_t				mem_size;
+	int				dma_free;
+	spinlock_t			dma_list_lock; /* lock dma table */
+	struct list_head		dma_list;
+	struct work_struct		dma_trx_work;
+	wait_queue_head_t		event_queue;
+	struct workqueue_struct		*dma_trx_wq;
+	struct dma_table		*table[PCIE_DMA_TABLE_NUM];
+	struct task_struct		*scan_thread;
+	struct hrtimer			scan_timer;
+	void				*priv;
+	struct completion		done;
+	int				ref_count;
+	struct mutex			count_mutex;
+	unsigned long			irq_num;
+	struct dentry			*pcie_root;
+	struct pcie_misc_dev		*pcie_dev;
+	void 				(*start_dma_trx_func)(struct dma_table *table, struct dma_trx_obj *obj);
+	int				(*config_dma_trx_func)(struct dma_table *table, phys_addr_t sar_addr, phys_addr_t dar_addr,
+							unsigned int size, enum dma_dir dma_trx, sunxi_pci_edma_chan_t *edma_chn);
+};
+
+struct dma_trx_obj *sunxi_pcie_dma_obj_probe(struct device *dev);
+int sunxi_pcie_dma_obj_remove(struct device *dev);
+sunxi_pci_edma_chan_t *sunxi_pcie_dma_chan_request(enum dma_dir dma_trx, void *cb, void *data);
+int sunxi_pcie_dma_chan_release(struct sunxi_pci_edma_chan *edma_chan, enum dma_dir dma_trx);
+int sunxi_pcie_dma_mem_read(phys_addr_t sar_addr, phys_addr_t dar_addr, unsigned int size, void *chan);
+int sunxi_pcie_dma_mem_write(phys_addr_t sar_addr, phys_addr_t dar_addr, unsigned int size, void *chan);
+int sunxi_pcie_dma_get_chan(struct platform_device *pdev);
+int sunxi_pcie_edma_config_start(struct sunxi_pci_edma_chan *edma_chan);
+
+#endif
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi.h linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi.h
--- linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi.h	2025-07-29 21:53:51.123340853 +0200
@@ -0,0 +1,406 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/* Copyright(c) 2020 - 2023 Allwinner Technology Co.,Ltd. All rights reserved. */
+/*
+ * Allwinner PCIe controller driver
+ *
+ * Copyright (C) 2022 allwinner Co., Ltd.
+ *
+ * Author: songjundong <songjundong@allwinnertech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#ifndef _PCIE_SUNXI_H
+#define _PCIE_SUNXI_H
+
+#include <sunxi-gpio.h>
+#include <linux/bits.h>
+#include <asm/io.h>
+#include <linux/irqreturn.h>
+#include <linux/bitfield.h>
+#include <linux/dma-mapping.h>
+#include <linux/irq.h>
+#include <linux/msi.h>
+#include <linux/pci.h>
+#include <linux/pci-epc.h>
+#include <linux/pci-epf.h>
+#include <linux/version.h>
+#include <linux/phy/phy.h>
+#include "pcie-sunxi-dma.h"
+#define PCIE_PORT_LINK_CONTROL			0x710
+#define PORT_LINK_MODE_MASK			(0x3f << 16)
+#define PORT_LINK_MODE_1_LANES			(0x1 << 16)
+#define PORT_LINK_MODE_2_LANES			(0x3 << 16)
+#define PORT_LINK_MODE_4_LANES			(0x7 << 16)
+#define PORT_LINK_LPBK_ENABLE		        (0x1 << 2)
+
+#define PCIE_LINK_WIDTH_SPEED_CONTROL		0x80C
+#define PORT_LOGIC_SPEED_CHANGE			(0x1 << 17)
+#define PORT_LOGIC_LINK_WIDTH_MASK		(0x1ff << 8)
+#define PORT_LOGIC_LINK_WIDTH_1_LANES		(0x1 << 8)
+#define PORT_LOGIC_LINK_WIDTH_2_LANES		(0x2 << 8)
+#define PORT_LOGIC_LINK_WIDTH_4_LANES		(0x4 << 8)
+
+#define PCIE_ATU_VIEWPORT			0x900
+#define PCIE_ATU_REGION_INBOUND			(0x1 << 31)
+#define PCIE_ATU_REGION_OUTBOUND		(0x0 << 31)
+#define PCIE_ATU_REGION_INDEX2			(0x2 << 0)
+#define PCIE_ATU_REGION_INDEX1			(0x1 << 0)
+#define PCIE_ATU_REGION_INDEX0			(0x0 << 0)
+
+#define PCIE_ATU_INDEX0				0x0
+#define PCIE_ATU_INDEX1				0x1
+#define PCIE_ATU_INDEX2				0x2
+#define PCIE_ATU_INDEX3				0x3
+#define PCIE_ATU_INDEX4				0x4
+#define PCIE_ATU_INDEX5				0x5
+#define PCIE_ATU_INDEX6				0x6
+#define PCIE_ATU_INDEX7				0x7
+
+#define PCIE_EP_REBAR_SIZE_32M			0x200
+
+#define PCIE_ATU_CR1_OUTBOUND(reg)		(0x300000 + ((reg) * 0x200))
+#define PCIE_ATU_TYPE_MEM			(0x0 << 0)
+#define PCIE_ATU_TYPE_IO			(0x2 << 0)
+#define PCIE_ATU_TYPE_CFG0			(0x4 << 0)
+#define PCIE_ATU_TYPE_CFG1			(0x5 << 0)
+#define PCIE_ATU_CR2_OUTBOUND(reg)		(0x300004 + ((reg) * 0x200))
+#define PCIE_ATU_DMA_BYPASS			BIT(27)
+#define PCIE_ATU_BAR_MODE_ENABLE		BIT(30)
+#define PCIE_ATU_ENABLE				BIT(31)
+
+#define PCIE_ATU_LOWER_BASE_OUTBOUND(reg)	(0x300008 + ((reg) * 0x200))
+#define PCIE_ATU_UPPER_BASE_OUTBOUND(reg)	(0x30000c + ((reg) * 0x200))
+#define PCIE_ATU_LIMIT_OUTBOUND(reg)		(0x300010 + ((reg) * 0x200))
+#define PCIE_ATU_LOWER_TARGET_OUTBOUND(reg)	(0x300014 + ((reg) * 0x200))
+#define PCIE_ATU_UPPER_TARGET_OUTBOUND(reg)	(0x300018 + ((reg) * 0x200))
+
+#define PCIE_ATU_CR1_INBOUND(reg)		(0x300100 + ((reg) * 0x200))
+#define PCIE_ATU_TYPE_MEM			(0x0 << 0)
+#define PCIE_ATU_TYPE_IO			(0x2 << 0)
+#define PCIE_ATU_TYPE_CFG0			(0x4 << 0)
+#define PCIE_ATU_TYPE_CFG1			(0x5 << 0)
+#define PCIE_ATU_FUNC_NUM(pf)			((pf) << 20)
+#define PCIE_ATU_CR2_INBOUND(reg)		(0x300104 + ((reg) * 0x200))
+#define PCIE_ATU_MATCH_MODE			BIT(30)
+#define PCIE_ATU_FUNC_NUM_MATCH_EN		BIT(19)
+#define PCIE_ATU_FUNC_NUM(pf)			((pf) << 20)
+
+#define PCIE_ATU_LOWER_BASE_INBOUND(reg)	(0x300108 + ((reg) * 0x200))
+#define PCIE_ATU_UPPER_BASE_INBOUND(reg)	(0x30010c + ((reg) * 0x200))
+#define PCIE_ATU_LIMIT_INBOUND(reg)		(0x300110 + ((reg) * 0x200))
+#define PCIE_ATU_LOWER_TARGET_INBOUND(reg)	(0x300114 + ((reg) * 0x200))
+#define PCIE_ATU_UPPER_TARGET_INBOUND(reg)	(0x300118 + ((reg) * 0x200))
+
+#define PCIE_ATU_BUS(x)				(((x) & 0xff) << 24)
+#define PCIE_ATU_DEV(x)				(((x) & 0x1f) << 19)
+#define PCIE_ATU_FUNC(x)			(((x) & 0x7) << 16)
+
+#define PCIE_MISC_CONTROL_1_CFG			0x8bc
+#define PCIE_TYPE1_CLASS_CODE_REV_ID_REG	0x08
+
+#define PCIE_ADDRESS_ALIGNING			(~0x3)
+#define PCIE_HIGH_16				16
+#define PCIE_BAR_NUM				6
+#define PCIE_MEM_FLAGS				0x4
+#define PCIE_IO_FLAGS				0x1
+#define PCIE_BAR_REG				0x4
+#define PCIE_HIGH16_MASK			0xffff0000
+#define PCIE_LOW16_MASK				0x0000ffff
+#define PCIE_INTERRUPT_LINE_MASK		0xffff00ff
+#define PCIE_INTERRUPT_LINE_ENABLE		0x00000100
+#define	PCIE_PRIMARY_BUS_MASK			0xff000000
+#define PCIE_PRIMARY_BUS_ENABLE			0x00010100
+#define PCIE_MEMORY_MASK			0xfff00000
+
+#define PCIE_CPU_BASE				0x20000000
+
+#define PCIE_TYPE0_STATUS_COMMAND_REG		0x4
+
+#define PCIE_DBI2_BASE				0x100000
+#define DBI2_FUNC_OFFSET			0x10000
+#define BAR_ENABLE					0x1
+
+#define RESBAR_CAP_REG				0x4 /* from PCIe spec4.0 7.8.6  */
+#define RESBAR_SIZE_MASK			0xfffff0
+#define RESBAR_CTL_REG				0x8
+#define RESBAR_NEXT_BAR				0x8
+#define SIZE_OF_1MB					20 /* 2^20 = 0x100000 */
+
+#define PCIE_COMBO_PHY_BGR		0x04
+#define PHY_ACLK_EN			BIT(17)
+#define PHY_HCLK_EN			BIT(16)
+#define PHY_TERSTN			BIT(1)
+#define PHY_PW_UP_RSTN			BIT(0)
+#define PCIE_COMBO_PHY_CTL		0x10
+#define PHY_USE_SEL			BIT(31)	/* 0:PCIE; 1:USB3 */
+#define	PHY_CLK_SEL			BIT(30) /* 0:internal clk; 1:exteral clk */
+#define PHY_BIST_EN			BIT(16)
+#define PHY_PIPE_SW			BIT(9)
+#define PHY_PIPE_SEL			BIT(8)  /* 0:PIPE resetn ctrl by PCIE ctrl; 1:PIPE resetn ctrl by  */
+#define PHY_PIPE_CLK_INVERT		BIT(4)
+#define PHY_FPGA_SYS_RSTN		BIT(1)  /* for PFGA  */
+#define PHY_RSTN			BIT(0)
+
+#define NEXT_CAP_PTR_MASK		0xff00
+#define CAP_ID_MASK			0x00ff
+
+/*
+ * Maximum number of MSI IRQs can be 256 per controller. But keep
+ * it 32 as of now. Probably we will never need more than 32. If needed,
+ * then increment it in multiple of 32.
+ */
+#define INT_PCI_MSI_NR			32
+#define MAX_MSI_IRQS			256
+#define MAX_MSI_IRQS_PER_CTRL		32
+#define MAX_MSI_CTRLS			(MAX_MSI_IRQS / MAX_MSI_IRQS_PER_CTRL)
+#define MSI_REG_CTRL_BLOCK_SIZE		12
+
+/* #define MAX_MSI_IRQS			32 */
+/* #define MAX_MSI_CTRLS		(MAX_MSI_IRQS / 32) */
+#define PCIE_LINK_WIDTH_SPEED_CONTROL	0x80C
+#define PORT_LOGIC_SPEED_CHANGE		(0x1 << 17)
+#define LINK_CONTROL2_LINK_STATUS2	0xa0
+/* Parameters for the waiting for link up routine */
+#define LINK_WAIT_MAX_RETRIE		20
+#define LINK_WAIT_USLEEP_MIN		90000
+#define LINK_WAIT_USLEEP_MAX		100000
+#define SPEED_CHANGE_USLEEP_MIN		100
+#define SPEED_CHANGE_USLEEP_MAX		1000
+
+#define PCIE_MSI_ADDR_LO		0x820
+#define PCIE_MSI_ADDR_HI		0x824
+#define PCIE_MSI_INTR_ENABLE(reg)	(0x828 + ((reg) * 0x0c))
+/* #define PCIE_MSI_INTR_MASK(reg)	(0x82C + ((reg) * 0x0c)) */
+/* #define PCIE_MSI_INTR_STATUS(reg)	(0x830 + ((reg) * 0x0c)) */
+/* #define PCIE_MSI_INTR_ENABLE		0x828 */
+#define PCIE_MSI_INTR_MASK		0x82C
+#define PCIE_MSI_INTR_STATUS		0x830
+
+#define PCIE_CTRL_MGMT_BASE		0x900000
+
+#define PCIE_USER_DEFINED_REGISTER	0x400000
+#define PCIE_VER			0x00
+#define PCIE_ADDR_PAGE_CFG		0x04
+#define PCIE_AWMISC_CTRL		0x200
+#define PCIE_ARMISC_CTRL		0x220
+#define PCIE_LTSSM_CTRL			0xc00
+#define PCIE_LINK_TRAINING		BIT(0) /* 0:disable; 1:enable  */
+#define DEVICE_TYPE_MASK		GENMASK(7, 4)
+#define DEVICE_TYPE_RC			BIT(6)
+#define PCIE_INT_ENABLE_CLR		0xE04  /* BIT(1):RDLH_LINK_MASK; BIT(0):SMLH_LINK_MASK  */
+#define PCIE_LINK_STAT			0xE0C  /* BIT(1):RDLH_LINK;      BIT(0):SMLH_LINK  */
+#define RDLH_LINK_UP			BIT(1)
+#define SMLH_LINK_UP			BIT(0)
+#define PCIE_LINK_INT_EN		(BIT(0) | BIT(1))
+
+#define PCIE_PHY_CFG			0x800
+#define SYS_CLK				0
+#define PAD_CLK				1
+#define PCIE_LINK_UP_MASK		(0x3<<16)
+
+#define PCIE_RC_RP_ATS_BASE		0x400000
+
+#define SUNXI_PCIE_BAR_CFG_CTRL_DISABLED		0x0
+#define SUNXI_PCIE_BAR_CFG_CTRL_IO_32BITS		0x1
+#define SUNXI_PCIE_BAR_CFG_CTRL_MEM_32BITS		0x4
+#define SUNXI_PCIE_BAR_CFG_CTRL_PREFETCH_MEM_32BITS	0x5
+#define SUNXI_PCIE_BAR_CFG_CTRL_MEM_64BITS		0x6
+#define SUNXI_PCIE_BAR_CFG_CTRL_PREFETCH_MEM_64BITS	0x7
+
+#define SUNXI_PCIE_EP_MSI_CTRL_REG			0x90
+#define SUNXI_PCIE_EP_MSI_CTRL_MMC_OFFSET		17
+#define SUNXI_PCIE_EP_MSI_CTRL_MMC_MASK			GENMASK(19, 17)
+#define SUNXI_PCIE_EP_MSI_CTRL_MME_OFFSET		20
+#define SUNXI_PCIE_EP_MSI_CTRL_MME_MASK			GENMASK(22, 20)
+#define SUNXI_PCIE_EP_MSI_CTRL_ME			BIT(16)
+#define SUNXI_PCIE_EP_MSI_CTRL_MASK_MSI_CAP		BIT(24)
+#define SUNXI_PCIE_EP_DUMMY_IRQ_ADDR			0x1
+
+#define PCIE_PHY_FUNC_CFG		(PCIE_CTRL_MGMT_BASE + 0x2c0)
+#define PCIE_RC_BAR_CONF		(PCIE_CTRL_MGMT_BASE + 0x300)
+
+//ECC
+#define PCIE_RASDP_ERR_PROT_CTRL_OFF			0X1F0
+#define PCIE_RASDP_ERR_INJ_CTRL_OFF			0X204
+#define PCIE_RASDP_UNCORR_COUNTER_CTRL_OFF		0X1FC
+#define PCIE_RASDP_UNCORR_COUNTER_REPORT_OFF		0X200
+#define PCIE_RASDP_UNCORR_ERROR_LOCATION_OFF		0X20C
+#define PCIE_RASDP_ERROR_MODR_CLEAR_OFF			0X214
+
+#define PCIE_RASDP_CORR_COUNTER_CTRL_OFF		0X1F4
+#define PCIE_RASDP_CORR_COUNTER_REPORT_OFF		0X1F8
+#define PCIE_RASDP_CORR_ERROR_LOCATION_OFF		0X208
+
+#define PCIE_SII_INT_MASK_RES2				0XE10
+#define PCIE_SII_INT_RES2				0XE18
+#define APP_PARITY_ERRS2_MASK				BIT(12)
+#define APP_PARITY_ERRS1_MASK				BIT(11)
+#define APP_PARITY_ERRS0_MASK				BIT(10)
+#define SLV_RASDP_ERR_MODE_MASK				BIT(9)
+#define MATR_RASDP_ERR_MODE_MASK			BIT(8)
+#define RASDP_ERR_PENDING 				(BIT(8) | BIT(9) | BIT(10) | BIT(11) | BIT(12))
+#define PCIE_SII_INT_RES2_ECC_MASK 			GENMASK(12, 8)
+enum sunxi_pcie_device_mode {
+	SUNXI_PCIE_EP_TYPE,
+	SUNXI_PCIE_RC_TYPE,
+};
+
+struct sunxi_pcie_of_data {
+	const struct sunxi_pcie_ep_ops *ops;
+	enum sunxi_pcie_device_mode mode;
+	u32 func_offset;
+	bool cpu_pcie_addr_quirk;
+	bool has_pcie_slv_clk;
+	bool need_pcie_rst;
+	bool pcie_slv_clk_400m;
+	bool has_pcie_its_clk;
+};
+
+struct sunxi_pcie_ep_func {
+	struct list_head list;
+	u8 func_no;
+	u8 msi_cap;
+	u8 msix_cap;
+};
+
+struct sunxi_pcie_ep {
+	struct pci_epc		*epc;
+	struct list_head	func_list;
+	const struct sunxi_pcie_ep_ops *ops;
+	phys_addr_t		phys_base;
+	size_t			addr_size;
+	size_t			page_size;
+	u8			bar_to_atu[PCI_STD_NUM_BARS];
+	phys_addr_t		*outbound_addr;
+	u32			num_ib_windows;
+	u32			num_ob_windows;
+	unsigned long		*ib_window_map;
+	unsigned long		*ob_window_map;
+	void __iomem		*msi_mem;
+	phys_addr_t		msi_mem_phys;
+	struct pci_epf_bar	*epf_bar[PCI_STD_NUM_BARS];
+};
+
+struct sunxi_pcie_ep_ops {
+	void	(*ep_init)(struct sunxi_pcie_ep *ep);
+	int	(*raise_irq)(struct sunxi_pcie_ep *ep, u8 func_no,
+			     unsigned int type, u16 interrupt_num);
+	const struct pci_epc_features *(*get_features)(struct sunxi_pcie_ep *ep);
+	unsigned int (*func_conf_select)(struct sunxi_pcie_ep *ep, u8 func_no);
+};
+
+struct sunxi_pcie_port {
+	struct device			*dev;
+	void __iomem			*dbi_base;
+	u64				cfg0_base;
+	void __iomem			*va_cfg0_base;
+	u32				cfg0_size;
+	resource_size_t			io_base;
+	phys_addr_t			io_bus_addr;
+	u32				io_size;
+	u32				num_ob_windows;
+	struct sunxi_pcie_host_ops	*ops;
+	int				msi_irq;
+	struct irq_domain		*irq_domain;
+	struct irq_domain		*msi_domain;
+	struct pci_host_bridge		*bridge;
+	raw_spinlock_t			lock;
+	unsigned long			msi_map[BITS_TO_LONGS(INT_PCI_MSI_NR)];
+	bool				has_its;
+	bool				cpu_pcie_addr_quirk;
+};
+
+struct sunxi_pci_edma_chan;
+
+struct sunxi_pcie {
+	struct device		*dev;
+	void __iomem		*dbi_base;
+	void __iomem		*app_base;
+#if defined(CONFIG_AW_FPGA_S4) || defined(CONFIG_AW_FPGA_V7)
+	void __iomem		*phy_base;
+	void __iomem		*clk_base;
+	struct regmap		*phy_i2c;
+#endif
+	int			link_gen;
+	struct sunxi_pcie_port	pp;
+	struct sunxi_pcie_ep	ep;
+	struct clk		*pcie_aux;
+	struct clk		*pcie_slv;
+	struct clk		*pcie_its;
+	struct reset_control    *pcie_rst;
+	struct reset_control    *pwrup_rst;
+	struct reset_control    *pcie_its_rst;
+	struct phy		*phy;
+	struct dma_trx_obj	*dma_obj;
+	const struct sunxi_pcie_of_data *drvdata;
+	struct gpio_desc	*rst_gpio;
+	struct gpio_desc	*wake_gpio;
+	u32			lanes;
+	u32			num_edma;
+	unsigned long		*rd_edma_map;
+	unsigned long		*wr_edma_map;
+	struct sunxi_pci_edma_chan	*dma_wr_chn;
+	struct sunxi_pci_edma_chan	*dma_rd_chn;
+	struct regulator	*pcie1v8;
+	struct regulator	*pcie3v3;
+};
+
+#define to_sunxi_pcie_from_pp(x)	\
+		container_of((x), struct sunxi_pcie, pp)
+
+#define to_sunxi_pcie_from_ep(endpoint)   \
+		container_of((endpoint), struct sunxi_pcie, ep)
+
+struct sunxi_pcie_host_ops {
+	void (*readl_rc)(struct sunxi_pcie_port *pp, void __iomem *dbi_base, u32 *val);
+	void (*writel_rc)(struct sunxi_pcie_port *pp,	u32 val, void __iomem *dbi_base);
+	int  (*rd_own_conf)(struct sunxi_pcie_port *pp, int where, int size, u32 *val);
+	int  (*wr_own_conf)(struct sunxi_pcie_port *pp, int where, int size, u32 val);
+	int  (*link_up)(struct sunxi_pcie_port *pp);
+	void (*host_init)(struct sunxi_pcie_port *pp);
+	void (*scan_bus)(struct sunxi_pcie_port *pp);
+};
+
+void sunxi_pcie_plat_set_rate(struct sunxi_pcie *pci);
+void sunxi_pcie_write_dbi(struct sunxi_pcie *pci, u32 reg, size_t size, u32 val);
+u32 sunxi_pcie_read_dbi(struct sunxi_pcie *pci, u32 reg, size_t size);
+void sunxi_pcie_plat_ltssm_enable(struct sunxi_pcie *pci);
+void sunxi_pcie_plat_ltssm_disable(struct sunxi_pcie *pci);
+int sunxi_pcie_cfg_write(void __iomem *addr, int size, u32 val);
+int sunxi_pcie_cfg_read(void __iomem *addr, int size, u32 *val);
+
+#if IS_ENABLED(CONFIG_AW_PCIE_RC)
+int sunxi_pcie_host_init(struct sunxi_pcie_port *pp);
+void sunxi_pcie_host_change_nsi_port_bwl(struct sunxi_pcie *pci, int gen);
+int sunxi_pcie_host_add_port(struct sunxi_pcie *pci, struct platform_device *pdev);
+void sunxi_pcie_host_remove_port(struct sunxi_pcie *pci);
+int sunxi_pcie_host_speed_change(struct sunxi_pcie *pci, int gen);
+int sunxi_pcie_host_wr_own_conf(struct sunxi_pcie_port *pp, int where, int size, u32 val);
+int sunxi_pcie_host_establish_link(struct sunxi_pcie *pci);
+void sunxi_pcie_host_setup_rc(struct sunxi_pcie_port *pp);
+#else
+static inline int sunxi_pcie_host_add_port(struct sunxi_pcie *pci, struct platform_device *pdev) {return 0; }
+static inline void sunxi_pcie_host_remove_port(struct sunxi_pcie *pci) {}
+static inline int sunxi_pcie_host_speed_change(struct sunxi_pcie *pci, int gen) {return 0; }
+static inline int sunxi_pcie_host_wr_own_conf(struct sunxi_pcie_port *pp, int where, int size, u32 val) {return 0; }
+static inline int sunxi_pcie_host_establish_link(struct sunxi_pcie *pci) {return 0; }
+static inline void sunxi_pcie_host_setup_rc(struct sunxi_pcie_port *pp) {}
+#endif
+
+static inline int sunxi_pcie_ep_init(struct sunxi_pcie *pci) {return 0; }
+static inline void sunxi_pcie_ep_deinit(struct sunxi_pcie *pci) {}
+
+void sunxi_pcie_writel(u32 val, struct sunxi_pcie *pcie, u32 offset);
+u32 sunxi_pcie_readl(struct sunxi_pcie *pcie, u32 offset);
+void sunxi_pcie_writel_dbi(struct sunxi_pcie *pci, u32 reg, u32 val);
+u32 sunxi_pcie_readl_dbi(struct sunxi_pcie *pci, u32 reg);
+void sunxi_pcie_writew_dbi(struct sunxi_pcie *pci, u32 reg, u16 val);
+u16 sunxi_pcie_readw_dbi(struct sunxi_pcie *pci, u32 reg);
+void sunxi_pcie_writeb_dbi(struct sunxi_pcie *pci, u32 reg, u8 val);
+u8 sunxi_pcie_readb_dbi(struct sunxi_pcie *pci, u32 reg);
+void sunxi_pcie_dbi_ro_wr_en(struct sunxi_pcie *pci);
+void sunxi_pcie_dbi_ro_wr_dis(struct sunxi_pcie *pci);
+
+#endif /* _PCIE_SUNXI_H */
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-plat.c linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-plat.c
--- linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-plat.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-plat.c	2025-07-30 10:00:18.630011295 +0200
@@ -0,0 +1,1211 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright(c) 2020 - 2023 Allwinner Technology Co.,Ltd. All rights reserved. */
+/*
+ * PCIe driver for Allwinner Soc
+ *
+ * Copyright (C) 2022 Allwinner Co., Ltd.
+ *
+ * Author: songjundong <songjundong@allwinnertech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#define SUNXI_MODNAME "pcie"
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of_gpio.h>
+#include <linux/of_device.h>
+#include <linux/pci.h>
+#include <linux/platform_device.h>
+#include <linux/regulator/consumer.h>
+#include <linux/resource.h>
+#include <linux/signal.h>
+#include <linux/types.h>
+#include <linux/reset.h>
+#include <linux/regmap.h>
+#include <linux/mfd/syscon.h>
+#include <linux/phy/phy.h>
+#include <linux/pm_runtime.h>
+
+#include "pci.h"
+#include "pcie-sunxi-dma.h"
+#include "pcie-sunxi.h"
+
+#define SUNXI_PCIE_MODULE_VERSION	"1.1.2"
+
+void sunxi_pcie_writel(u32 val, struct sunxi_pcie *pcie, u32 offset)
+{
+	writel(val, pcie->app_base + offset);
+}
+
+u32 sunxi_pcie_readl(struct sunxi_pcie *pcie, u32 offset)
+{
+	return readl(pcie->app_base + offset);
+}
+
+void sunxi_pcie_writel_dbi(struct sunxi_pcie *pci, u32 reg, u32 val)
+{
+	sunxi_pcie_write_dbi(pci, reg, 0x4, val);
+}
+
+u32 sunxi_pcie_readl_dbi(struct sunxi_pcie *pci, u32 reg)
+{
+	return sunxi_pcie_read_dbi(pci, reg, 0x4);
+}
+
+void sunxi_pcie_writew_dbi(struct sunxi_pcie *pci, u32 reg, u16 val)
+{
+	sunxi_pcie_write_dbi(pci, reg, 0x2, val);
+}
+
+u16 sunxi_pcie_readw_dbi(struct sunxi_pcie *pci, u32 reg)
+{
+	return sunxi_pcie_read_dbi(pci, reg, 0x2);
+}
+
+void sunxi_pcie_writeb_dbi(struct sunxi_pcie *pci, u32 reg, u8 val)
+{
+	sunxi_pcie_write_dbi(pci, reg, 0x1, val);
+}
+
+u8 sunxi_pcie_readb_dbi(struct sunxi_pcie *pci, u32 reg)
+{
+	return sunxi_pcie_read_dbi(pci, reg, 0x1);
+}
+
+void sunxi_pcie_dbi_ro_wr_en(struct sunxi_pcie *pci)
+{
+	u32 val;
+
+	val = sunxi_pcie_readl_dbi(pci, PCIE_MISC_CONTROL_1_CFG);
+	val |= (0x1 << 0);
+	sunxi_pcie_writel_dbi(pci, PCIE_MISC_CONTROL_1_CFG, val);
+}
+
+void sunxi_pcie_dbi_ro_wr_dis(struct sunxi_pcie *pci)
+{
+	u32 val;
+
+	val = sunxi_pcie_readl_dbi(pci, PCIE_MISC_CONTROL_1_CFG);
+	val &= ~(0x1 << 0);
+	sunxi_pcie_writel_dbi(pci, PCIE_MISC_CONTROL_1_CFG, val);
+}
+
+static void sunxi_pcie_plat_set_mode(struct sunxi_pcie *pci)
+{
+	u32 val;
+
+	switch (pci->drvdata->mode) {
+	case SUNXI_PCIE_EP_TYPE:
+		val = sunxi_pcie_readl(pci, PCIE_LTSSM_CTRL);
+		val &= ~DEVICE_TYPE_MASK;
+		sunxi_pcie_writel(val, pci, PCIE_LTSSM_CTRL);
+		break;
+	case SUNXI_PCIE_RC_TYPE:
+		val = sunxi_pcie_readl(pci, PCIE_LTSSM_CTRL);
+		val |= DEVICE_TYPE_RC;
+		sunxi_pcie_writel(val, pci, PCIE_LTSSM_CTRL);
+		break;
+	default:
+		printk("sunxi-pcie: unsupported device type:%d\n", pci->drvdata->mode);
+		break;
+	}
+}
+
+static u8 __sunxi_pcie_find_next_cap(struct sunxi_pcie *pci, u8 cap_ptr,
+						u8 cap)
+{
+	u8 cap_id, next_cap_ptr;
+	u16 reg;
+
+	if (!cap_ptr)
+		return 0;
+
+	reg = sunxi_pcie_readw_dbi(pci, cap_ptr);
+	cap_id = (reg & CAP_ID_MASK);
+
+	if (cap_id > PCI_CAP_ID_MAX)
+		return 0;
+
+	if (cap_id == cap)
+		return cap_ptr;
+
+	next_cap_ptr = (reg & NEXT_CAP_PTR_MASK) >> 8;
+	return __sunxi_pcie_find_next_cap(pci, next_cap_ptr, cap);
+}
+
+static u8 sunxi_pcie_plat_find_capability(struct sunxi_pcie *pci, u8 cap)
+{
+	u8 next_cap_ptr;
+	u16 reg;
+
+	reg = sunxi_pcie_readw_dbi(pci, PCI_CAPABILITY_LIST);
+	next_cap_ptr = (reg & CAP_ID_MASK);
+
+	return __sunxi_pcie_find_next_cap(pci, next_cap_ptr, cap);
+}
+
+int sunxi_pcie_cfg_read(void __iomem *addr, int size, u32 *val)
+{
+	if ((uintptr_t)addr & (size - 1)) {
+		*val = 0;
+		return PCIBIOS_BAD_REGISTER_NUMBER;
+	}
+
+	if (size == 4) {
+		*val = readl(addr);
+	} else if (size == 2) {
+		*val = readw(addr);
+	} else if (size == 1) {
+		*val = readb(addr);
+	} else {
+		*val = 0;
+		return PCIBIOS_BAD_REGISTER_NUMBER;
+	}
+
+	return PCIBIOS_SUCCESSFUL;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_cfg_read);
+
+int sunxi_pcie_cfg_write(void __iomem *addr, int size, u32 val)
+{
+	if ((uintptr_t)addr & (size - 1))
+		return PCIBIOS_BAD_REGISTER_NUMBER;
+
+	if (size == 4)
+		writel(val, addr);
+	else if (size == 2)
+		writew(val, addr);
+	else if (size == 1)
+		writeb(val, addr);
+	else
+		return PCIBIOS_BAD_REGISTER_NUMBER;
+
+	return PCIBIOS_SUCCESSFUL;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_cfg_write);
+
+void sunxi_pcie_write_dbi(struct sunxi_pcie *pci, u32 reg, size_t size, u32 val)
+{
+	int ret;
+
+	ret = sunxi_pcie_cfg_write(pci->dbi_base + reg, size, val);
+	if (ret)
+		printk("sunxi-pcie: Write DBI address failed\n");
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_write_dbi);
+
+u32 sunxi_pcie_read_dbi(struct sunxi_pcie *pci, u32 reg, size_t size)
+{
+	int ret;
+	u32 val;
+
+	ret = sunxi_pcie_cfg_read(pci->dbi_base + reg, size, &val);
+	if (ret)
+		printk("sunxi-pcie: Read DBI address failed\n");
+
+	return val;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_read_dbi);
+
+static void sunxi_pcie_plat_set_link_cap(struct sunxi_pcie *pci, u32 link_gen)
+{
+	u32 cap, ctrl2, link_speed;
+
+	u8 offset = sunxi_pcie_plat_find_capability(pci, PCI_CAP_ID_EXP);
+
+	cap = sunxi_pcie_readl_dbi(pci, offset + PCI_EXP_LNKCAP);
+	ctrl2 = sunxi_pcie_readl_dbi(pci, offset + PCI_EXP_LNKCTL2);
+	ctrl2 &= ~PCI_EXP_LNKCTL2_TLS;
+
+	switch (pcie_link_speed[link_gen]) {
+	case PCIE_SPEED_2_5GT:
+		link_speed = PCI_EXP_LNKCTL2_TLS_2_5GT;
+		break;
+	case PCIE_SPEED_5_0GT:
+		link_speed = PCI_EXP_LNKCTL2_TLS_5_0GT;
+		break;
+	case PCIE_SPEED_8_0GT:
+		link_speed = PCI_EXP_LNKCTL2_TLS_8_0GT;
+		break;
+	case PCIE_SPEED_16_0GT:
+		link_speed = PCI_EXP_LNKCTL2_TLS_16_0GT;
+		break;
+	default:
+		/* Use hardware capability */
+		link_speed = FIELD_GET(PCI_EXP_LNKCAP_SLS, cap);
+		ctrl2 &= ~PCI_EXP_LNKCTL2_HASD;
+		break;
+	}
+
+	sunxi_pcie_writel_dbi(pci, offset + PCI_EXP_LNKCTL2, ctrl2 | link_speed);
+
+	cap &= ~((u32)PCI_EXP_LNKCAP_SLS);
+	sunxi_pcie_writel_dbi(pci, offset + PCI_EXP_LNKCAP, cap | link_speed);
+}
+
+void sunxi_pcie_plat_set_rate(struct sunxi_pcie *pci)
+{
+	u32 val;
+
+	sunxi_pcie_plat_set_link_cap(pci, pci->link_gen);
+	/* set the number of lanes */
+	val = sunxi_pcie_readl_dbi(pci, PCIE_PORT_LINK_CONTROL);
+	val &= ~PORT_LINK_MODE_MASK;
+	switch (pci->lanes) {
+	case 1:
+		val |= PORT_LINK_MODE_1_LANES;
+		break;
+	case 2:
+		val |= PORT_LINK_MODE_2_LANES;
+		break;
+	case 4:
+		val |= PORT_LINK_MODE_4_LANES;
+		break;
+	default:
+		printk("sunxi-pcie: num-lanes %u: invalid value\n", pci->lanes);
+		return;
+	}
+	sunxi_pcie_writel_dbi(pci, PCIE_PORT_LINK_CONTROL, val);
+
+	/* set link width speed control register */
+	val = sunxi_pcie_readl_dbi(pci, PCIE_LINK_WIDTH_SPEED_CONTROL);
+	val &= ~PORT_LOGIC_LINK_WIDTH_MASK;
+	switch (pci->lanes) {
+	case 1:
+		val |= PORT_LOGIC_LINK_WIDTH_1_LANES;
+		break;
+	case 2:
+		val |= PORT_LOGIC_LINK_WIDTH_2_LANES;
+		break;
+	case 4:
+		val |= PORT_LOGIC_LINK_WIDTH_4_LANES;
+		break;
+	}
+	sunxi_pcie_writel_dbi(pci, PCIE_LINK_WIDTH_SPEED_CONTROL, val);
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_plat_set_rate);
+
+static unsigned int sunxi_pcie_ep_func_conf_select(struct sunxi_pcie_ep *ep,
+						u8 func_no)
+{
+	struct sunxi_pcie *pcie = to_sunxi_pcie_from_ep(ep);
+
+	WARN_ON(func_no && !pcie->drvdata->func_offset);
+	return pcie->drvdata->func_offset * func_no;
+}
+
+static const struct sunxi_pcie_ep_ops sunxi_ep_ops = {
+	.func_conf_select = sunxi_pcie_ep_func_conf_select,
+};
+
+static const struct sunxi_pcie_of_data sunxi_pcie_rc_v210_of_data = {
+	.mode = SUNXI_PCIE_RC_TYPE,
+	.cpu_pcie_addr_quirk = true,
+};
+
+static const struct sunxi_pcie_of_data sunxi_pcie_rc_v210_v2_of_data = {
+	.mode = SUNXI_PCIE_RC_TYPE,
+	.has_pcie_slv_clk = true,
+	.need_pcie_rst = true,
+};
+
+static const struct sunxi_pcie_of_data sunxi_pcie_rc_v300_of_data = {
+	.mode = SUNXI_PCIE_RC_TYPE,
+	.has_pcie_slv_clk = true,
+	.need_pcie_rst = true,
+	.pcie_slv_clk_400m = true,
+	.has_pcie_its_clk = true,
+};
+
+static const struct sunxi_pcie_of_data sunxi_pcie_ep_v210_of_data = {
+	.mode = SUNXI_PCIE_EP_TYPE,
+	.func_offset = 0x10000,
+	.ops = &sunxi_ep_ops,
+	.has_pcie_slv_clk = true,
+	.need_pcie_rst = true,
+};
+
+static const struct sunxi_pcie_of_data sunxi_pcie_ep_v300_of_data = {
+	.mode = SUNXI_PCIE_EP_TYPE,
+	.func_offset = 0x10000,
+	.ops = &sunxi_ep_ops,
+};
+
+static const struct of_device_id sunxi_pcie_plat_of_match[] = {
+	{
+		.compatible = "allwinner,sunxi-pcie-v210-rc",
+		.data = &sunxi_pcie_rc_v210_of_data,
+	},
+	{
+		.compatible = "allwinner,sunxi-pcie-v210-v2-rc",
+		.data = &sunxi_pcie_rc_v210_v2_of_data,
+	},
+	{
+		.compatible = "allwinner,sunxi-pcie-v210-ep",
+		.data = &sunxi_pcie_ep_v210_of_data,
+	},
+	{
+		.compatible = "allwinner,sunxi-pcie-v300-rc",
+		.data = &sunxi_pcie_rc_v300_of_data,
+	},
+	{
+		.compatible = "allwinner,sunxi-pcie-v300-ep",
+		.data = &sunxi_pcie_ep_v300_of_data,
+	},
+	{},
+};
+MODULE_DEVICE_TABLE(of, sunxi_pcie_plat_of_match);
+
+#if defined(CONFIG_AW_FPGA_S4) || defined(CONFIG_AW_FPGA_V7)
+static inline void sunxi_pcie_writel_phy(struct sunxi_pcie *pci, u32 val, u32 reg)
+{
+	writel(val, pci->phy_base + reg);
+}
+
+static inline u32 sunxi_pcie_readl_phy(struct sunxi_pcie *pci, u32 reg)
+{
+	return readl(pci->phy_base + reg);
+}
+#endif
+
+void sunxi_pcie_plat_ltssm_enable(struct sunxi_pcie *pcie)
+{
+	u32 val;
+
+	val = sunxi_pcie_readl(pcie, PCIE_LTSSM_CTRL);
+	val |= PCIE_LINK_TRAINING;
+	sunxi_pcie_writel(val, pcie, PCIE_LTSSM_CTRL);
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_plat_ltssm_enable);
+
+void sunxi_pcie_plat_ltssm_disable(struct sunxi_pcie *pcie)
+{
+	u32 val;
+
+	val = sunxi_pcie_readl(pcie, PCIE_LTSSM_CTRL);
+	val &= ~PCIE_LINK_TRAINING;
+	sunxi_pcie_writel(val, pcie, PCIE_LTSSM_CTRL);
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_plat_ltssm_disable);
+
+static void sunxi_pcie_plat_irqpending(struct sunxi_pcie_port *pp)
+{
+	struct sunxi_pcie *pcie = to_sunxi_pcie_from_pp(pp);
+	u32 val;
+
+	val = sunxi_pcie_readl(pcie, PCIE_INT_ENABLE_CLR);
+	val &= ~PCIE_LINK_INT_EN;
+	sunxi_pcie_writel(val, pcie, PCIE_INT_ENABLE_CLR);
+}
+
+static void sunxi_pcie_plat_set_irqmask(struct sunxi_pcie *pci)
+{
+	u32 val;
+
+	val = sunxi_pcie_readl(pci, PCIE_INT_ENABLE_CLR);
+	val |= PCIE_LINK_INT_EN;
+	sunxi_pcie_writel(val, pci, PCIE_INT_ENABLE_CLR);
+}
+
+static int sunxi_pcie_plat_power_on(struct sunxi_pcie *pci)
+{
+	struct device *dev = pci->dev;
+	int ret = 0;
+
+	if (!IS_ERR(pci->pcie3v3)) {
+		ret = regulator_set_voltage(pci->pcie3v3, 3300000, 3300000);
+		if (ret)
+			printk("sunxi-pcie: failed to set regulator voltage pcie3v3\n");
+
+		ret = regulator_enable(pci->pcie3v3);
+		if (ret)
+			printk("sunxi-pcie: failed to enable pcie3v3 regulator\n");
+	}
+
+	if (!IS_ERR(pci->pcie1v8)) {
+		ret = regulator_set_voltage(pci->pcie1v8, 1800000, 1800000);
+		if (ret)
+			printk("sunxi-pcie: failed to set regulator voltage pcie1v8\n");
+
+		ret = regulator_enable(pci->pcie1v8);
+		if (ret)
+			printk("sunxi-pcie: failed to enable pcie1v8 regulator\n");
+	}
+
+	return ret;
+}
+
+static void sunxi_pcie_plat_power_off(struct sunxi_pcie *pci)
+{
+	if (!IS_ERR(pci->pcie3v3))
+		regulator_disable(pci->pcie3v3);
+	if (!IS_ERR(pci->pcie1v8))
+		regulator_disable(pci->pcie1v8);
+}
+
+static int sunxi_pcie_plat_clk_setup(struct sunxi_pcie *pci)
+{
+	int ret;
+
+	if (pci->drvdata->need_pcie_rst) {
+		ret = reset_control_deassert(pci->pcie_rst);
+		if (ret) {
+			printk("sunxi-pcie: cannot reset pcie\n");
+			return ret;
+		}
+
+		ret = reset_control_deassert(pci->pwrup_rst);
+		if (ret) {
+			printk("sunxi-pcie: cannot pwrup_reset pcie\n");
+			goto err0;
+		}
+	}
+
+	ret = clk_prepare_enable(pci->pcie_aux);
+	if (ret) {
+		printk("sunxi-pcie: cannot prepare/enable aux clock\n");
+		goto err1;
+	}
+
+	if (pci->drvdata->has_pcie_slv_clk) {
+		if (pci->drvdata->pcie_slv_clk_400m) {
+			ret = clk_set_rate(pci->pcie_slv, 400000000);
+			if (ret) {
+				printk("sunxi-pcie: cannot set slv clock\n");
+				goto err2;
+			}
+		}
+		ret = clk_prepare_enable(pci->pcie_slv);
+		if (ret) {
+			printk("sunxi-pcie: cannot prepare/enable slv clock\n");
+			goto err2;
+		}
+	}
+
+	if (pci->drvdata->has_pcie_its_clk) {
+		ret = reset_control_deassert(pci->pcie_its_rst);
+		if (ret) {
+			printk("sunxi-pcie: cannot reset pcie its\n");
+			goto err3;
+		}
+
+		ret = clk_prepare_enable(pci->pcie_its);
+		if (ret) {
+			printk("sunxi-pcie: cannot prepare/enable its clock\n");
+			goto err4;
+		}
+	}
+
+	return 0;
+err4:
+	if (pci->drvdata->has_pcie_its_clk)
+		reset_control_assert(pci->pcie_its_rst);
+err3:
+	if (pci->drvdata->has_pcie_slv_clk)
+		clk_disable_unprepare(pci->pcie_slv);
+err2:
+	clk_disable_unprepare(pci->pcie_aux);
+err1:
+	if (pci->drvdata->need_pcie_rst)
+		reset_control_assert(pci->pwrup_rst);
+err0:
+	if (pci->drvdata->need_pcie_rst)
+		reset_control_assert(pci->pcie_rst);
+
+	return ret;
+}
+
+static void sunxi_pcie_plat_clk_exit(struct sunxi_pcie *pci)
+{
+	if (pci->drvdata->has_pcie_its_clk) {
+		clk_disable_unprepare(pci->pcie_its);
+		reset_control_assert(pci->pcie_its_rst);
+	}
+
+	if (pci->drvdata->has_pcie_slv_clk)
+		clk_disable_unprepare(pci->pcie_slv);
+
+	clk_disable_unprepare(pci->pcie_aux);
+
+	if (pci->drvdata->need_pcie_rst) {
+		reset_control_assert(pci->pcie_rst);
+		reset_control_assert(pci->pwrup_rst);
+	}
+}
+
+static int sunxi_pcie_plat_clk_get(struct platform_device *pdev, struct sunxi_pcie *pci)
+{
+	pci->pcie_aux = devm_clk_get(&pdev->dev, "pclk_aux");
+	if (IS_ERR(pci->pcie_aux)) {
+		printk("sunxi-pcie: fail to get pclk_aux\n");
+		return PTR_ERR(pci->pcie_aux);
+	}
+
+	if (pci->drvdata->has_pcie_slv_clk) {
+		pci->pcie_slv = devm_clk_get(&pdev->dev, "pclk_slv");
+		if (IS_ERR(pci->pcie_slv)) {
+			printk("sunxi-pcie: fail to get pclk_slv\n");
+			return PTR_ERR(pci->pcie_slv);
+		}
+	}
+
+	if (pci->drvdata->need_pcie_rst) {
+		pci->pcie_rst = devm_reset_control_get(&pdev->dev, "pclk_rst");
+		if (IS_ERR(pci->pcie_rst)) {
+			printk("sunxi-pcie: fail to get pclk_rst\n");
+			return PTR_ERR(pci->pcie_rst);
+		}
+
+		pci->pwrup_rst = devm_reset_control_get(&pdev->dev, "pwrup_rst");
+		if (IS_ERR(pci->pwrup_rst)) {
+			printk("sunxi-pcie: fail to get pwrup_rst\n");
+			return PTR_ERR(pci->pwrup_rst);
+		}
+	}
+
+	if (pci->drvdata->has_pcie_its_clk) {
+		pci->pcie_its = devm_clk_get(&pdev->dev, "its");
+		if (IS_ERR(pci->pcie_its)) {
+			printk("sunxi-pcie: fail to get its clk\n");
+			return PTR_ERR(pci->pcie_its);
+		}
+
+		pci->pcie_its_rst = devm_reset_control_get(&pdev->dev, "its");
+		if (IS_ERR(pci->pcie_its_rst)) {
+			printk("sunxi-pcie: fail to get its rst\n");
+			return PTR_ERR(pci->pcie_its_rst);
+		}
+	}
+	return 0;
+}
+
+static int sunxi_pcie_plat_combo_phy_init(struct sunxi_pcie *pci)
+{
+	int ret;
+
+	ret = phy_init(pci->phy);
+	if (ret) {
+		printk("sunxi-pcie: fail to init phy, err %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void sunxi_pcie_plat_combo_phy_deinit(struct sunxi_pcie *pci)
+{
+	phy_exit(pci->phy);
+}
+
+static irqreturn_t sunxi_pcie_plat_sii_handler(int irq, void *arg)
+{
+	struct sunxi_pcie_port *pp = (struct sunxi_pcie_port *)arg;
+
+	sunxi_pcie_plat_irqpending(pp);
+
+	return IRQ_HANDLED;
+}
+
+static void sunxi_pcie_plat_dma_handle_interrupt(struct sunxi_pcie *pci, u32 ch, enum dma_dir dma_trx)
+{
+	sunxi_pci_edma_chan_t *edma_chan = NULL;
+	sunxi_pcie_edma_callback cb = NULL;
+	void *cb_data = NULL;
+
+	if (dma_trx == PCIE_DMA_WRITE) {
+		edma_chan = &pci->dma_wr_chn[ch];
+		cb = edma_chan->callback;
+		cb_data = edma_chan->callback_param;
+		if (cb)
+			cb(cb_data);
+	} else if (dma_trx == PCIE_DMA_READ) {
+		edma_chan = &pci->dma_rd_chn[ch];
+		cb = edma_chan->callback;
+		cb_data = edma_chan->callback_param;
+		if (cb)
+			cb(cb_data);
+	} else {
+		printk("sunxi-pcie: ERR: unsupported type:%d \n", dma_trx);
+	}
+
+	if (edma_chan->cookie)
+		sunxi_pcie_dma_chan_release(edma_chan, dma_trx);
+}
+
+#define SUNXI_PCIE_DMA_IRQ_HANDLER(name, chn, dir)				\
+static irqreturn_t sunxi_pcie_##name##_irq_handler				\
+						(int irq, void *arg)		\
+{										\
+	struct sunxi_pcie *pci = arg;						\
+	union int_status sta = {0};						\
+	union int_clear  clr = {0};                                             \
+												  \
+	sta.dword = sunxi_pcie_readl_dbi(pci, PCIE_DMA_OFFSET +					  \
+					(dir ? PCIE_DMA_RD_INT_STATUS : PCIE_DMA_WR_INT_STATUS)); \
+												  \
+	if (sta.done & BIT(chn)) {							          \
+		clr.doneclr = BIT(chn);								  \
+		sunxi_pcie_writel_dbi(pci, PCIE_DMA_OFFSET +					  \
+				(dir ? PCIE_DMA_RD_INT_CLEAR : PCIE_DMA_WR_INT_CLEAR), clr.dword);\
+		sunxi_pcie_plat_dma_handle_interrupt(pci, chn, dir);				  \
+	}											  \
+												  \
+	if (sta.abort & BIT(chn)) {								  \
+		clr.abortclr = BIT(chn);							  \
+		sunxi_pcie_writel_dbi(pci, PCIE_DMA_OFFSET +					  \
+				(dir ? PCIE_DMA_RD_INT_CLEAR : PCIE_DMA_WR_INT_CLEAR), clr.dword);\
+		printk("sunxi-pcie: DMA %s channel %d is abort\n",				  \
+							dir ? "read":"write", chn);		  \
+	}											  \
+												  \
+	return IRQ_HANDLED;									  \
+}
+
+SUNXI_PCIE_DMA_IRQ_HANDLER(dma_w0, 0, PCIE_DMA_WRITE)
+SUNXI_PCIE_DMA_IRQ_HANDLER(dma_w1, 1, PCIE_DMA_WRITE)
+SUNXI_PCIE_DMA_IRQ_HANDLER(dma_w2, 2, PCIE_DMA_WRITE)
+SUNXI_PCIE_DMA_IRQ_HANDLER(dma_w3, 3, PCIE_DMA_WRITE)
+
+SUNXI_PCIE_DMA_IRQ_HANDLER(dma_r0, 0, PCIE_DMA_READ)
+SUNXI_PCIE_DMA_IRQ_HANDLER(dma_r1, 1, PCIE_DMA_READ)
+SUNXI_PCIE_DMA_IRQ_HANDLER(dma_r2, 2, PCIE_DMA_READ)
+SUNXI_PCIE_DMA_IRQ_HANDLER(dma_r3, 3, PCIE_DMA_READ)
+
+static void sunxi_pcie_plat_dma_read(struct sunxi_pcie *pci, struct dma_table *table)
+{
+	int offset = PCIE_DMA_OFFSET + table->start.chnl * 0x200;
+
+	sunxi_pcie_writel_dbi(pci, PCIE_DMA_OFFSET + PCIE_DMA_RD_ENB,
+							table->enb.dword);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_RD_CTRL_LO,
+							table->ctx_reg.ctrllo.dword);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_RD_CTRL_HI,
+							table->ctx_reg.ctrlhi.dword);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_RD_XFERSIZE,
+							table->ctx_reg.xfersize);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_RD_SAR_LO,
+							table->ctx_reg.sarptrlo);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_RD_SAR_HI,
+							table->ctx_reg.sarptrhi);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_RD_DAR_LO,
+							table->ctx_reg.darptrlo);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_RD_DAR_HI,
+							table->ctx_reg.darptrhi);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_RD_WEILO,
+							table->weilo.dword);
+	sunxi_pcie_writel_dbi(pci, PCIE_DMA_OFFSET + PCIE_DMA_RD_DOORBELL,
+							table->start.dword);
+}
+
+static void sunxi_pcie_plat_dma_write(struct sunxi_pcie *pci, struct dma_table *table)
+{
+	int offset = PCIE_DMA_OFFSET + table->start.chnl * 0x200;
+
+	sunxi_pcie_writel_dbi(pci, PCIE_DMA_OFFSET + PCIE_DMA_WR_ENB,
+							table->enb.dword);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_WR_CTRL_LO,
+							table->ctx_reg.ctrllo.dword);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_WR_CTRL_HI,
+							table->ctx_reg.ctrlhi.dword);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_WR_XFERSIZE,
+							table->ctx_reg.xfersize);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_WR_SAR_LO,
+							table->ctx_reg.sarptrlo);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_WR_SAR_HI,
+							table->ctx_reg.sarptrhi);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_WR_DAR_LO,
+							table->ctx_reg.darptrlo);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_WR_DAR_HI,
+							table->ctx_reg.darptrhi);
+	sunxi_pcie_writel_dbi(pci, offset + PCIE_DMA_WR_WEILO,
+							table->weilo.dword);
+	sunxi_pcie_writel_dbi(pci, PCIE_DMA_OFFSET + PCIE_DMA_WR_DOORBELL,
+							table->start.dword);
+}
+
+/*
+ * DMA controller: I/O and Type 0 or Type 1 configuration DMA
+ * transfers are not supported.
+ * Transfer size: 1B - 4GB
+ */
+static void sunxi_pcie_plat_dma_start(struct dma_table *table, struct dma_trx_obj *obj)
+{
+	struct sunxi_pcie *pci = dev_get_drvdata(obj->dev);
+
+	if (table->dir == PCIE_DMA_READ) {
+		sunxi_pcie_plat_dma_read(pci, table);
+	} else if (table->dir == PCIE_DMA_WRITE) {
+		sunxi_pcie_plat_dma_write(pci, table);
+	}
+}
+
+static int sunxi_pcie_plat_dma_config(struct dma_table *table, phys_addr_t src_addr, phys_addr_t dst_addr,
+					unsigned int size, enum dma_dir dma_trx, sunxi_pci_edma_chan_t *edma_chn)
+{
+	sunxi_pci_edma_chan_t *chn = NULL;
+
+	table->ctx_reg.ctrllo.lie   = 0x1;
+	table->ctx_reg.ctrllo.rie   = 0x0;
+	table->ctx_reg.ctrllo.td    = 0x1;
+	table->ctx_reg.ctrlhi.dword = 0x0;
+	table->ctx_reg.xfersize = size;
+	table->ctx_reg.sarptrlo = (u32)(src_addr & 0xffffffff);
+	table->ctx_reg.sarptrhi = (u32)(src_addr >> 32);
+	table->ctx_reg.darptrlo = (u32)(dst_addr & 0xffffffff);
+	table->ctx_reg.darptrhi = (u32)(dst_addr >> 32);
+	table->start.stop = 0x0;
+	table->dir = dma_trx;
+
+	if (!edma_chn) {
+		chn = (sunxi_pci_edma_chan_t *)sunxi_pcie_dma_chan_request(dma_trx, NULL, NULL);
+		if (!chn) {
+			printk("sunxi-pcie: pcie request %s channel error! \n", (dma_trx ? "DMA_READ" : "DMA_WRITE"));
+			return -ENOMEM;
+		}
+
+		chn->cookie = true;
+		table->start.chnl = chn->chnl_num;
+		table->weilo.dword = (PCIE_WEIGHT << (5 * chn->chnl_num));
+	} else {
+		table->start.chnl = edma_chn->chnl_num;
+		table->weilo.dword = (PCIE_WEIGHT << (5 * edma_chn->chnl_num));
+	}
+
+	table->enb.enb = 0x1;
+	return 0;
+}
+
+static int sunxi_pcie_plat_request_irq(struct sunxi_pcie *sunxi_pcie, struct platform_device *pdev)
+{
+	int irq, ret;
+
+	irq  = platform_get_irq_byname(pdev, "sii");
+	if (irq < 0)
+		return -EINVAL;
+
+	ret = devm_request_irq(&pdev->dev, irq,
+				sunxi_pcie_plat_sii_handler, IRQF_SHARED, "pcie-sii", &sunxi_pcie->pp);
+	if (ret) {
+		printk("sunxi-pcie: PCIe failed to request linkup IRQ\n");
+		return ret;
+	}
+
+	ret = sunxi_pcie_dma_get_chan(pdev);
+	if (ret)
+		return -EINVAL;
+
+	irq = platform_get_irq_byname(pdev, "edma-w0");
+	if (irq < 0)
+		return -EINVAL;
+
+	ret = devm_request_irq(&pdev->dev, irq, sunxi_pcie_dma_w0_irq_handler,
+			       IRQF_SHARED, "pcie-dma-w0", sunxi_pcie);
+	if (ret) {
+		printk("sunxi-pcie: failed to request PCIe DMA IRQ\n");
+		return ret;
+	}
+
+	irq = platform_get_irq_byname(pdev, "edma-w1");
+	if (irq < 0)
+		return -EINVAL;
+
+	ret = devm_request_irq(&pdev->dev, irq, sunxi_pcie_dma_w1_irq_handler,
+			       IRQF_SHARED, "pcie-dma-w1", sunxi_pcie);
+	if (ret) {
+		printk("sunxi-pcie: failed to request PCIe DMA IRQ\n");
+		return ret;
+	}
+
+	irq = platform_get_irq_byname(pdev, "edma-w2");
+	if (irq < 0)
+		return -EINVAL;
+
+	ret = devm_request_irq(&pdev->dev, irq, sunxi_pcie_dma_w2_irq_handler,
+			       IRQF_SHARED, "pcie-dma-w2", sunxi_pcie);
+	if (ret) {
+		printk("sunxi-pcie: failed to request PCIe DMA IRQ\n");
+		return ret;
+	}
+
+	irq = platform_get_irq_byname(pdev, "edma-w3");
+	if (irq < 0)
+		return -EINVAL;
+
+	ret = devm_request_irq(&pdev->dev, irq, sunxi_pcie_dma_w3_irq_handler,
+			       IRQF_SHARED, "pcie-dma-w3", sunxi_pcie);
+	if (ret) {
+		printk("sunxi-pcie: failed to request PCIe DMA IRQ\n");
+		return ret;
+	}
+
+	irq = platform_get_irq_byname(pdev, "edma-r0");
+	if (irq < 0)
+		return -EINVAL;
+
+	ret = devm_request_irq(&pdev->dev, irq, sunxi_pcie_dma_r0_irq_handler,
+			       IRQF_SHARED, "pcie-dma-r0", sunxi_pcie);
+	if (ret) {
+		printk("sunxi-pcie: failed to request PCIe DMA IRQ\n");
+		return ret;
+	}
+
+	irq = platform_get_irq_byname(pdev, "edma-r1");
+	if (irq < 0)
+		return -EINVAL;
+
+	ret = devm_request_irq(&pdev->dev, irq, sunxi_pcie_dma_r1_irq_handler,
+			       IRQF_SHARED, "pcie-dma-r1", sunxi_pcie);
+	if (ret) {
+		printk("sunxi-pcie: failed to request PCIe DMA IRQ\n");
+		return ret;
+	}
+
+	irq = platform_get_irq_byname(pdev, "edma-r2");
+	if (irq < 0)
+		return -EINVAL;
+
+	ret = devm_request_irq(&pdev->dev, irq, sunxi_pcie_dma_r2_irq_handler,
+			       IRQF_SHARED, "pcie-dma-r2", sunxi_pcie);
+	if (ret) {
+		printk("sunxi-pcie: failed to request PCIe DMA IRQ\n");
+		return ret;
+	}
+
+	irq = platform_get_irq_byname(pdev, "edma-r3");
+	if (irq < 0)
+		return -EINVAL;
+
+	ret = devm_request_irq(&pdev->dev, irq, sunxi_pcie_dma_r3_irq_handler,
+			       IRQF_SHARED, "pcie-dma-r3", sunxi_pcie);
+	if (ret) {
+		printk("sunxi-pcie: failed to request PCIe DMA IRQ\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static int sunxi_pcie_plat_dma_init(struct sunxi_pcie *pci)
+{
+	pci->dma_obj = sunxi_pcie_dma_obj_probe(pci->dev);
+
+	if (IS_ERR(pci->dma_obj)) {
+		printk("sunxi-pcie: failed to prepare dma obj probe\n");
+		return -EINVAL;
+	}
+
+	sunxi_pcie_writel_dbi(pci, PCIE_DMA_OFFSET + PCIE_DMA_WR_INT_MASK, 0x0);
+	sunxi_pcie_writel_dbi(pci, PCIE_DMA_OFFSET + PCIE_DMA_RD_INT_MASK, 0x0);
+	return 0;
+}
+
+static void sunxi_pcie_plat_dma_deinit(struct sunxi_pcie *pci)
+{
+	sunxi_pcie_dma_obj_remove(pci->dev);
+
+	sunxi_pcie_writel_dbi(pci, PCIE_DMA_OFFSET + PCIE_DMA_WR_INT_MASK, PCIE_DMA_INT_MASK);
+	sunxi_pcie_writel_dbi(pci, PCIE_DMA_OFFSET + PCIE_DMA_RD_INT_MASK, PCIE_DMA_INT_MASK);
+}
+
+static int sunxi_pcie_plat_parse_dts_res(struct platform_device *pdev, struct sunxi_pcie *pci)
+{
+	struct sunxi_pcie_port *pp = &pci->pp;
+	struct device_node *np = pp->dev->of_node;
+	struct resource *dbi_res;
+	int ret;
+
+	dbi_res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "dbi");
+	if (!dbi_res) {
+		printk("sunxi-pcie: get pcie dbi failed\n");
+		return -ENODEV;
+	}
+
+	pci->dbi_base = devm_ioremap_resource(&pdev->dev, dbi_res);
+	if (IS_ERR(pci->dbi_base)) {
+		printk("sunxi-pcie: ioremap pcie dbi failed\n");
+		return PTR_ERR(pci->dbi_base);
+	}
+
+	pp->dbi_base = pci->dbi_base;
+	pci->app_base = pci->dbi_base + PCIE_USER_DEFINED_REGISTER;
+
+	pci->link_gen = of_pci_get_max_link_speed(pdev->dev.of_node);
+	if (pci->link_gen < 0) {
+		printk("sunxi-pcie: get pcie speed Gen failed\n");
+		pci->link_gen = 0x1;
+	}
+
+	pci->rst_gpio = devm_gpiod_get(&pdev->dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(pci->rst_gpio))
+		printk("sunxi-pcie: Failed to get \"reset-gpios\"\n");
+	else
+		gpiod_direction_output(pci->rst_gpio, 1);
+
+	pci->wake_gpio = devm_gpiod_get(&pdev->dev, "wake", GPIOD_OUT_HIGH);
+	if (IS_ERR(pci->wake_gpio))
+		printk("sunxi-pcie: Failed to get \"wake-gpios\"\n");
+	else
+		gpiod_direction_output(pci->wake_gpio, 1);
+
+	pci->pcie3v3 = devm_regulator_get_optional(&pdev->dev, "pcie3v3");
+	if (IS_ERR(pci->pcie3v3))
+		printk("sunxi-pcie: no pcie3v3 regulator found\n");
+
+	pci->pcie1v8 = devm_regulator_get_optional(&pdev->dev, "pcie1v8");
+	if (IS_ERR(pci->pcie1v8))
+		printk("sunxi-pcie: no pcie1v8 regulator found\n");
+
+	ret = of_property_read_u32(np, "num-lanes", &pci->lanes);
+	if (ret) {
+		printk("sunxi-pcie: Failed to parse the number of lanes\n");
+		return -EINVAL;
+	}
+
+	pp->cpu_pcie_addr_quirk = pci->drvdata->cpu_pcie_addr_quirk;
+
+	ret = sunxi_pcie_plat_clk_get(pdev, pci);
+	if (ret) {
+		printk("sunxi-pcie: pcie get clk init failed\n");
+		return -ENODEV;
+	}
+
+	pci->phy = devm_phy_get(pci->dev, "pcie-phy");
+	if (IS_ERR(pci->phy))
+		return dev_err_probe(pci->dev, PTR_ERR(pci->phy), "missing PHY\n");
+
+	return 0;
+}
+
+static int sunxi_pcie_plat_hw_init(struct sunxi_pcie *pci)
+{
+	int ret;
+
+	ret = sunxi_pcie_plat_power_on(pci);
+	if (ret)
+		return ret;
+
+	ret = sunxi_pcie_plat_clk_setup(pci);
+	if (ret)
+		goto err0;
+
+	ret = sunxi_pcie_plat_combo_phy_init(pci);
+	if (ret)
+		goto err1;
+
+	return 0;
+
+err1:
+	sunxi_pcie_plat_clk_exit(pci);
+err0:
+	sunxi_pcie_plat_power_off(pci);
+
+	return ret;
+}
+
+static void sunxi_pcie_plat_hw_deinit(struct sunxi_pcie *pci)
+{
+	sunxi_pcie_plat_combo_phy_deinit(pci);
+	sunxi_pcie_plat_power_off(pci);
+	sunxi_pcie_plat_clk_exit(pci);
+}
+
+static int sunxi_pcie_plat_probe(struct platform_device *pdev)
+{
+	struct sunxi_pcie *pci;
+	struct sunxi_pcie_port *pp;
+	const struct sunxi_pcie_of_data *data;
+	enum sunxi_pcie_device_mode mode;
+	int ret;
+
+	data = of_device_get_match_data(&pdev->dev);
+	mode = (enum sunxi_pcie_device_mode)data->mode;
+
+	pci = devm_kzalloc(&pdev->dev, sizeof(*pci), GFP_KERNEL);
+	if (!pci)
+		return -ENOMEM;
+
+	pp = &pci->pp;
+	pp->dev = &pdev->dev;
+	pci->dev = &pdev->dev;
+	pci->drvdata = data;
+
+	ret = sunxi_pcie_plat_parse_dts_res(pdev, pci);
+	if (ret)
+		return ret;
+
+	ret = sunxi_pcie_plat_hw_init(pci);
+	if (ret)
+		return ret;
+
+	sunxi_pcie_plat_set_irqmask(pci);
+	platform_set_drvdata(pdev, pci);
+
+	ret = sunxi_pcie_plat_request_irq(pci, pdev);
+	if (ret)
+		goto err0;
+
+	pm_runtime_enable(&pdev->dev);
+	ret = pm_runtime_get_sync(&pdev->dev);
+	if (ret < 0) {
+		printk("sunxi-pcie: pm_runtime_get_sync failed\n");
+		goto err1;
+	}
+
+	ret = sunxi_pcie_plat_dma_init(pci);
+	if (ret)
+		goto err2;
+
+	if (pci->dma_obj) {
+		pci->dma_obj->start_dma_trx_func  = sunxi_pcie_plat_dma_start;
+		pci->dma_obj->config_dma_trx_func = sunxi_pcie_plat_dma_config;
+	}
+
+	switch (pci->drvdata->mode) {
+	case SUNXI_PCIE_RC_TYPE:
+		ret = sunxi_pcie_host_add_port(pci, pdev);
+		break;
+	case SUNXI_PCIE_EP_TYPE:
+		sunxi_pcie_plat_set_mode(pci);
+		pci->ep.ops = &sunxi_ep_ops;
+		ret = sunxi_pcie_ep_init(pci);
+		break;
+	default:
+		printk("sunxi-pcie: INVALID device type %d\n", pci->drvdata->mode);
+		ret = -EINVAL;
+		break;
+	}
+
+	if (ret)
+		goto err3;
+
+	printk("sunxi-pcie: driver version: %s\n", SUNXI_PCIE_MODULE_VERSION);
+
+	return 0;
+
+err3:
+	sunxi_pcie_plat_dma_deinit(pci);
+err2:
+	pm_runtime_put(&pdev->dev);
+err1:
+	pm_runtime_disable(&pdev->dev);
+err0:
+	sunxi_pcie_plat_hw_deinit(pci);
+
+	return ret;
+}
+
+static void sunxi_pcie_plat_remove(struct platform_device *pdev)
+{
+	struct sunxi_pcie *pci = platform_get_drvdata(pdev);
+
+	sunxi_pcie_plat_hw_deinit(pci);
+
+	pm_runtime_disable(&pdev->dev);
+
+	pm_runtime_put(&pdev->dev);
+
+	sunxi_pcie_plat_dma_deinit(pci);
+
+	switch (pci->drvdata->mode) {
+	case SUNXI_PCIE_RC_TYPE:
+		sunxi_pcie_host_remove_port(pci);
+		break;
+	case SUNXI_PCIE_EP_TYPE:
+		sunxi_pcie_ep_deinit(pci);
+		break;
+	default:
+		printk("sunxi-pcie: unspport device type %d\n", pci->drvdata->mode);
+		break;
+	}
+
+	sunxi_pcie_plat_ltssm_disable(pci);
+
+	
+}
+
+#if IS_ENABLED(CONFIG_PM)
+static int sunxi_pcie_plat_suspend(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct sunxi_pcie *pci = platform_get_drvdata(pdev);
+
+	sunxi_pcie_plat_ltssm_disable(pci);
+
+	usleep_range(200, 300);
+
+	sunxi_pcie_plat_hw_deinit(pci);
+
+	return 0;
+}
+
+static int sunxi_pcie_plat_resume(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct sunxi_pcie *pci = platform_get_drvdata(pdev);
+	struct sunxi_pcie_port *pp = &pci->pp;
+	int ret;
+
+	ret = sunxi_pcie_plat_hw_init(pci);
+	if (ret)
+		return -EINVAL;
+
+	/* TODO */
+	usleep_range(100, 300);
+
+	switch (pci->drvdata->mode) {
+	case SUNXI_PCIE_RC_TYPE:
+		sunxi_pcie_plat_ltssm_disable(pci);
+		sunxi_pcie_host_setup_rc(pp);
+
+		if (IS_ENABLED(CONFIG_PCI_MSI) && !pp->has_its) {
+			phys_addr_t pa = ALIGN_DOWN(virt_to_phys(pp), SZ_4K);
+			sunxi_pcie_host_wr_own_conf(pp, PCIE_MSI_ADDR_LO, 4, lower_32_bits(pa));
+			sunxi_pcie_host_wr_own_conf(pp, PCIE_MSI_ADDR_HI, 4, upper_32_bits(pa));
+		}
+
+		sunxi_pcie_host_establish_link(pci);
+		sunxi_pcie_host_speed_change(pci, pci->link_gen);
+		break;
+	case SUNXI_PCIE_EP_TYPE:
+		/* TODO */
+		break;
+	default:
+		printk("sunxi-pcie: unsupport device type %d\n", pci->drvdata->mode);
+		break;
+	}
+
+	return 0;
+}
+
+static struct dev_pm_ops sunxi_pcie_plat_pm_ops = {
+	.suspend = sunxi_pcie_plat_suspend,
+	.resume = sunxi_pcie_plat_resume,
+};
+#else
+static struct dev_pm_ops sunxi_pcie_plat_pm_ops;
+#endif /* CONFIG_PM */
+
+static struct platform_driver sunxi_pcie_plat_driver = {
+	.driver = {
+		.name	= "sunxi-pcie",
+		.owner	= THIS_MODULE,
+		.of_match_table = sunxi_pcie_plat_of_match,
+		.pm = &sunxi_pcie_plat_pm_ops,
+	},
+	.probe  = sunxi_pcie_plat_probe,
+	.remove = sunxi_pcie_plat_remove,
+};
+
+module_platform_driver(sunxi_pcie_plat_driver);
+
+MODULE_AUTHOR("songjundong <songjundong@allwinnertech.com>");
+MODULE_DESCRIPTION("Allwinner PCIe controller platform driver");
+MODULE_VERSION(SUNXI_PCIE_MODULE_VERSION);
+MODULE_LICENSE("GPL v2");
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-rc.c linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-rc.c
--- linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-rc.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.16/drivers/pci/pcie-sunxi/pcie-sunxi-rc.c	2025-07-30 09:48:22.723342277 +0200
@@ -0,0 +1,702 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/* Copyright(c) 2020 - 2023 Allwinner Technology Co.,Ltd. All rights reserved. */
+// SPDX_License-Identifier: GPL-2.0
+/*
+ * allwinner PCIe host controller driver
+ *
+ * Copyright (c) 2007-2022 Allwinnertech Co., Ltd.
+ *
+ * Author: songjundong <songjundong@allwinnertech.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#define SUNXI_MODNAME "pcie-rc"
+#include <linux/irq.h>
+#include <linux/irqdomain.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/msi.h>
+#include <linux/of_address.h>
+#include <linux/of_pci.h>
+#include <linux/pci.h>
+#include <linux/pci_regs.h>
+#include <linux/types.h>
+#include <linux/spinlock.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+
+#include "pci.h"
+#include "pcie-sunxi.h"
+#include "pcie-sunxi-dma.h"
+#include "sunxi_nsi.h"
+
+void sunxi_pcie_host_change_nsi_port_bwl(struct sunxi_pcie *pci, int gen)
+{
+#if IS_ENABLED(CONFIG_AW_NSI)
+	int i, bwl;
+	for (i = 0; i < MBUS_PMU_MAX; i++) {
+		if (strstr(get_name(i), "pcie")) {
+			switch (gen) {
+			case 1:
+				bwl = 200;
+				break;
+			case 2:
+				bwl = 400;
+				break;
+			case 3:
+				bwl = 700;
+				break;
+			}
+			nsi_port_set_abs_bwlen(i, false);
+			nsi_port_set_abs_bwl(i, bwl);
+			nsi_port_set_abs_bwlen(i, true);
+			printk("sunxi-pcie: change nsi abs bwl %d\n", bwl);
+			break;
+		}
+	}
+#endif
+}
+
+static int sunxi_pcie_host_link_up(struct sunxi_pcie_port *pp)
+{
+	if (pp->ops->link_up)
+		return pp->ops->link_up(pp);
+	else
+		return 0;
+}
+
+static int sunxi_pcie_host_rd_own_conf(struct sunxi_pcie_port *pp, int where, int size, u32 *val)
+{
+	int ret;
+
+	if (pp->ops->rd_own_conf)
+		ret = pp->ops->rd_own_conf(pp, where, size, val);
+	else
+		ret = sunxi_pcie_cfg_read(pp->dbi_base + where, size, val);
+
+	return ret;
+}
+
+int sunxi_pcie_host_wr_own_conf(struct sunxi_pcie_port *pp, int where, int size, u32 val)
+{
+	int ret;
+
+	if (pp->ops->wr_own_conf)
+		ret = pp->ops->wr_own_conf(pp, where, size, val);
+	else
+		ret = sunxi_pcie_cfg_write(pp->dbi_base + where, size, val);
+
+	return ret;
+}
+
+static void sunxi_msi_top_irq_ack(struct irq_data *d)
+{
+	/* NULL */
+}
+
+static struct irq_chip sunxi_msi_top_chip = {
+	.name	     = "SUNXI-PCIe-MSI",
+	.irq_ack     = sunxi_msi_top_irq_ack,
+	.irq_mask    = pci_msi_mask_irq,
+	.irq_unmask  = pci_msi_unmask_irq,
+};
+
+static int sunxi_msi_set_affinity(struct irq_data *d, const struct cpumask *mask, bool force)
+{
+	return -EINVAL;
+}
+
+static void sunxi_compose_msi_msg(struct irq_data *data, struct msi_msg *msg)
+{
+	struct sunxi_pcie_port *pcie = irq_data_get_irq_chip_data(data);
+	phys_addr_t pa = ALIGN_DOWN(virt_to_phys(pcie), SZ_4K);
+
+	msg->address_lo = lower_32_bits(pa);
+	msg->address_hi = upper_32_bits(pa);
+	msg->data = data->hwirq;
+}
+
+/*
+ * whether the following interface needs to be added on the driver:
+ * .irq_ack, .irq_mask, .irq_unmask and the xxx_bottom_irq_chip.
+ */
+static struct irq_chip sunxi_msi_bottom_chip = {
+	.name			= "SUNXI MSI",
+	.irq_set_affinity 	= sunxi_msi_set_affinity,
+	.irq_compose_msi_msg	= sunxi_compose_msi_msg,
+};
+
+static int sunxi_msi_domain_alloc(struct irq_domain *domain, unsigned int virq,
+				  unsigned int nr_irqs, void *args)
+{
+	struct sunxi_pcie_port *pp = domain->host_data;
+	int hwirq, i;
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&pp->lock, flags);
+
+	hwirq = bitmap_find_free_region(pp->msi_map, INT_PCI_MSI_NR, order_base_2(nr_irqs));
+
+	raw_spin_unlock_irqrestore(&pp->lock, flags);
+
+	if (unlikely(hwirq < 0)) {
+		printk("sunxi-pcie: failed to alloc hwirq\n");
+		return -ENOSPC;
+	}
+
+	for (i = 0; i < nr_irqs; i++)
+		irq_domain_set_info(domain, virq + i, hwirq + i,
+				    &sunxi_msi_bottom_chip, pp,
+				    handle_edge_irq, NULL, NULL);
+
+	return 0;
+}
+
+static void sunxi_msi_domain_free(struct irq_domain *domain, unsigned int virq,
+				  unsigned int nr_irqs)
+{
+	struct irq_data *d = irq_domain_get_irq_data(domain, virq);
+	struct sunxi_pcie_port *pp = domain->host_data;
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&pp->lock, flags);
+
+	bitmap_release_region(pp->msi_map, d->hwirq, order_base_2(nr_irqs));
+
+	raw_spin_unlock_irqrestore(&pp->lock, flags);
+}
+
+static const struct irq_domain_ops sunxi_msi_domain_ops = {
+	.alloc	= sunxi_msi_domain_alloc,
+	.free	= sunxi_msi_domain_free,
+};
+
+static struct msi_domain_info sunxi_msi_info = {
+	.flags	= (MSI_FLAG_USE_DEF_DOM_OPS | MSI_FLAG_USE_DEF_CHIP_OPS | MSI_FLAG_MULTI_PCI_MSI),
+	.chip	= &sunxi_msi_top_chip,
+};
+
+static int sunxi_allocate_msi_domains(struct sunxi_pcie_port *pp)
+{
+	struct fwnode_handle *fwnode = dev_fwnode(pp->dev);
+
+	pp->irq_domain = irq_domain_create_linear(fwnode, INT_PCI_MSI_NR,
+							  &sunxi_msi_domain_ops, pp);
+	if (!pp->irq_domain) {
+		printk("sunxi-pcie: failed to create IRQ domain\n");
+		return -ENOMEM;
+	}
+	irq_domain_update_bus_token(pp->irq_domain, DOMAIN_BUS_NEXUS);
+
+	pp->msi_domain = pci_msi_create_irq_domain(fwnode, &sunxi_msi_info, pp->irq_domain);
+	if (!pp->msi_domain) {
+		printk("sunxi-pcie: failed to create MSI domain\n");
+		irq_domain_remove(pp->irq_domain);
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
+static void sunxi_free_msi_domains(struct sunxi_pcie_port *pp)
+{
+	irq_domain_remove(pp->msi_domain);
+	irq_domain_remove(pp->irq_domain);
+}
+
+static void sunxi_pcie_prog_outbound_atu(struct sunxi_pcie_port *pp, int index, int type,
+					u64 cpu_addr, u64 pci_addr, u32 size)
+{
+	struct sunxi_pcie *pci = to_sunxi_pcie_from_pp(pp);
+
+	sunxi_pcie_writel_dbi(pci, PCIE_ATU_LOWER_BASE_OUTBOUND(index), lower_32_bits(cpu_addr));
+	sunxi_pcie_writel_dbi(pci, PCIE_ATU_UPPER_BASE_OUTBOUND(index), upper_32_bits(cpu_addr));
+	sunxi_pcie_writel_dbi(pci, PCIE_ATU_LIMIT_OUTBOUND(index), lower_32_bits(cpu_addr + size - 1));
+	sunxi_pcie_writel_dbi(pci, PCIE_ATU_LOWER_TARGET_OUTBOUND(index), lower_32_bits(pci_addr));
+	sunxi_pcie_writel_dbi(pci, PCIE_ATU_UPPER_TARGET_OUTBOUND(index), upper_32_bits(pci_addr));
+	sunxi_pcie_writel_dbi(pci, PCIE_ATU_CR1_OUTBOUND(index), type);
+	sunxi_pcie_writel_dbi(pci, PCIE_ATU_CR2_OUTBOUND(index), PCIE_ATU_ENABLE);
+}
+
+static int sunxi_pcie_rd_other_conf(struct sunxi_pcie_port *pp, struct pci_bus *bus,
+		u32 devfn, int where, int size, u32 *val)
+{
+	int ret = PCIBIOS_SUCCESSFUL, type;
+	u64 busdev;
+
+	busdev = PCIE_ATU_BUS(bus->number) | PCIE_ATU_DEV(PCI_SLOT(devfn)) |
+		 PCIE_ATU_FUNC(PCI_FUNC(devfn));
+
+	if (pci_is_root_bus(bus->parent))
+		type = PCIE_ATU_TYPE_CFG0;
+	else
+		type = PCIE_ATU_TYPE_CFG1;
+
+	sunxi_pcie_prog_outbound_atu(pp, PCIE_ATU_INDEX0, type, pp->cfg0_base, busdev, pp->cfg0_size);
+
+	ret = sunxi_pcie_cfg_read(pp->va_cfg0_base + where, size, val);
+
+	return ret;
+}
+
+static int sunxi_pcie_wr_other_conf(struct sunxi_pcie_port *pp, struct pci_bus *bus,
+		u32 devfn, int where, int size, u32 val)
+{
+	int ret = PCIBIOS_SUCCESSFUL, type;
+	u64 busdev;
+
+	busdev = PCIE_ATU_BUS(bus->number) | PCIE_ATU_DEV(PCI_SLOT(devfn)) |
+		 PCIE_ATU_FUNC(PCI_FUNC(devfn));
+
+	if (pci_is_root_bus(bus->parent))
+		type = PCIE_ATU_TYPE_CFG0;
+	else
+		type = PCIE_ATU_TYPE_CFG1;
+
+	sunxi_pcie_prog_outbound_atu(pp, PCIE_ATU_INDEX0, type, pp->cfg0_base, busdev, pp->cfg0_size);
+
+	ret = sunxi_pcie_cfg_write(pp->va_cfg0_base + where, size, val);
+
+	return ret;
+}
+
+static int sunxi_pcie_valid_config(struct sunxi_pcie_port *pp,
+				struct pci_bus *bus, int dev)
+{
+	/* If there is no link, then there is no device */
+	if (!pci_is_root_bus(bus)) {
+		if (!sunxi_pcie_host_link_up(pp))
+			return 0;
+	} else if (dev > 0)
+		/* Access only one slot on each root port */
+		return 0;
+
+	return 1;
+}
+
+static int sunxi_pcie_rd_conf(struct pci_bus *bus, u32 devfn, int where,
+			int size, u32 *val)
+{
+	struct sunxi_pcie_port *pp = (bus->sysdata);
+	int ret;
+
+	if (!pp)
+		BUG();
+
+	if (!sunxi_pcie_valid_config(pp, bus, PCI_SLOT(devfn))) {
+		*val = 0xffffffff;
+		return PCIBIOS_DEVICE_NOT_FOUND;
+	}
+
+	if (!pci_is_root_bus(bus))
+		ret = sunxi_pcie_rd_other_conf(pp, bus, devfn,
+						where, size, val);
+	else
+		ret = sunxi_pcie_host_rd_own_conf(pp, where, size, val);
+
+	return ret;
+}
+
+static int sunxi_pcie_wr_conf(struct pci_bus *bus, u32 devfn,
+			int where, int size, u32 val)
+{
+	struct sunxi_pcie_port *pp = (bus->sysdata);
+	int ret;
+
+	if (!pp)
+		BUG();
+
+	if (sunxi_pcie_valid_config(pp, bus, PCI_SLOT(devfn)) == 0)
+		return PCIBIOS_DEVICE_NOT_FOUND;
+
+	if (!pci_is_root_bus(bus))
+		ret = sunxi_pcie_wr_other_conf(pp, bus, devfn,
+						where, size, val);
+	else
+		ret = sunxi_pcie_host_wr_own_conf(pp, where, size, val);
+
+	return ret;
+}
+
+static struct pci_ops sunxi_pcie_ops = {
+	.read = sunxi_pcie_rd_conf,
+	.write = sunxi_pcie_wr_conf,
+};
+
+int sunxi_pcie_host_init(struct sunxi_pcie_port *pp)
+{
+	struct device *dev = pp->dev;
+	struct resource_entry *win;
+	struct pci_host_bridge *bridge;
+	int ret;
+
+	bridge = devm_pci_alloc_host_bridge(dev, 0);
+	if (!bridge)
+		return -ENOMEM;
+
+	pp->bridge = bridge;
+
+	/* Get the I/O and memory ranges from DT */
+	resource_list_for_each_entry(win, &bridge->windows) {
+		switch (resource_type(win->res)) {
+		case IORESOURCE_IO:
+			pp->io_size = resource_size(win->res);
+			pp->io_bus_addr = win->res->start - win->offset;
+			pp->io_base = pci_pio_to_address(win->res->start);
+			break;
+		case 0:
+			pp->cfg0_size = resource_size(win->res);
+			pp->cfg0_base = win->res->start;
+			break;
+		}
+	}
+
+	if (!pp->va_cfg0_base) {
+		pp->va_cfg0_base = devm_pci_remap_cfgspace(dev,
+					pp->cfg0_base, pp->cfg0_size);
+		if (!pp->va_cfg0_base) {
+			printk("sunxi-pcie: Error with ioremap in function\n");
+			return -ENOMEM;
+		}
+	}
+
+	if (pp->cpu_pcie_addr_quirk) {
+		pp->cfg0_base -= PCIE_CPU_BASE;
+		pp->io_base   -= PCIE_CPU_BASE;
+	}
+
+	if (IS_ENABLED(CONFIG_PCI_MSI) && !pp->has_its) {
+
+		phys_addr_t pa = ALIGN_DOWN(virt_to_phys(pp), SZ_4K);
+
+		ret = sunxi_allocate_msi_domains(pp);
+		if (ret)
+			return ret;
+
+		sunxi_pcie_host_wr_own_conf(pp, PCIE_MSI_ADDR_LO, 4, lower_32_bits(pa));
+		sunxi_pcie_host_wr_own_conf(pp, PCIE_MSI_ADDR_HI, 4, upper_32_bits(pa));
+	}
+
+	if (pp->ops->host_init)
+		pp->ops->host_init(pp);
+
+	bridge->sysdata = pp;
+	bridge->ops = &sunxi_pcie_ops;
+
+	ret = pci_host_probe(bridge);
+
+	if (ret) {
+		if (IS_ENABLED(CONFIG_PCI_MSI) && !pp->has_its)
+			sunxi_free_msi_domains(pp);
+
+		printk("sunxi-pcie: Failed to probe host bridge\n");
+
+		return ret;
+	}
+
+	return 0;
+}
+
+void sunxi_pcie_host_setup_rc(struct sunxi_pcie_port *pp)
+{
+	u32 val, i;
+	int atu_idx = 0;
+	struct resource_entry *entry;
+	phys_addr_t mem_base;
+	struct sunxi_pcie *pci = to_sunxi_pcie_from_pp(pp);
+
+	sunxi_pcie_plat_set_rate(pci);
+
+	/* setup RC BARs */
+	sunxi_pcie_writel_dbi(pci, PCI_BASE_ADDRESS_0, 0x4);
+	sunxi_pcie_writel_dbi(pci, PCI_BASE_ADDRESS_1, 0x0);
+
+	/* setup interrupt pins */
+	val = sunxi_pcie_readl_dbi(pci, PCI_INTERRUPT_LINE);
+	val &= PCIE_INTERRUPT_LINE_MASK;
+	val |= PCIE_INTERRUPT_LINE_ENABLE;
+	sunxi_pcie_writel_dbi(pci, PCI_INTERRUPT_LINE, val);
+
+	/* setup bus numbers */
+	val = sunxi_pcie_readl_dbi(pci, PCI_PRIMARY_BUS);
+	val &= 0xff000000;
+	val |= 0x00ff0100;
+	sunxi_pcie_writel_dbi(pci, PCI_PRIMARY_BUS, val);
+
+	/* setup command register */
+	val = sunxi_pcie_readl_dbi(pci, PCI_COMMAND);
+
+	val &= PCIE_HIGH16_MASK;
+	val |= PCI_COMMAND_IO | PCI_COMMAND_MEMORY |
+		PCI_COMMAND_MASTER | PCI_COMMAND_SERR;
+
+	sunxi_pcie_writel_dbi(pci, PCI_COMMAND, val);
+
+	if (IS_ENABLED(CONFIG_PCI_MSI) && !pp->has_its) {
+		for (i = 0; i < 8; i++) {
+			sunxi_pcie_host_wr_own_conf(pp, PCIE_MSI_INTR_ENABLE(i), 4, ~0);
+		}
+	}
+
+	resource_list_for_each_entry(entry, &pp->bridge->windows) {
+		if (resource_type(entry->res) != IORESOURCE_MEM)
+			continue;
+
+		if (pp->num_ob_windows <= ++atu_idx)
+			break;
+
+		if (pp->cpu_pcie_addr_quirk)
+			mem_base = entry->res->start - PCIE_CPU_BASE;
+		else
+			mem_base = entry->res->start;
+
+		sunxi_pcie_prog_outbound_atu(pp, atu_idx, PCIE_ATU_TYPE_MEM, mem_base,
+						  entry->res->start - entry->offset,
+						  resource_size(entry->res));
+	}
+
+	if (pp->io_size) {
+		if (pp->num_ob_windows > ++atu_idx)
+			sunxi_pcie_prog_outbound_atu(pp, atu_idx, PCIE_ATU_TYPE_IO, pp->io_base,
+							pp->io_bus_addr, pp->io_size);
+		else
+			printk("sunxi-pcie: Resources exceed number of ATU entries (%d)",
+							pp->num_ob_windows);
+	}
+
+	sunxi_pcie_host_wr_own_conf(pp, PCI_BASE_ADDRESS_0, 4, 0);
+
+	sunxi_pcie_dbi_ro_wr_en(pci);
+
+	sunxi_pcie_host_wr_own_conf(pp, PCI_CLASS_DEVICE, 2, PCI_CLASS_BRIDGE_PCI);
+
+	sunxi_pcie_dbi_ro_wr_dis(pci);
+
+	sunxi_pcie_host_rd_own_conf(pp, PCIE_LINK_WIDTH_SPEED_CONTROL, 4, &val);
+	val |= PORT_LOGIC_SPEED_CHANGE;
+	sunxi_pcie_host_wr_own_conf(pp, PCIE_LINK_WIDTH_SPEED_CONTROL, 4, val);
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_host_setup_rc);
+
+static int sunxi_pcie_host_wait_for_speed_change(struct sunxi_pcie *pci)
+{
+	u32 tmp;
+	unsigned int retries;
+
+	for (retries = 0; retries < LINK_WAIT_MAX_RETRIE; retries++) {
+		tmp = sunxi_pcie_readl_dbi(pci, PCIE_LINK_WIDTH_SPEED_CONTROL);
+		if (!(tmp & PORT_LOGIC_SPEED_CHANGE))
+			return 0;
+		usleep_range(SPEED_CHANGE_USLEEP_MIN, SPEED_CHANGE_USLEEP_MAX);
+	}
+
+	printk("sunxi-pcie: Speed change timeout\n");
+	return -ETIMEDOUT;
+}
+
+int sunxi_pcie_host_speed_change(struct sunxi_pcie *pci, int gen)
+{
+	int val;
+	int ret;
+
+	sunxi_pcie_dbi_ro_wr_en(pci);
+	val = sunxi_pcie_readl_dbi(pci, LINK_CONTROL2_LINK_STATUS2);
+	val &= ~0xf;
+	val |= gen;
+	sunxi_pcie_writel_dbi(pci, LINK_CONTROL2_LINK_STATUS2, val);
+
+	val = sunxi_pcie_readl_dbi(pci, PCIE_LINK_WIDTH_SPEED_CONTROL);
+	val &= ~PORT_LOGIC_SPEED_CHANGE;
+	sunxi_pcie_writel_dbi(pci, PCIE_LINK_WIDTH_SPEED_CONTROL, val);
+
+	val = sunxi_pcie_readl_dbi(pci, PCIE_LINK_WIDTH_SPEED_CONTROL);
+	val |= PORT_LOGIC_SPEED_CHANGE;
+	sunxi_pcie_writel_dbi(pci, PCIE_LINK_WIDTH_SPEED_CONTROL, val);
+
+	ret = sunxi_pcie_host_wait_for_speed_change(pci);
+	if (!ret) {
+		printk("sunxi-pcie: PCIe speed of Gen%d\n", gen);
+		sunxi_pcie_host_change_nsi_port_bwl(pci, gen);
+	}
+	else
+		printk("sunxi-pcie: PCIe speed of Gen1\n");
+
+	sunxi_pcie_dbi_ro_wr_dis(pci);
+	return 0;
+}
+
+static void __sunxi_pcie_host_init(struct sunxi_pcie_port *pp)
+{
+	struct sunxi_pcie *pci = to_sunxi_pcie_from_pp(pp);
+
+	sunxi_pcie_plat_ltssm_disable(pci);
+
+	if (!IS_ERR(pci->rst_gpio))
+		gpiod_set_value(pci->rst_gpio, 0);
+	msleep(100);
+	if (!IS_ERR(pci->rst_gpio))
+		gpiod_set_value(pci->rst_gpio, 1);
+
+	sunxi_pcie_host_setup_rc(pp);
+
+	sunxi_pcie_host_establish_link(pci);
+
+	sunxi_pcie_host_speed_change(pci, pci->link_gen);
+}
+
+static int sunxi_pcie_host_link_up_status(struct sunxi_pcie_port *pp)
+{
+	u32 val;
+	int ret;
+	struct sunxi_pcie *pcie = to_sunxi_pcie_from_pp(pp);
+
+	val = sunxi_pcie_readl(pcie, PCIE_LINK_STAT);
+
+	if ((val & RDLH_LINK_UP) && (val & SMLH_LINK_UP))
+		ret = 1;
+	else
+		ret = 0;
+
+	return ret;
+}
+
+static struct sunxi_pcie_host_ops sunxi_pcie_host_ops = {
+	.link_up = sunxi_pcie_host_link_up_status,
+	.host_init = __sunxi_pcie_host_init,
+};
+
+static int sunxi_pcie_host_wait_for_link(struct sunxi_pcie_port *pp)
+{
+	int retries;
+
+	for (retries = 0; retries < LINK_WAIT_MAX_RETRIE; retries++) {
+		if (sunxi_pcie_host_link_up(pp)) {
+			printk("sunxi-pcie: pcie link up success\n");
+			return 0;
+		}
+		usleep_range(LINK_WAIT_USLEEP_MIN, LINK_WAIT_USLEEP_MAX);
+	}
+
+	return -ETIMEDOUT;
+}
+
+int sunxi_pcie_host_establish_link(struct sunxi_pcie *pci)
+{
+	struct sunxi_pcie_port *pp = &pci->pp;
+
+	if (sunxi_pcie_host_link_up(pp)) {
+		printk("sunxi-pcie: pcie is already link up\n");
+		return 0;
+	}
+
+	sunxi_pcie_plat_ltssm_enable(pci);
+
+	return sunxi_pcie_host_wait_for_link(pp);
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_host_establish_link);
+
+static irqreturn_t sunxi_pcie_host_msi_irq_handler(int irq, void *arg)
+{
+	struct sunxi_pcie_port *pp = (struct sunxi_pcie_port *)arg;
+	struct sunxi_pcie *pci = to_sunxi_pcie_from_pp(pp);
+	unsigned long val;
+	int i, pos;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0)
+	u32 hwirq;
+	u32 virq;
+#endif
+	u32 status;
+	irqreturn_t ret = IRQ_NONE;
+
+	for (i = 0; i < MAX_MSI_CTRLS; i++) {
+		status = sunxi_pcie_readl_dbi(pci, PCIE_MSI_INTR_STATUS + (i * MSI_REG_CTRL_BLOCK_SIZE));
+
+		if (!status)
+			continue;
+
+		ret = IRQ_HANDLED;
+		pos = 0;
+		val = status;
+		while ((pos = find_next_bit(&val, MAX_MSI_IRQS_PER_CTRL, pos)) != MAX_MSI_IRQS_PER_CTRL) {
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0)
+			hwirq = i * MAX_MSI_IRQS_PER_CTRL + pos;
+			virq = irq_find_mapping(pp->irq_domain, hwirq);
+			generic_handle_irq(virq);
+#else
+
+			generic_handle_domain_irq(pp->irq_domain, (i * MAX_MSI_IRQS_PER_CTRL) + pos);
+#endif
+
+			sunxi_pcie_writel_dbi(pci,
+					PCIE_MSI_INTR_STATUS + (i * MSI_REG_CTRL_BLOCK_SIZE), 1 << pos);
+			pos++;
+		}
+	}
+
+	return ret;
+}
+
+int sunxi_pcie_host_add_port(struct sunxi_pcie *pci, struct platform_device *pdev)
+{
+	struct sunxi_pcie_port *pp = &pci->pp;
+	int ret;
+
+	ret = of_property_read_u32(pp->dev->of_node, "num-ob-windows", &pp->num_ob_windows);
+	if (ret) {
+		printk("sunxi-pcie: failed to parse num-ob-windows\n");
+		return -EINVAL;
+	}
+
+	pp->has_its = device_property_read_bool(&pdev->dev, "msi-map");
+
+	if (IS_ENABLED(CONFIG_PCI_MSI) && !pp->has_its) {
+		pp->msi_irq = platform_get_irq_byname(pdev, "msi");
+		if (pp->msi_irq < 0)
+			return pp->msi_irq;
+
+		ret = devm_request_irq(&pdev->dev, pp->msi_irq, sunxi_pcie_host_msi_irq_handler,
+					IRQF_SHARED, "pcie-msi", pp);
+		if (ret) {
+			printk("sunxi-pcie: failed to request MSI IRQ\n");
+			return ret;
+		}
+	}
+
+	pp->ops = &sunxi_pcie_host_ops;
+	raw_spin_lock_init(&pp->lock);
+
+	ret = sunxi_pcie_host_init(pp);
+	if (ret) {
+		printk("sunxi-pcie: failed to initialize host\n");
+		return ret;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_host_add_port);
+
+void sunxi_pcie_host_remove_port(struct sunxi_pcie *pci)
+{
+	struct sunxi_pcie_port *pp = &pci->pp;
+
+	if (pp->bridge->bus) {
+		pci_stop_root_bus(pp->bridge->bus);
+		pci_remove_root_bus(pp->bridge->bus);
+	}
+
+	if (IS_ENABLED(CONFIG_PCI_MSI) && !pp->has_its) {
+		irq_domain_remove(pp->msi_domain);
+		irq_domain_remove(pp->irq_domain);
+	}
+}
+EXPORT_SYMBOL_GPL(sunxi_pcie_host_remove_port);
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/include/sunxi-dma.h linux-6.16/include/sunxi-dma.h
--- linux-6.16/include/sunxi-dma.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.16/include/sunxi-dma.h	2025-07-30 16:41:58.920001122 +0200
@@ -0,0 +1,33 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/* Copyright(c) 2020 - 2023 Allwinner Technology Co.,Ltd. All rights reserved. */
+/*
+ * SUNXI DMA support
+ *
+ * Copyright (C) 2015 AllWinnertech Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __SUNXI_DMA_H
+#define __SUNXI_DMA_H
+
+typedef void (*sunxi_dma_timeout_callback)(void *param);
+
+struct sunxi_dma_desc {
+	bool is_bmode;
+	bool is_timeout;
+	unsigned timeout_steps; /* the steps is the time for channel timer,the max is 511,1 step = 20.48us */
+	unsigned timeout_fun; /* the fun is used to set the timout interrupt peding fun,0x01 is pause,0x10 is end,0x11 is next descrp */
+	sunxi_dma_timeout_callback callback;
+	void *callback_param;
+};
+
+#endif
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/include/sunxi-gpio.h linux-6.16/include/sunxi-gpio.h
--- linux-6.16/include/sunxi-gpio.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.16/include/sunxi-gpio.h	2025-07-30 16:41:58.920001122 +0200
@@ -0,0 +1,188 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/* Copyright(c) 2020 - 2023 Allwinner Technology Co.,Ltd. All rights reserved. */
+/*
+ * (C) Copyright 2015-2020
+ * Allwinner Technology Co., Ltd. <www.allwinnertech.com>
+ * Wim Hwang <huangwei@allwinnertech.com>
+ *
+ * sunxi gpio utils
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ */
+
+#ifndef __SW_GPIO_H
+#define __SW_GPIO_H
+
+#define SUNXI_PINCTRL	"pio"
+#define SUNXI_R_PINCTRL	"r_pio"
+#include <linux/pinctrl/pinconf-generic.h>
+
+/* pin group base number name space,
+ * the max pin number : 26*32=832.
+ */
+#define SUNXI_BANK_SIZE 32
+#define SUNXI_PA_BASE	0
+#define SUNXI_PB_BASE	32
+#define SUNXI_PC_BASE	64
+#define SUNXI_PD_BASE	96
+#define SUNXI_PE_BASE	128
+#define SUNXI_PF_BASE	160
+#define SUNXI_PG_BASE	192
+#define SUNXI_PH_BASE	224
+#define SUNXI_PI_BASE	256
+#define SUNXI_PJ_BASE	288
+#define SUNXI_PK_BASE	320
+#define SUNXI_PL_BASE	352
+#define SUNXI_PM_BASE	384
+#define SUNXI_PN_BASE	416
+#define SUNXI_PO_BASE	448
+#define AXP_PIN_BASE	1024
+
+#define SUNXI_PIN_NAME_MAX_LEN	8
+
+/* sunxi gpio name space */
+#define GPIOA(n)	(SUNXI_PA_BASE + (n))
+#define GPIOB(n)	(SUNXI_PB_BASE + (n))
+#define GPIOC(n)	(SUNXI_PC_BASE + (n))
+#define GPIOD(n)	(SUNXI_PD_BASE + (n))
+#define GPIOE(n)	(SUNXI_PE_BASE + (n))
+#define GPIOF(n)	(SUNXI_PF_BASE + (n))
+#define GPIOG(n)	(SUNXI_PG_BASE + (n))
+#define GPIOH(n)	(SUNXI_PH_BASE + (n))
+#define GPIOI(n)	(SUNXI_PI_BASE + (n))
+#define GPIOJ(n)	(SUNXI_PJ_BASE + (n))
+#define GPIOK(n)	(SUNXI_PK_BASE + (n))
+#define GPIOL(n)	(SUNXI_PL_BASE + (n))
+#define GPIOM(n)	(SUNXI_PM_BASE + (n))
+#define GPION(n)	(SUNXI_PN_BASE + (n))
+#define GPIOO(n)	(SUNXI_PO_BASE + (n))
+#define GPIO_AXP(n)	(AXP_PIN_BASE  + (n))
+
+/* sunxi specific input/output/eint functions */
+#define SUNXI_PIN_INPUT_FUNC	(0)
+#define SUNXI_PIN_OUTPUT_FUNC	(1)
+#define SUNXI_PIN_EINT_FUNC	(6)
+#define SUNXI_PIN_IO_DISABLE	(7)
+
+/* axp group base number name space,
+ * axp pinctrl number space coherent to sunxi-pinctrl.
+ */
+#define AXP_PINCTRL	        "axp-pinctrl"
+#define AXP_CFG_GRP		(0xFFFF)
+#define AXP_PIN_INPUT_FUNC	(0)
+#define AXP_PIN_OUTPUT_FUNC	(1)
+#define IS_AXP_PIN(pin)		(pin >= AXP_PIN_BASE)
+
+/* sunxi specific pull up/down */
+enum sunxi_pull_up_down {
+	SUNXI_PULL_DISABLE = 0,
+	SUNXI_PULL_UP,
+	SUNXI_PULL_DOWN,
+};
+
+/* sunxi specific data types */
+enum sunxi_data_type {
+	SUNXI_DATA_LOW = 0,
+	SUNXI_DATA_HIGH = 0,
+};
+
+/* sunxi specific pull status */
+enum sunxi_pin_pull {
+	SUNXI_PIN_PULL_DISABLE	= 0x00,
+	SUNXI_PIN_PULL_UP	= 0x01,
+	SUNXI_PIN_PULL_DOWN	= 0x02,
+	SUNXI_PIN_PULL_RESERVED	= 0x03,
+};
+
+/* sunxi specific driver levels */
+enum sunxi_pin_drv_level {
+	SUNXI_DRV_LEVEL0 = 10,
+	SUNXI_DRV_LEVEL1 = 20,
+	SUNXI_DRV_LEVEL2 = 30,
+	SUNXI_DRV_LEVEL3 = 40,
+};
+
+/* sunxi specific data bit status */
+enum sunxi_pin_data_status {
+	SUNXI_PIN_DATA_LOW  = 0x00,
+	SUNXI_PIN_DATA_HIGH = 0x01,
+};
+
+/* sunxi pin interrupt trigger mode */
+enum sunxi_pin_int_trigger_mode {
+	SUNXI_PIN_EINT_POSITIVE_EDGE   =   0x0,
+	SUNXI_PIN_EINT_NEGATIVE_EDGE   =   0x1,
+	SUNXI_PIN_EINT_HIGN_LEVEL      =   0x2,
+	SUNXI_PIN_EINT_LOW_LEVEL       =   0x3,
+	SUNXI_PIN_EINT_DOUBLE_EDGE     =   0x4
+};
+
+/* the source clock of pin int */
+enum sunxi_pin_int_source_clk {
+	SUNXI_PIN_INT_SRC_CLK_32K = 0x0,
+	SUNXI_PIN_INT_SRC_CLK_24M = 0x1
+};
+
+/*
+ * pin configuration (pull up/down and drive strength) type and its value are
+ * packed together into a 32-bits. The lower 8-bits represent the configuration
+ * type and the upper 24-bits hold the value of the configuration type.
+ */
+#define SUNXI_PINCFG_PACK(type, value)	(((value) << 8) | (type & 0xFF))
+#define SUNXI_PINCFG_UNPACK_TYPE(cfg)	((cfg) & 0xFF)
+#define SUNXI_PINCFG_UNPACK_VALUE(cfg)	(((cfg) & 0xFFFFFF00) >> 8)
+
+static inline int sunxi_gpio_to_name(int gpio, char *name)
+{
+	int bank, index;
+
+	if (!name)
+		return -EINVAL;
+
+	if (IS_AXP_PIN(gpio)) {
+		/* axp gpio name like this : GPIO0/GPIO1/.. */
+		index = gpio - AXP_PIN_BASE;
+		sprintf(name, "GPIO%d", index);
+	} else {
+		/* sunxi gpio name like this : PA0/PA1/PB0 */
+		bank = gpio / SUNXI_BANK_SIZE;
+		index = gpio % SUNXI_BANK_SIZE;
+		sprintf(name, "P%c%d", ('A' + bank), index);
+	}
+
+	return 0;
+}
+
+/* pio end, invalid macro */
+#define GPIO_INDEX_INVALID	(0xFFFFFFF0)
+#define GPIO_CFG_INVALID	(0xEEEEEEEE)
+#define GPIO_PULL_INVALID	(0xDDDDDDDD)
+#define GPIO_DRVLVL_INVALID	(0xCCCCCCCC)
+#define IRQ_NUM_INVALID		(0xFFFFFFFF)
+#define AXP_PORT_VAL		(0x0000FFFF)
+
+/* pio default macro */
+#define GPIO_PULL_DEFAULT	((u32)-1)
+#define GPIO_DRVLVL_DEFAULT	((u32)-1)
+#define GPIO_DATA_DEFAULT	((u32)-1)
+
+/*
+ * struct gpio_config - gpio config info
+ * @gpio:      gpio global index, must be unique
+ * @mul_sel:   multi sel val: 0 - input, 1 - output.
+ * @pull:      pull val: 0 - pull up/down disable, 1 - pull up
+ * @drv_level: driver level val: 0 - level 0, 1 - level 1
+ * @data:      data val: 0 - low, 1 - high, only valid when mul_sel is input/output
+ */
+struct gpio_config {
+	u32	data;
+	u32	gpio;
+	u32	mul_sel;
+	u32	pull;
+	u32	drv_level;
+};
+
+#endif
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16/include/sunxi-iommu.h linux-6.16/include/sunxi-iommu.h
--- linux-6.16/include/sunxi-iommu.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.16/include/sunxi-iommu.h	2025-07-30 16:41:58.920001122 +0200
@@ -0,0 +1,52 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/* Copyright(c) 2020 - 2023 Allwinner Technology Co.,Ltd. All rights reserved. */
+/*
+ *
+ * Copyright (C) 2015 AllWinnertech Ltd.
+ *
+ * Author: huangshuosheng <huangshuosheng@allwinnertech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __LINUX_SUNXI_IOMMU_H
+#define __LINUX_SUNXI_IOMMU_H
+#include <linux/iommu.h>
+#include <linux/iova.h>
+
+typedef void (*sunxi_iommu_fault_cb)(void);
+extern void sunxi_iommu_register_fault_cb(sunxi_iommu_fault_cb cb, unsigned int master_id);
+extern void sunxi_enable_device_iommu(unsigned int master_id, bool flag);
+extern void sunxi_reset_device_iommu(unsigned int master_id);
+extern struct iommu_domain *global_iommu_domain;
+ssize_t sunxi_iommu_dump_pgtable(char *buf, size_t buf_len,
+					       bool for_sysfs_show);
+
+enum iommu_dma_cookie_type {
+	IOMMU_DMA_IOVA_COOKIE,
+	IOMMU_DMA_MSI_COOKIE,
+};
+
+struct iommu_dma_cookie {
+	enum iommu_dma_cookie_type	type;
+	union {
+		/* Full allocator for IOMMU_DMA_IOVA_COOKIE */
+		struct iova_domain	iovad;
+		/* Trivial linear page allocator for IOMMU_DMA_MSI_COOKIE */
+		dma_addr_t		msi_iova;
+	};
+	struct list_head		msi_page_list;
+
+	/* Domain for flush queue callback; NULL if flush queue not in use */
+	struct iommu_domain		*fq_domain;
+};
+
+#endif  /* __LINUX_SUNXI_IOMMU_H */
