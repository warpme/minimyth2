#!/bin/bash

#
# Code based on excellent work of https://github.com/endeavouros-arm/install-script
#
# Reworked by Piotr Oniszczuk <piotr.oniszczuk@gmail.com> for MiniArch purpouses
#
# History:
# v1.0: initial ver.
# v1.1: 
#   -new: added multiarch support;
#   -fix: delete old keyring when new is avaliable
#   -change: rename script to install-minieos; change working dir to .minieos-install


ver="1.3"

. /etc/minieos.conf

log_file="/var/log/install-minieos.log"

wget_cmd="wget --no-verbose "

ARCH=$(uname -m)

if [ ! -e /root/.minieos-install ] ; then
    mkdir -p /root/.minieos-install
fi

cd /root/.minieos-install

declare -a TIMEZONE_LIST

log() {
    echo >&2 "`date '+%H:%M:%S'`: $*" >> ${log_file}
    }

msg() {
    log "$*"
    echo "==> $*"
}

error() {
    log "$*"
    echo "$*"
    echo "Please provide content of ${log_file} to developer ..."
    echo "Now exiting ..."
    exit 1
}

show_pacman_run_error() {
       echo " "
       echo " "
       echo "ERROR: Pacman failed with installing requested package(s)"
       echo " "
       echo "This might be because of:"
       echo "  -Your Internet Connection has issues or"
       echo "  -Requested package(s) are unavaliable"
       echo "  -There is conflict between old and new package(s) requiring to resolve"
       echo " "
       echo "Script will now exit ..."
       echo " "
       echo "Please try to fix problem, then test fix with manual install of failing package(s)."
       echo "If all becomes ok - You may try run this script again ..."
       echo " "
       echo " "
}

disable_all_de() {
    systemctl disable lightdm.service sddm.service gdm.service eos-lxdm-gtk3.service sddm.service 2>/dev/null
}

switch_pacman_trust_all() {
    if [ ! -e /etc/pacman.conf.before-eos-install ] ; then
        msg "changing pacman.conf to TrustAll"
        cp -f /etc/pacman.conf /etc/pacman.conf.before-eos-install
        sed -e 's/^\s*SigLevel.*/SigLevel = TrustAll/g' -i /etc/pacman.conf
    fi
}

restore_pacman_trust() {
    if [ -e /etc/pacman.conf.before-eos-install ] ; then
        msg "restoring pacman.conf to original trust"
        cp -f /etc/pacman.conf.before-eos-install /etc/pacman.conf
        rm -f /etc/pacman.conf.before-eos-install
    fi
}

run_unattended_pacman() {
    echo yes | pacman --disable-download-timeout -Sy
    if [ "$?" != "0" ] ; then
        echo "------------------------------------------"
        restore_pacman_trust
        show_pacman_run_error
        exit 1
    fi
    echo "------------------------------------------"

    echo yes | pacman --noconfirm --needed --disable-download-timeout -S "$@"
    if [ "$?" != "0" ] ; then
        echo "------------------------------------------"
        restore_pacman_trust
        show_pacman_run_error
        exit 1
    fi
    echo "------------------------------------------"
}

run_unattended_pacman_on_filelist() {
    echo yes | pacman --disable-download-timeout -Sy
    if [ "$?" != "0" ] ; then
        echo "------------------------------------------"
        restore_pacman_trust
        show_pacman_run_error
        exit 1
    fi
    echo "------------------------------------------"

    echo yes | pacman -S --noconfirm --needed --disable-download-timeout --overwrite \* - < $1
    if [ "$?" != "0" ] ; then
        echo "------------------------------------------"
        restore_pacman_trust
        show_pacman_run_error
        exit 1
    fi
    echo "------------------------------------------"
}

generate_timezone_list() {
    input=$1
    msg "setting timezone to $input"
    if [[ -d $input ]]; then
        for i in "$input"/*; do
            generate_timezone_list $i
        done
    else
        TIMEZONE=${input/#"$ZONE_DIR/"}
        TIMEZONE_LIST+=($TIMEZONE)
        TIMEZONE_LIST+=("")
    fi
}

find_mirrorlist() {
    if [ ! -e ./endeavouros-mirrorlist ] ; then
        msg "downloading endeavouros-mirrorlist"
        ${wget_cmd} https://raw.githubusercontent.com/endeavouros-team/PKGBUILDS/master/endeavouros-mirrorlist/endeavouros-mirrorlist
        if [ ! -e ./endeavouros-mirrorlist ] ; then
            msg "ERROR: can't download endeavouros-mirrorlist file ... Exiting!"
            exit 1
        fi
    else
        msg "reuse already downloaded endeavouros-mirrorlist"
    fi

    msg "installing endeavouros-mirrorlist"
    cp -f endeavouros-mirrorlist /etc/pacman.d/

    if [ x$(grep -c "^\[endeavouros\]" /etc/pacman.conf) = "x0" ] ; then
        msg "dding endeavouros-mirrorlist to pacman repos"
        printf "\n[endeavouros]\nSigLevel = PackageRequired\nInclude = /etc/pacman.d/endeavouros-mirrorlist\n\n" >> /etc/pacman.conf
    else
        msg "endeavouros-mirrorlist already in pacman repos"
    fi
}

find_keyring() {
    local tmpfile
    local currentkeyring

    rm -f keys

    msg "find current endeavouros-keyring"
    curl https://github.com/endeavouros-team/repo/tree/master/endeavouros/$ARCH 2>${log_file} | grep endeavouros-keyring | sed s'/^.*endeavouros-keyring/endeavouros-keyring/'g | sed s'/pkg.tar.zst.*/pkg.tar.zst/'g | tail -1 > keys
    if [ x$(grep -c "pkg.tar" keys) = "x0" ] ; then
        msg "ERROR: can't determine current endeavouros-keyring package from https://github.com/endeavouros-team/repo/tree/master/endeavouros/$ARCH URL ... Exiting!"
        exit 1
    fi

    read -d $'\04' currentkeyring < "keys"

    if [ -e $currentkeyring ] ; then
        msg "reusing existing $currentkeyring"
        msg "installing endeavouros-keyring"
        pacman --noconfirm --needed -U $currentkeyring
    else
        msg "downloading endeavouros-keyring"
        rm -f endeavouros-keyring-*-any.pkg.*
        ${wget_cmd} https://github.com/endeavouros-team/repo/raw/master/endeavouros/$ARCH/$currentkeyring 2>&1 >${log_file}

        if [ -e endeavouros-keyring-*-any.pkg.* ] ; then
            msg "installing endeavouros-keyring"
            pacman --noconfirm --needed -U $currentkeyring
        else
            msg "ERROR: can't download $currentkeyring from https://github.com/endeavouros-team/repo/raw/master/endeavouros URL ... Exiting!"
            exit 1
        fi
    fi

}

fixup_pkg_list() {
    file=$1
    remove_list="${2}_${ARCH}"
    add_list="${3}_${ARCH}"
    log "remove list:"${!remove_list}
    log "add list:"${!add_list}
    cp -f $1 $1.upstream
    for item in ${!remove_list} ; do
        log "  _fixup of $1: removing $item ..."
        sed "/$item/d" -i $file
    done
    for item in ${!add_list} ; do
        log "  _fixup of $1: adding $item ..."
        echo "$item" >> $file
    done
}

base_addons() {
    if [ ! -e $BASE_ADDONS_DONE_FLAG ] ; then
        msg "installing EndeavourOS Base Addons"
        eos-packagelist "Desktop-Base + Common packages" "Firefox and language package" > base-addons
        fixup_pkg_list base-addons BASE_ADDONS_REMOVE_LIST BASE_ADDONS_ADD_LIST
        run_unattended_pacman_on_filelist base-addons
        systemctl disable dhcpcd.service
        systemctl enable NetworkManager.service
        systemctl start NetworkManager.service
        sleep 5
        touch $BASE_ADDONS_DONE_FLAG
    else
        echo "using previosly installed EndeavourOS Base Addons."
        echo "if you want to reinstall Base Addons, do rf -f $BASE_ADDONS_DONE_FLAG and rerun"
    fi
}

set_time_zone() {
    msg "setting Time Zone"
    ln -sf $TIMEZONEPATH /etc/localtime
}

enable_ntp() {
    msg "enabling NTP"
    timedatectl set-ntp true
    timedatectl timesync-status
    sleep 1
}

set_locale() {
    msg "etting Locale"
    sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen
    locale-gen
    printf "\nLANG=en_US.UTF-8\n\n" > /etc/locale.conf
}

set_hostname() {
    msg "setting hostname"
    printf "\n$HOSTNAME\n\n" > /etc/hostname
}

config_etc_hosts() {
    msg "configuring /etc/hosts"
    printf "\n127.0.0.1\tlocalhost\n" > /etc/hosts
    printf "::1\t\tlocalhost\n" >> /etc/hosts
    printf "127.0.1.1\t$HOSTNAME.localdomain\t$HOSTNAME\n\n" >> /etc/hosts
}

create_alias() {
    msg "creating ll alias"
    printf "\nalias ll='ls -l --color=auto'\n" >> /etc/bash.bashrc
    printf "alias la='ls -al --color=auto'\n" >> /etc/bash.bashrc
    printf "alias lb='lsblk -o NAME,FSTYPE,FSSIZE,LABEL,MOUNTPOINT'\n\n" >> /etc/bash.bashrc
}

clean_up() {
    # rebranding to EndeavourOS
    sed -i 's/Arch/EndeavourOS/' /etc/issue
    sed -i 's/Arch/EndeavourOS/' /etc/arch-release
}

completed_notification() {
    msg "Installation is complete!"
    msg " "
    msg "Enjoy EndeavourOS ARM based MiniEOS on MiniArch :-)"
    msg " "
}

precheck_setup() {
    if [ ! -e $PRECHECK_SETUP_DONE_FLAG ] ; then

        local script_directory
        local whiptail_installed

        msg "Starting precheck_setup ...."
        # check where script is installed
        script_directory="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )" #for mc syntax highligtning"
        if [[ "$script_directory" == "/home/alarm/"* ]]; then
           whiptail_installed=$(pacman -Qs libnewt)
           if [[ "$whiptail_installed" != "" ]]; then
              whiptail --title "Error - Cannot Continue" --msgbox "This script is in the alarm user's home folder which will be removed.  \
              \n\nPlease move it to the root user's home directory and rerun the script." 10 80
              exit 1
           else
              msg "ERROR: Cannot Continue. This script is in the alarm user's home folder which will be removed. Please move it to the root user's home directory and rerun the script."
              exit 1
           fi
        fi

        # check to see if script was run as root #####
        if [ $(id -u) -ne 0 ]
        then
           whiptail_installed=$(pacman -Qs libnewt)
           if [[ "$whiptail_installed" != "" ]]; then
              whiptail --title "Error - Cannot Continue" --msgbox "Please run this script with sudo or as root" 8 47
              exit 1
           else
              msg "ERROR:  Cannot Continue. Please run this script with sudo or as root."
              exit 1
           fi
        fi

        msg "---- checking Internet connection ----"
        ping -c 3 endeavouros.com -W 5
        if [ "$?" != "0" ] ; then
           msg "ERROR: No Internet Connection was detected\nFix your Internet Connectin and try again"
           exit 1
        fi
        echo "------------------------------------------"

        dmesg -n 1

        run_unattended_pacman git libnewt wget python3 python-yaml sudo

        msg "precheck_setup ended ok ...."
        touch $PRECHECK_SETUP_DONE_FLAG

    else
        echo "using previosly done precheck setup"
        echo "if you want to redo pre-check setup, do rf -f $PRECHECK_SETUP_DONE_FLAG and rerun"
    fi
}

user_input() {
    local userinputdone
    local finished
    local description
    local initial_user_password
    local initial_root_password
    local lasttriad
    local xyz

    userinputdone=1
    while [ $userinputdone -ne 0 ] ; do

        if [ ! -e $INITIAL_SETUP_DONE_FLAG ] ; then

            generate_timezone_list $ZONE_DIR
            TIMEZONE=$(whiptail --nocancel --title "MiniEOS Setup - Timezone Selection" --menu \
            "Please choose your timezone.\n\nNote: You can navigate to different sections with Page Up/Down or the A-Z keys." 18 90 8 --cancel-button 'Back' "${TIMEZONE_LIST[@]}" 3>&2 2>&1 1>&3)
            TIMEZONEPATH="${ZONE_DIR}${TIMEZONE}"

            finished=1
            description="Enter your desired hostname"
            while [ $finished -ne 0 ] ; do
                HOSTNAME=$(whiptail --nocancel --title "EndeavourOS ARM Setup - Configuration" --inputbox "$description" 8 60 3>&2 2>&1 1>&3)
                if [ "$HOSTNAME" == "" ] ; then
                    description="Host name cannot be blank. Enter your desired hostname"
                else
                    finished=0
                fi
            done
        else
            echo "using previosly done initial user inputs"
            echo "if you want to redo initial user inputs, do rf -f $INITIAL_SETUP_DONE_FLAG and rerun"
        fi

        DENAME=$(whiptail --nocancel --title "MiniEOS Setup - Desktop Selection" --menu --notags "\n                          Choose which Desktop Environment to install\n\n" 22 100 15 \
            "0" "No Desktop Environment" \
            "1" "XFCE4" \
            "2" "KDE Plasma" \
            "3" "Gnome" \
            "4" "Mate" \
            "5" "Cinnamon" \
            "6" "Budgie" \
            "7" "LXQT" \
            "8" "LXDE" \
            "9" "i3 wm for x11" \
        3>&2 2>&1 1>&3)

        case $DENAME in
            0) DENAME="none" ;;
            1) DENAME="xfce4" ;;
            2) DENAME="kde" ;;
            3) DENAME="gnome" ;;
            4) DENAME="mate" ;;
            5) DENAME="cinnamon" ;;
            6) DENAME="budgie" ;;
            7) DENAME="lxqt" ;;
            8) DENAME="lxde" ;;
            9) DENAME="i3wm" ;;
        esac

        if [ ! -e $INITIAL_SETUP_DONE_FLAG ] ; then
            whiptail --title "MiniEOS Setup - Review Settings" --yesno "             To review, you entered the following information:\n\n \
                Time Zone: $TIMEZONE \n \
                Host Name: $HOSTNAME \n \
                Desktop Environment: $DENAME \n\n \
                Is this information correct?" 16 80
            userinputdone="$?"
        else
            whiptail --title "MiniEOS change DE - Review selection" --yesno "             To review, you entered the following information:\n\n \
                Desktop Environment: $DENAME \n\n \
                Is this information correct?" 16 80
            userinputdone="$?"
        fi

    done

    DENAME=install_$DENAME
}

install_xfce4() {
    msg "installing XFCE4"
    eos-packagelist "XFCE4-Desktop" > xfce4
    fixup_pkg_list xfce4 XFCE4_REMOVE_LISTXFCE4_ADD_LIST
    run_unattended_pacman_on_filelist xfce4
    disable_all_de
    systemctl enable lightdm.service
}

install_mate() {
    msg "installing Mate"
    eos-packagelist "MATE-Desktop" > mate
    fixup_pkg_list mate MATE_REMOVE_LIST MATE_ADD_LIST
    run_unattended_pacman_on_filelist mate
    disable_all_de
    systemctl enable lightdm.service
}

install_kde() {
    msg "installing KDE Plasma"
    eos-packagelist "KDE-Desktop" > plasma
    fixup_pkg_list plasma PLASMA_REMOVE_LIST PLASMA_ADD_LIST
    run_unattended_pacman_on_filelist plasma
    disable_all_de
    systemctl enable sddm.service
}

install_gnome() {
    msg "installing Gnome"
    eos-packagelist "GNOME-Desktop" > gnome
    fixup_pkg_list gnome GNOME_REMOVE_LIST GNOME_ADD_LIST
    run_unattended_pacman_on_filelist gnome
    disable_all_de
    systemctl enable gdm.service
}

install_cinnamon() {
    msg "installing Cinnamon"
    eos-packagelist "Cinnamon-Desktop" > cinnamon
    fixup_pkg_list cinnamon CINNAMON_REMOVE_LIST CINNAMON_ADD_LIST
    run_unattended_pacman_on_filelist cinnamon
    disable_all_de
    systemctl enable lightdm.service
}

install_budgie() {
    msg "nstalling Budgie-Desktop"
    eos-packagelist "Budgie-Desktop" > budgie
    fixup_pkg_list budgie BUDGIE_REMOVE_LIST BUDGIE_ADD_LIST
    run_unattended_pacman_on_filelist budgie
    disable_all_de
    systemctl enable lightdm.service
}

install_lxde() {
    msg "nstalling LXDE"
    eos-packagelist "LXDE-Desktop" > lxde
    fixup_pkg_list lxde LXDE_REMOVE_LIST LXDE_ADD_LIST
    run_unattended_pacman_on_filelist lxde
    # systemctl enable lightdm.service
    disable_all_de
    systemctl enable eos-lxdm-gtk3.service
}

install_lxqt() {
    msg "installing LXQT"
    eos-packagelist "LXQT-Desktop" > lxqt
    fixup_pkg_list lxqt LXQT_REMOVE_LIST LXQT_ADD_LIST
    run_unattended_pacman_on_filelist lxqt
    disable_all_de
    systemctl enable sddm.service
}

install_i3wm() {
    msg "Installing i3-wm"
    eos-packagelist "i3-Window-Manager" > i3
    fixup_pkg_list i3 i3_REMOVE_LIST i3_ADD_LIST
    run_unattended_pacman_on_filelist i3
    disable_all_de
    systemctl enable lightdm.service
}

desktop_setup() {
    if [ $DENAME != "_none" ] ; then
        $DENAME
    fi

    printf "alarm  ALL=(ALL:ALL) ALL" >> /etc/sudoers

    FILENAME="/etc/lightdm/lightdm.conf"
    if [ -f $FILENAME ] ; then
        sed -i 's/#logind-check-graphical=false/logind-check-graphical=true/g' $FILENAME
    fi
}

#################################################
#          script starts here                   #
#################################################

Main() {

    TIMEZONE=""
    TIMEZONEPATH=""
    MESSAGE=""
    USERNAME=""
    HOSTNAME=""
    FULLNAME=""
    DENAME=""

    msg " "
    msg "--- MiniEOS on MiniArch installer v$ver (c)Piotr Oniszczuk ---"
    msg " "

    precheck_setup
    user_input
    find_mirrorlist
    find_keyring
    switch_pacman_trust_all
    run_unattended_pacman eos-rankmirrors
    msg "Start ranking EOS mirrors"
    eos-rankmirrors --show-orig-list="no"
    msg "End ranking EOS mirrors"
    base_addons
    if [ ! -e $INITIAL_SETUP_DONE_FLAG ] ; then
        set_time_zone
        enable_ntp
        set_locale
        set_hostname
        config_etc_hosts
        create_alias
    fi
    touch $INITIAL_SETUP_DONE_FLAG
    desktop_setup
    restore_pacman_trust
    sync
    completed_notification
    read -n1 x
    exit
}

Main "$@"
