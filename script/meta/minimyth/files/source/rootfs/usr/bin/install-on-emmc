#!/bin/sh

# Script works in 3 modes:
#
#  Mode1: when called with 'install' command:
#    1.duplicates SD card sectors (occupied by partitions) to eMMC/UFS
#    2.installs bootloader to eMMC/UFS (for details see Mode3 description)
#
#  Mode2: when called with 'erase' command:
#    1. Erase eMMC/UFS by writing zero to first 'erase_areas_size' MBytes of eMMC/UFS
#    2. Erase bootloader by writing zeros to boot0[1] partitions (eMMC) or sdb[c] disks (UFS)
#
#  Mode3: when called with 'bootloader' command:
#    1. Installs bootloader from SD card </bootloader> dir to boot0[1] partitions (eMMC) or sdb[c] disks (UFS)
#       If SD card has no </bootloader> dir, script creates such dir, dumps bootloader
#       from SD card to this dir then installs this dumped bootloader to eMMC/UFS.
#       Next script updates rootfs device number in extlinux.conf to eMMC 2nd part (eMMC) or sda2 part (UFS)
#
#
# safety_margin is amount of extra space beyond 1st + 2nd + 3rd partitions space to be
# duplicated from SD card to eMMC/UFS. Unit is MBytes
safety_margin=100
#
# area at emmc/ufs begininng filled with zeros to make it erased. In MBytes.
erase_areas_size=1024

# script log file
log_file="/var/log/install-on-emmc.log"

#-----------------------------










































ver=5.0

command=$1

log() {
    echo >&2 "`date '+%H:%M:%S'`: $*" >> ${log_file}
}

msg() {
    log "$*"
    echo "$*"
}

error() {
    log "$*"
    echo "$*"
    echo "Please provide content of ${log_file} to developer ..."
    echo "Now exiting ..."
    exit 1
}

do_cmd() {
    log "Executing $*"
    #for partprobe stop checking for errors...
    if [[ "$*" =~ "partprobe" ]] ; then
        $* 2>>${log_file}
    else
        $* 2>>${log_file}
        if [ $? -ne 0 ] ; then
            error "Executing $* failed ..."
        fi
    fi
}

confirm() {

    msg " "
    msg "    Please confirm $1 by pressing 'y'"
    msg "    or press Enter (or any other key) to exit ..."
    msg " "

    read sel

    if [ x$sel = "xy" ] || [ x$sel = "xY" ] ; then
        return
    else
        msg "Exiting stript (by user no-confirm)"
        exit 0
    fi
}

is_booted_from_target() {
    if [ "${boot_dev}" = "${target_dev}" ]; then
        msg " "
        msg " "
        msg "Your device is currently booted from the eMMC."
        msg "Install from eMMC to eMMC not make much sense... Exiting ..."
        msg " "
        msg " "
        exit 1
    fi
}

what_platform() {

    platform=$(tr -d '\0' < /sys/firmware/devicetree/base/compatible 2>/dev/null)
    log "platform string: ${platform}"
    msg "Ooo...you are running ${platform}"

    if [[ ${platform} =~ "allwinner" ]] ; then
        msg "Allwinner detected...Good!"
        platform_type="allwinner"

    elif [[ "${platform}" =~ "rk3328" ]] ; then
        msg "Rockchip 3328 detected..Good!"
        platform_type="rk3328"

    elif [[ "${platform}" =~ "rk3399" ]] ; then
        msg "Rockchip 3399 detected...Good!"
        platform_type="rk3399"

    elif [[ "${platform}" =~ "rk3528" ]] ; then
        msg "Rockchip 3528 detected..Good!"
        platform_type="rk3528"

    elif [[ "${platform}" =~ "sbc-with-5-partitions-layout" ]] ; then
        msg "Rockchip 3566/3568 (alt part.scheme) detected...Good!"
        platform_type="rk3568alt"

    elif [[ "${platform}" =~ "rk356" ]] ; then
        msg "Rockchip 3566/3568 detected...Good!"
        platform_type="rk3568"

    elif [[ "${platform}" =~ "rk3576" ]] ; then
        msg "Rockchip 3576 detected...Good!"
        platform_type="rk3576"

    elif [[ "${platform}" =~ "rk3588" ]] ; then
        msg "Rockchip 3588 detected...Good!"
        platform_type="rk3588"

    elif [[ "${platform}" =~ "amlogic" ]] ; then
        msg "Rpi detected... Bad... as it is unsupported!"
        platform_type="unsupported"

    elif [[ "${platform}" =~ "raspberrypi" ]] ; then
        msg "Rpi detected... Bad... as it is unsupported!"
        platform_type="unsupported"

    else
        msg "Unknown platform ..."
        platform_type="unsupported"
    fi
}

get_size_to_copy() {

    for part_no in p6 p5 p4 p3 p2 p1 p0 6 5 4 3 2 1 0
    do
        sysfs_part="/sys/block/${boot_dev}/${boot_dev}${part_no}"
        start=$(cat ${sysfs_part}/start 2>/dev/null)
        log "reading ${sysfs_part} for start returns: ${start}"
        if [ ! x${start} = "x" ] ; then
            size=$(cat ${sysfs_part}/size 2>/dev/null)
            log "reading ${sysfs_part} for size returns: ${size}"
            end=$((${start} + $size))
            storage_usage=$((${end} / 2000))
            break
        fi
    done

    if [ x${storage_usage} = "x" ] ; then
        error "ERROR: can't determine usage on ${boot_dev}!"
    fi
}

duplicate_sdcard_to_target() {

    msg "  ==> copying from: ${boot_dev} to: eMMC/UFS (${target_dev}) ..."
    do_cmd "dd if=/dev/${boot_dev} of=/dev/${target_dev} bs=1M count=$1 conv=fsync"
    sync
}

update_target_bootloader_config() {

    part_no=$1
    if [ x$1 = "x" ] ; then
        part_no=1
    fi

    msg "  ==> updating extlinux.conf on eMMC ..."
    do_cmd "partprobe /dev/${target_dev}"
    do_cmd "mkdir -p /boot.emmc"
    if [[ ${target_dev} =~ "mmcblk" ]] ; then
        # eMMC case
        do_cmd "mount /dev/${target_dev}p${part_no} /boot.emmc"
    else
        # UFS case
        do_cmd "mount /dev/${target_dev}${part_no} /boot.emmc"
    fi

    if [ -e /boot.emmc/extlinux/extlinux.conf ] ; then

        sed -e "s|${boot_dev}|${target_dev}|g" -i /boot.emmc/extlinux/extlinux.conf
        sync
        do_cmd "umount /boot.emmc"

    else

        msg "ERROR: can't update extlinux.conf on eMMC as extlinux.conf is not found."
        msg "You can update extlinux.conf manually by mounting eMMC /BOOT part and"
        msg "updating root=... to root=/dev/${target_dev}p2 (eMMC) or root=/dev/${target_dev}2 (UFS)"
        msg "in extlinux.conf file."
        do_cmd "umount /boot.emmc"
        error " "
    fi
}

erase_target() {

    msg "  ==> erasing eMMC ..."
    do_cmd "dd if=/dev/zero of=/dev/${target_dev} bs=1M count=${erase_areas_size} conv=fsync"

    msg "  ==> erasing eMMC bootloader ..."
    do_cmd "dd if=/dev/zero of=/tmp/file_with_zeros count=2048 conv=fsync"

    write_target_bootX 0 "/tmp/file_with_zeros"
    write_target_bootX 1 "/tmp/file_with_zeros"

    do_cmd "rm -f /tmp/file_with_zeros"

    sync
}

write_target_bootX() {

    # 1 param: bootX id
    # 2 param: blob to write
    #hack for UFS. On UFS devices, boot0 and boot1 are just next disks (sdb, sdc)
    if [ $1 = "0" ] ; then
        ufs_boot_part="sdb"
    fi
    if [ $1 = "1" ] ; then
        ufs_boot_part="sdc"
    fi

    if [ -e /sys/block/${target_dev}boot$1 ] ; then

        log "Executing echo 0 > /sys/block/${target_dev}boot$1/force_ro"
        echo 0 > /sys/block/${target_dev}boot$1/force_ro

        write_target=/dev/${target_dev}boot$1

    elif [ -e /sys/block/${ufs_boot_part} ] ; then

        write_target=/dev/${ufs_boot_part}

    else
        msg "  ==> no eMMC ${target_dev}boot$1 part nor UFS /dev/sdb[c] found. Skip writing to it ..."
        return 1
    fi

    log "Zeroing ${write_target}"
    do_cmd "dd if=/dev/zero of=${write_target} count=2048 conv=fsync"

    log "Writing $2 to ${write_target}"
    do_cmd "dd if=$2 of=${write_target} conv=fsync"
}

write_to_target_bootloader_rockchip() {

    idbloader_blob="/boot/bootloader/idbloader.img"
    uboot_blob="/boot/bootloader/u-boot.itb"

    if [ -e ${idbloader_blob} ] ; then
        msg "  ==> will use idbloader from [/boot/bootloader/] ..."
    else
        msg "  ==> no idbloader in [/boot/bootloader]. Will copy from ${boot_dev} ..."
        do_cmd "mkdir -p /boot/bootloader/"
        do_cmd "dd if=/dev/${boot_dev} of=${idbloader_blob} count=4031 skip=64 conv=fsync"
    fi

    if [ -e ${uboot_blob} ] ; then
        msg "  ==> will use u-boot from [/boot/bootloader/] ..."
    else
        msg "  ==> no u-boot in [/boot/bootloader]. Will copy from ${boot_dev} ..."
        do_cmd "mkdir -p /boot/bootloader/"
        do_cmd "dd if=/dev/${boot_dev} of=${uboot_blob} count=8191 skip=16384 conv=fsync"
    fi

    write_target_bootX 0 ${idbloader_blob}
    write_target_bootX 1 ${idbloader_blob}

    msg "  ==> installing idbloader ..."
    do_cmd "dd if=${idbloader_blob} of=/dev/${target_dev} seek=64 conv=fsync"

    msg "  ==> installing u-boot ..."
    do_cmd "dd if=${uboot_blob} of=/dev/${target_dev} seek=16384 conv=fsync"

    sync
}

write_to_target_bootloader_allwinner() {

    uboot_blob="/boot/bootloader/u-boot-sunxi-with-spl.bin"

    if [ -e ${uboot_blob} ] ; then
        msg "  ==> will use u-boot from [/boot/bootloader/] ..."
    else
        msg "  ==> no u-boot in [/boot/bootloader]. Will copy from ${boot_dev} ..."
        do_cmd "mkdir -p /boot/bootloader/"
        do_cmd "dd if=/dev/${boot_dev} of=${uboot_blob} count=4080 skip=16 conv=fsync"
    fi

    write_target_bootX 0 ${uboot_blob}
    write_target_bootX 1 ${uboot_blob}

    msg "  ==> installing u-boot ..."
    do_cmd "dd if=${uboot_blob} of=/dev/${target_dev} bs=1024 seek=8 conv=fsync"

    sync
 }

write_to_target_bootloader() {

    if [ x$platform_type = "xallwinner" ] ; then
        write_to_target_bootloader_allwinner
        update_target_bootloader_config

    elif [ x$platform_type = "xrk3328" ] ; then
        # this is for rockchip 3328
        write_to_target_bootloader_rockchip
        update_target_bootloader_config

    elif [ x$platform_type = "xrk3399" ] ; then
        # this is for rockchip 3399
        write_to_target_bootloader_rockchip
        update_target_bootloader_config

    elif [ x$platform_type = "xrk3528" ] ; then
        # this is for rockchip 3528
        write_to_target_bootloader_rockchip
        update_target_bootloader_config

    elif [ x$platform_type = "xrk3568alt" ] ; then
        # this is for rockchip 356x alr.part.scheme
        write_to_target_bootloader_rockchip
        update_target_bootloader_config 4

    elif [ x$platform_type = "xrk3568" ] ; then
        # this is for rockchip 356x
        write_to_target_bootloader_rockchip
        update_target_bootloader_config

    elif [ x$platform_type = "xrk3576" ] ; then
        # this is for rockchip 3576
        write_to_target_bootloader_rockchip
        update_target_bootloader_config

    elif [ x$platform_type = "xrk3588" ] ; then
        # this is for rockchip 3588
        write_to_target_bootloader_rockchip
        update_target_bootloader_config

    else
        # this is for usupported
        msg "  ==> write_to_target_bootloader: unknown platform ..."
    fi
}

boot_dev=$(mount | grep -e '/initrd\s' | awk '{print $1}' | sed 's/\/dev\///g' | sed 's/[0123456789]$//g' | sed 's/p//g' )
if [ x"${boot_dev}" = "x" ]; then
    boot_dev=$(mount | grep -e 'on\s/\s' | awk '{print $1}' | sed 's/\/dev\///g' | sed 's/[0123456789]$//g' | sed 's/p//g' )
fi

emmc_dev="N/A"
for TYPE in /sys/class/block/mmcblk*/device/type; do
    if grep -q "MMC" "${TYPE}" 2>/dev/null ; then
        emmc_dev="$(echo "${TYPE}" | awk -F/ '{print $5}')"
        break
    fi
done

ufs_dev="N/A"
for TYPE in /sys/class/block/sd*/device/type; do
    if grep -q "0" "${TYPE}" 2>/dev/null ; then
        ufs_dev="$(echo "${TYPE}" | awk -F/ '{print $5}')"
        break
    fi
done

sdcard_dev="N/A"
for TYPE in /sys/class/block/mmcblk*/device/type; do
    if grep -q "SD" "${TYPE}" 2>/dev/null ; then
        sdcard_dev="$(echo "${TYPE}" | awk -F/ '{print $5}')"
        break
    fi
done

msg " "
msg "--- MiniMyth2 to eMMC installer v$ver (c)Piotr Oniszczuk ---"
msg " "

what_platform
# exit for anything (amlogic, rpi) as unsupported (yet)
if [ x$platform_type = "xunsupported" ] ; then
    msg " "
    msg "Unsupported (yet) platform! Exiting ..."
    msg " "
    exit 1
fi

boot_dev_name="Unknown"
if [[ ${boot_dev} =~ ${sdcard_dev} ]] ; then
    boot_dev_name="SD card"
fi
if [[ ${boot_dev} =~ ${emmc_dev} ]] ; then
    boot_dev_name="eMMC module"
fi
if [[ ${boot_dev} =~ ${ufs_dev} ]] ; then
    boot_dev_name="UFS module"
fi

msg " "
msg "SDcard device        : ${sdcard_dev}"
msg "eMMC device          : ${emmc_dev}"
msg "UFS device           : ${ufs_dev}"
msg "System booted from   : ${boot_dev_name} (${boot_dev})"

get_size_to_copy

msg "Boot device has      : ${part_no} partitions"
msg "Boot device usage    : ${storage_usage}MB"

if [ ! x"${emmc_dev}" = "xN/A" ] && [ ! x"${ufs_dev}" = "xN/A" ] ; then

    msg "Please select target device:"
    msg "(1): eMMC"
    msg "(2): UFS"

    read sel

    if [ $sel = "1" ] ; then

        target_dev=${emmc_dev}

    elif [ $sel = "2" ] ; then

        target_dev=${ufs_dev}

    else
        msg " "
        msg "Wrong selection! Exiting ..."
        msg " "
        exit 1
  fi

elif [ ! x"${emmc_dev}" = "xN/A" ] ; then

    target_dev=${emmc_dev}

elif [ ! x"${ufs_dev}" = "xN/A" ] ; then

    target_dev=${ufs_dev}

else

    msg " "
    msg "Can't determine eMMC nor UFS device! Exiting ..."
    msg " "
    exit 1
fi

if [ x"${boot_dev}" = "x" ]; then
    msg " "
    msg "Can't determine boot device! Exiting ..."
    msg " "
    exit 1
fi

if [[ "${command}" =~ "erase" ]] ; then
    msg " "
    msg "erasing ${target_dev} ..."

    confirm "Please, confirm to erase"
    confirm "ARE YOU SURE to erase ${target_dev} content?"

    erase_target

    sync

    msg " "
    msg "Done ..."
    msg " "
    exit 0

elif [[ "${command}" =~ "bootloader" ]] ; then
    confirm "to install/update eMMC bootloader"

    write_to_target_bootloader

    sync

    msg " "
    msg "Done ..."
    msg " "
    exit 0

elif [[ "${command}" =~ "install" ]] ; then
    is_booted_from_target

    confirm "to copy ${storage_usage}MB from SD card to eMMC/UFS"

    confirm "ARE YOU SURE to OVERWRITE ALL content on ${target_dev} device?"

    msg "copying ${storage_usage}MB to eMMC/UFS ..."
    duplicate_sdcard_to_target $((${storage_usage} + $safety_margin))
    msg "copying to eMMC/UFS done ..."

    msg "copying bootloader to eMMC/UFS ..."
    confirm "to install bootloader on eMMC/UFS"
    write_to_target_bootloader

    sync

    msg " "
    msg "It looks system was successfuly installed on eMMC/UFS device :-)"
    msg "You can now poweroff, remove SD card and poweron again. System should boot from eMMC/UFS ..."
    msg " "
    exit 0

else
    msg " "
    msg "Run script with command: erase|bootloader|install"
    msg " "
    exit 0
fi

exit 0
