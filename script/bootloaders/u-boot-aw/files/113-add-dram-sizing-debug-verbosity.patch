diff --speed-large-files --no-dereference --minimal -Naur u-boot-2025.01/arch/arm/mach-sunxi/dram_sun50i_h616.c u-boot-2025.01/arch/arm/mach-sunxi/dram_sun50i_h616.c
--- u-boot-2025.01/arch/arm/mach-sunxi/dram_sun50i_h616.c	2025-03-05 09:32:30.528256946 +0100
+++ u-boot-2025.01/arch/arm/mach-sunxi/dram_sun50i_h616.c	2025-03-05 09:32:11.041590216 +0100
@@ -12,6 +12,9 @@
  * (C) Copyright 2020 Jernej Skrabec <jernej.skrabec@siol.net>
  *
  */
+
+#define DEBUG
+
 #include <init.h>
 #include <log.h>
 #include <asm/io.h>
@@ -1409,8 +1412,10 @@
 	 * if controller was already initialized and holds any data
 	 * which is important for restoring system.
 	 */
+	debug("Store cfg\n");
 	memcpy(buffer, (u32*)CFG_SYS_SDRAM_BASE, sizeof(buffer));
 
+	debug("1st writing pattern\n");
 	mctl_write_pattern();
 
 	shift = config->bus_full_width + 1;
@@ -1423,19 +1428,24 @@
 	debug("detected %u columns\n", cols);
 
 	/* restore data */
+	debug("restore cfg\n");
 	memcpy((u32*)CFG_SYS_SDRAM_BASE, buffer, sizeof(buffer));
 
 	/* reconfigure to make sure that all active rows are accessible */
 	config->cols = 8;
 	config->rows = 17;
+	debug("reconfigure for all active rows\n");
 	mctl_core_init(para, config);
 
 	/* store data again as it might be moved */
+	debug("store cfg\n");
 	memcpy(buffer, (u32*)CFG_SYS_SDRAM_BASE, sizeof(buffer));
 
+	debug("2nd writing pattern\n");
 	mctl_write_pattern();
 
 	/* detect row address bits */
+	debug("detecting row address bits\n");
 	shift = config->bus_full_width + 4 + config->cols;
 	for (rows = 13; rows < 17; rows++) {
 		if (mctl_check_pattern(1ULL << (rows + shift)))
@@ -1444,10 +1454,13 @@
 	debug("detected %u rows\n", rows);
 
 	/* restore data again */
+	debug("restoring cfg\n");
 	memcpy((u32*)CFG_SYS_SDRAM_BASE, buffer, sizeof(buffer));
 
 	config->cols = cols;
 	config->rows = rows;
+
+	debug("end of auto detect dram size\n");
 }
 
 static unsigned long mctl_calc_size(const struct dram_config *config)
