
add support for rk3528 in dw inno hdmi phy

Code based on BSP by:
Signed-off-by: Algea Cao <algea.cao@rock-chips.com>

diff --speed-large-files --no-dereference --minimal -Naur linux-6.4.11/drivers/phy/rockchip/phy-rockchip-inno-hdmi.c linux-6.4.11/drivers/phy/rockchip/phy-rockchip-inno-hdmi.c
--- linux-6.4.11/drivers/phy/rockchip/phy-rockchip-inno-hdmi.c	2023-08-25 19:07:47.923461135 +0200
+++ linux-6.4.11/drivers/phy/rockchip/phy-rockchip-inno-hdmi.c	2023-08-25 19:12:58.216795521 +0200
@@ -6,6 +6,8 @@
  *         Heiko Stuebner <heiko@sntech.de>
  */
 
+#define DEBUG
+
 #include <linux/clk.h>
 #include <linux/clk-provider.h>
 #include <linux/delay.h>
@@ -225,6 +227,12 @@
 /* REG: 0xd3 */
 #define RK3328_PRE_PLL_FRAC_DIV_7_0(x)			UPDATE(x, 7, 0)
 
+enum inno_hdmi_phy_type {
+		INNO_HDMI_PHY_RK3228,
+		INNO_HDMI_PHY_RK3328,
+		INNO_HDMI_PHY_RK3528
+};
+
 struct inno_hdmi_phy_drv_data;
 
 struct inno_hdmi_phy {
@@ -236,6 +244,7 @@
 	struct clk *sysclk;
 	struct clk *refoclk;
 	struct clk *refpclk;
+	struct phy_config *phy_cfg;
 
 	/* platform data */
 	const struct inno_hdmi_phy_drv_data *plat_data;
@@ -286,6 +295,7 @@
 };
 
 struct inno_hdmi_phy_drv_data {
+	enum inno_hdmi_phy_type		dev_type;
 	const struct inno_hdmi_phy_ops	*ops;
 	const struct clk_ops		*clk_ops;
 	const struct phy_config		*phy_cfg_table;
@@ -473,9 +483,13 @@
 	{33750000,  1, 80, 8, 2},
 	{74250000,  1, 40, 8, 1},
 	{74250000, 18, 80, 8, 2},
+	{74250000,  1, 20, 4, 8},
 	{148500000, 2, 40, 4, 3},
+	{148500000, 1, 10, 2, 8},
 	{297000000, 4, 40, 2, 3},
+	{297000000, 2, 20, 2, 8},
 	{594000000, 8, 40, 1, 3},
+	{594000000, 4, 20, 1, 8},
 	{ /* sentinel */ }
 };
 
@@ -498,6 +512,30 @@
 	}, { /* sentinel */ },
 };
 
+static const struct phy_config rk3528_phy_cfg[] = {
+	/* tmdsclk bias-clk bias-data voltage-clk voltage-data pre-emphasis-data */
+	{	165000000, {
+			0x03, 0x04, 0x0c, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00,
+		},
+	}, {
+		340000000, {
+			0x03, 0x04, 0x0c, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00,
+		},
+	}, {
+		594000000, {
+			0x02, 0x08, 0x0d, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00,
+		},
+	}, {
+		~0UL, {
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00,
+		},
+	}
+};
+
 /* phy tuning values for an undocumented set of registers */
 static const struct phy_config rk3328_phy_cfg[] = {
 	{	165000000, {
@@ -611,25 +649,29 @@
 	unsigned long tmdsclock = inno_hdmi_phy_get_tmdsclk(inno,
 							    inno->pixclock);
 	int ret;
+	u32 chipversion = 1;
 
 	if (!tmdsclock) {
 		dev_err(inno->dev, "TMDS clock is zero!\n");
 		return -EINVAL;
 	}
 
+	if (inno->plat_data->dev_type == INNO_HDMI_PHY_RK3528)
+		chipversion = 8;
+
 	if (!inno->plat_data->ops->power_on)
 		return -EINVAL;
 
-	for (; cfg->tmdsclock != 0; cfg++)
+	for (; cfg->tmdsclock != ~0UL; cfg++)
 		if (tmdsclock <= cfg->tmdsclock &&
-		    cfg->version & inno->chip_version)
+		    cfg->version & chipversion)
 			break;
 
-	for (; phy_cfg->tmdsclock != 0; phy_cfg++)
+	for (; phy_cfg->tmdsclock != ~0UL; phy_cfg++)
 		if (tmdsclock <= phy_cfg->tmdsclock)
 			break;
 
-	if (cfg->tmdsclock == 0 || phy_cfg->tmdsclock == 0)
+	if (cfg->tmdsclock == ~0UL || phy_cfg->tmdsclock == ~0UL)
 		return -EINVAL;
 
 	dev_dbg(inno->dev, "Inno HDMI PHY Power On\n");
@@ -840,6 +882,8 @@
 	.set_rate = inno_hdmi_phy_rk3228_clk_set_rate,
 };
 
+
+
 static int inno_hdmi_phy_rk3328_clk_is_prepared(struct clk_hw *hw)
 {
 	struct inno_hdmi_phy *inno = to_inno_hdmi_phy(hw);
@@ -994,14 +1038,207 @@
 	.set_rate = inno_hdmi_phy_rk3328_clk_set_rate,
 };
 
+static int inno_hdmi_phy_rk3528_clk_is_prepared(struct clk_hw *hw)
+{
+	struct inno_hdmi_phy *inno = to_inno_hdmi_phy(hw);
+	u8 status;
+
+	status = inno_read(inno, 0xa0) & 1;
+	return status ? 0 : 1;
+}
+
+static int inno_hdmi_phy_rk3528_clk_prepare(struct clk_hw *hw)
+{
+	struct inno_hdmi_phy *inno = to_inno_hdmi_phy(hw);
+
+	inno_update_bits(inno, 0xa0, 1, 0);
+	return 0;
+}
+
+static void inno_hdmi_phy_rk3528_clk_unprepare(struct clk_hw *hw)
+{
+	struct inno_hdmi_phy *inno = to_inno_hdmi_phy(hw);
+
+	inno_update_bits(inno, 0xa0, 1, 1);
+}
+
+static unsigned long inno_hdmi_phy_rk3528_clk_recalc_rate(struct clk_hw *hw,
+						   unsigned long parent_rate)
+{
+	unsigned long frac;
+	u8 nd, no_a, no_b, no_d;
+	u16 nf;
+	u64 vco = parent_rate;
+
+    struct inno_hdmi_phy *inno = to_inno_hdmi_phy(hw);
+
+	nd = inno_read(inno, 0xa1) & 0x3f;
+	nf = ((inno_read(inno, 0xa2) & 0x0f) << 8) | inno_read(inno, 0xa3);
+	vco *= nf;
+	if ((inno_read(inno, 0xa2) & 0x30) == 0) {
+		frac = inno_read(inno, 0xd3) |
+		       (inno_read(inno, 0xd2) << 8) |
+		       (inno_read(inno, 0xd1) << 16);
+		vco += DIV_ROUND_CLOSEST(parent_rate * frac, (1 << 24));
+	}
+	if (inno_read(inno, 0xa0) & 2) {
+		do_div(vco, nd * 5);
+	} else {
+		no_a = inno_read(inno, 0xa5) & 0x1f;
+		no_b = ((inno_read(inno, 0xa5) >> 5) & 7) + 2;
+		no_d = inno_read(inno, 0xa6) & 0x1f;
+		if (no_a == 1)
+			do_div(vco, nd * no_b * no_d * 2);
+		else
+			do_div(vco, nd * no_a * no_d * 2);
+	}
+
+	frac = vco;
+	inno->pixclock = DIV_ROUND_CLOSEST(frac, 1000) * 1000;
+
+	dev_dbg(inno->dev, "%s rate %lu\n", __func__, inno->pixclock);
+
+	return frac;
+}
+
+static long inno_hdmi_phy_rk3528_clk_round_rate(struct clk_hw *hw, 
+						unsigned long rate,
+					 	unsigned long *parent_rate)
+{
+	int i;
+	const struct pre_pll_config *cfg = pre_pll_cfg_table;
+	struct inno_hdmi_phy *inno = to_inno_hdmi_phy(hw);
+	u32 tmdsclock = inno_hdmi_phy_get_tmdsclk(inno, rate);
+
+	for (; cfg->pixclock != ~0UL; cfg++)
+		if (cfg->pixclock == rate)
+			break;
+
+	/* XXX: Limit pixel clock under 600MHz */
+	if (cfg->pixclock > 600000000)
+		return -EINVAL;
+
+	/*
+	 * If there is no dts phy cfg table, use default phy cfg table.
+	 * The tmds clock maximum is 594MHz. So there is no need to check
+	 * whether tmds clock is out of range.
+	 */
+	if (!inno->phy_cfg)
+		return cfg->pixclock;
+
+	/* Check if tmds clock is out of dts phy config's range. */
+	for (i = 0; inno->phy_cfg[i].tmdsclock != ~0UL; i++) {
+		if (inno->phy_cfg[i].tmdsclock >= tmdsclock)
+			break;
+	}
+
+	if (inno->phy_cfg[i].tmdsclock == ~0UL)
+		return -EINVAL;
+
+	return cfg->pixclock;
+}
+
+static int inno_hdmi_phy_rk3528_clk_set_rate(struct clk_hw *hw, unsigned long rate,
+				      unsigned long parent_rate)
+{
+	struct inno_hdmi_phy *inno = to_inno_hdmi_phy(hw);
+	const struct pre_pll_config *cfg = pre_pll_cfg_table;
+	u32 tmdsclock = inno_hdmi_phy_get_tmdsclk(inno, rate);
+	u32 val;
+
+	dev_dbg(inno->dev, "%s rate %lu tmdsclk %u\n",
+		__func__, rate, tmdsclock);
+
+	if (inno->tmdsclock == tmdsclock)
+		return 0;
+
+	for (; cfg->pixclock != ~0UL; cfg++)
+		if (cfg->pixclock == rate && cfg->tmdsclock == tmdsclock)
+			break;
+
+	if (cfg->pixclock == ~0UL) {
+		dev_err(inno->dev, "unsupported rate %lu\n", rate);
+		return -EINVAL;
+	}
+
+	inno_update_bits(inno, 0xb0, 4, 4);
+	inno_write(inno, 0xcc, 0x0f);
+
+	/* Power on PLL */
+	inno_update_bits(inno, 0xa0, 1, 0);
+	/* Configure pre-pll */
+	inno_update_bits(inno, 0xa0, 2, (cfg->vco_div_5_en & 1) << 1);
+	inno_write(inno, 0xa1, cfg->prediv);
+	if (cfg->fracdiv)
+		val = ((cfg->fbdiv >> 8) & 0x0f) | 0xc0;
+	else
+		val = ((cfg->fbdiv >> 8) & 0x0f) | 0xf0;
+	inno_write(inno, 0xa2, val);
+	inno_write(inno, 0xa3, cfg->fbdiv & 0xff);
+	val = (cfg->pclk_div_a & 0x1f) |
+	      ((cfg->pclk_div_b & 3) << 5);
+	inno_write(inno, 0xa5, val);
+	val = (cfg->pclk_div_d & 0x1f) |
+	      ((cfg->pclk_div_c & 3) << 5);
+	inno_write(inno, 0xa6, val);
+	val = ((cfg->tmds_div_a & 3) << 4) |
+	      ((cfg->tmds_div_b & 3) << 2) |
+	      (cfg->tmds_div_c & 3);
+	inno_write(inno, 0xa4, val);
+
+	if (cfg->fracdiv) {
+		val = cfg->fracdiv & 0xff;
+		inno_write(inno, 0xd3, val);
+		val = (cfg->fracdiv >> 8) & 0xff;
+		inno_write(inno, 0xd2, val);
+		val = (cfg->fracdiv >> 16) & 0xff;
+		inno_write(inno, 0xd1, val);
+	} else {
+		inno_write(inno, 0xd3, 0);
+		inno_write(inno, 0xd2, 0);
+		inno_write(inno, 0xd1, 0);
+	}
+
+	/* Wait for PLL lock */
+	for (val = 0; val < 5; val++) {
+		if (inno_read(inno, 0xa9) & 1)
+			break;
+		usleep_range(1000, 2000);
+	}
+	if (val == 5) {
+		dev_err(inno->dev, "Pre-PLL unlock\n");
+		return -ETIMEDOUT;
+	}
+	inno->pixclock = rate;
+	inno->tmdsclock = tmdsclock;
+
+	return 0;
+}
+
+static const struct clk_ops inno_hdmi_phy_rk3528_clk_ops = {
+	.prepare = inno_hdmi_phy_rk3528_clk_prepare,
+	.unprepare = inno_hdmi_phy_rk3528_clk_unprepare,
+	.is_prepared = inno_hdmi_phy_rk3528_clk_is_prepared,
+	.recalc_rate = inno_hdmi_phy_rk3528_clk_recalc_rate,
+	.round_rate = inno_hdmi_phy_rk3528_clk_round_rate,
+	.set_rate = inno_hdmi_phy_rk3528_clk_set_rate,
+};
+
 static int inno_hdmi_phy_clk_register(struct inno_hdmi_phy *inno)
 {
 	struct device *dev = inno->dev;
 	struct device_node *np = dev->of_node;
+	struct device_node *clk_np = NULL;
 	struct clk_init_data init;
 	const char *parent_name;
 	int ret;
 
+	if (inno->plat_data->dev_type == INNO_HDMI_PHY_RK3528)
+		clk_np = of_get_child_by_name(np, "clk-port");
+
+	if (!clk_np)
+		clk_np = np;
+
 	parent_name = __clk_get_name(inno->refoclk);
 
 	init.parent_names = &parent_name;
@@ -1011,7 +1248,7 @@
 	init.ops = inno->plat_data->clk_ops;
 
 	/* optional override of the clock name */
-	of_property_read_string(np, "clock-output-names", &init.name);
+	of_property_read_string(clk_np, "clock-output-names", &init.name);
 
 	inno->hw.init = &init;
 
@@ -1022,7 +1259,7 @@
 		return ret;
 	}
 
-	ret = of_clk_add_provider(np, of_clk_src_simple_get, inno->phyclk);
+	ret = of_clk_add_provider(clk_np, of_clk_src_simple_get, inno->phyclk);
 	if (ret) {
 		dev_err(dev, "failed to register clock provider: %d\n", ret);
 		return ret;
@@ -1269,24 +1506,186 @@
 	inno_write(inno, 0x07, 0);
 }
 
+static int
+inno_hdmi_phy_rk3528_power_on(struct inno_hdmi_phy *inno,
+			      const struct post_pll_config *cfg,
+			      const struct phy_config *phy_cfg)
+{
+	u32 val;
+	u64 temp;
+
+	/* Power off post PLL */
+	inno_update_bits(inno, 0xaa, 1, 0);
+
+	val = cfg->prediv;
+	inno_write(inno, 0xab, val);
+
+	if (cfg->postdiv == 1) {
+		inno_write(inno, 0xad, 0x8);
+		inno_write(inno, 0xaa, 2);
+	} else {
+		val = (cfg->postdiv / 2) - 1;
+		inno_write(inno, 0xad, val);
+		inno_write(inno, 0xaa, 0x0e);
+	}
+
+	val = cfg->fbdiv & 0xff;
+	inno_write(inno, 0xac, val);
+	val = (cfg->fbdiv >> 8) & BIT(0);
+	inno_update_bits(inno, 0xad, BIT(4), val);
+
+	/* current bias clk/data 2 */
+	val = phy_cfg->regs[0] << 4 | phy_cfg->regs[1];
+	inno_write(inno, 0xbf, val);
+
+	/* current bias data 1/0 */
+	val = phy_cfg->regs[1] << 4 | phy_cfg->regs[1];
+	inno_write(inno, 0xc0, val);
+
+	/* output voltage */
+	inno_write(inno, 0xb5, phy_cfg->regs[2]);
+	inno_write(inno, 0xb6, phy_cfg->regs[3]);
+	inno_write(inno, 0xb7, phy_cfg->regs[3]);
+	inno_write(inno, 0xb8, phy_cfg->regs[3]);
+
+	/* pre-emphasis */
+	inno_write(inno, 0xbb, phy_cfg->regs[4]);
+	inno_write(inno, 0xbc, phy_cfg->regs[4]);
+	inno_write(inno, 0xbd, phy_cfg->regs[4]);
+
+	/* enable LDO */
+	inno_write(inno, 0xb4, 0x7);
+
+	/* enable serializer */
+	inno_write(inno, 0xbe, 0x70);
+
+	inno_write(inno, 0xb2, 0x0f);
+
+	for (val = 0; val < 5; val++) {
+		if (inno_read(inno, 0xaf) & 1)
+			break;
+		udelay(1000);
+	}
+	if (!(inno_read(inno, 0xaf) & 1)) {
+		dev_err(inno->dev, "HDMI PHY Post PLL unlock\n");
+		return -ETIMEDOUT;
+	}
+
+	/* set termination resistance */
+	if (phy_cfg->tmdsclock > 340000000) {
+		inno_write(inno, 0xc7, 0x76);
+		inno_write(inno, 0xc5, 0x83);
+		inno_write(inno, 0xc8, 0x00);
+		inno_write(inno, 0xc9, 0x2f);
+		inno_write(inno, 0xca, 0x2f);
+		inno_write(inno, 0xcb, 0x2f);
+	} else {
+		inno_write(inno, 0xc7, 0x76);
+		inno_write(inno, 0xc5, 0x83);
+		inno_write(inno, 0xc8, 0x00);
+		inno_write(inno, 0xc9, 0x0f);
+		inno_write(inno, 0xca, 0x0f);
+		inno_write(inno, 0xcb, 0x0f);
+	}
+
+	/* set TMDS sync detection counter length */
+	temp = 47520000000;
+	do_div(temp, inno->tmdsclock);
+	inno_write(inno, 0xd8, (temp >> 8) & 0xff);
+	inno_write(inno, 0xd9, temp & 0xff);
+
+	/* Power up post PLL */
+	inno_update_bits(inno, 0xaa, 1, 0);
+	/* Power up tmds driver */
+	inno_update_bits(inno, 0xb0, 4, 4);
+	inno_write(inno, 0xb2, 0x0f);
+
+	if (phy_cfg->tmdsclock > 340000000)
+		msleep(100);
+	/* set pdata_en to 0/1 */
+	inno_update_bits(inno, 0x02, 1, 0);
+	//mdelay(1); Fix rk3528 sink probabilistically fails to recognize signal
+	inno_update_bits(inno, 0x02, 1, 1);
+
+	/* Enable PHY IRQ */
+	inno_write(inno, 0x05, 0x22);
+	inno_write(inno, 0x07, 0x22);
+	inno_write(inno, 0xcc, 0x0f);
+
+	return 0;
+}
+
+static void inno_hdmi_phy_rk3528_power_off(struct inno_hdmi_phy *inno)
+{
+	/* Power off driver */
+	inno_write(inno, 0xb2, 0);
+	/* Power off serializer */
+	inno_write(inno, 0xbe, 0);
+	/* Power off post pll */
+	inno_update_bits(inno, 0xaa, 1, 1);
+	/* Power off rxsense detection circuit */
+	inno_write(inno, 0xcc, 0);
+	/* Power off band gap */
+	inno_update_bits(inno, 0xb0, 4, 0);
+	/* Disable PHY IRQ */
+	inno_write(inno, 0x05, 0);
+	inno_write(inno, 0x07, 0);
+}
+
+static int inno_hdmi_phy_rk3528_init(struct inno_hdmi_phy *inno)
+{
+	/*
+	 * Use phy internal register control
+	 * rxsense/poweron/pllpd/pdataen signal.
+	 */
+	inno_write(inno, 0x02, 0x81);
+
+	/* if phy had been set in uboot, pll is locked */
+	if (inno_read(inno, 0xa9) & BIT(0)) {
+		dev_info(inno->dev, "phy had been powered up\n");
+		inno->phy->power_count = 1;
+	} else {
+		/* manual power down post-PLL */
+		inno_hdmi_phy_rk3528_power_off(inno);
+	}
+
+	return 0;
+}
+
+
 static const struct inno_hdmi_phy_ops rk3328_hdmi_phy_ops = {
 	.init = inno_hdmi_phy_rk3328_init,
 	.power_on = inno_hdmi_phy_rk3328_power_on,
 	.power_off = inno_hdmi_phy_rk3328_power_off,
 };
 
+static const struct inno_hdmi_phy_ops rk3528_hdmi_phy_ops = {
+	.init = inno_hdmi_phy_rk3528_init,
+	.power_on = inno_hdmi_phy_rk3528_power_on,
+	.power_off = inno_hdmi_phy_rk3528_power_off,
+};
+
 static const struct inno_hdmi_phy_drv_data rk3228_hdmi_phy_drv_data = {
+	.dev_type = INNO_HDMI_PHY_RK3228,
 	.ops = &rk3228_hdmi_phy_ops,
 	.clk_ops = &inno_hdmi_phy_rk3228_clk_ops,
 	.phy_cfg_table = rk3228_phy_cfg,
 };
 
 static const struct inno_hdmi_phy_drv_data rk3328_hdmi_phy_drv_data = {
+	.dev_type = INNO_HDMI_PHY_RK3328,
 	.ops = &rk3328_hdmi_phy_ops,
 	.clk_ops = &inno_hdmi_phy_rk3328_clk_ops,
 	.phy_cfg_table = rk3328_phy_cfg,
 };
 
+static const struct inno_hdmi_phy_drv_data rk3528_hdmi_phy_drv_data = {
+	.dev_type = INNO_HDMI_PHY_RK3528,
+	.ops = &rk3528_hdmi_phy_ops,
+	.clk_ops = &inno_hdmi_phy_rk3528_clk_ops,
+	.phy_cfg_table = rk3528_phy_cfg,
+};
+
 static const struct regmap_config inno_hdmi_phy_regmap_config = {
 	.reg_bits = 32,
 	.val_bits = 32,
@@ -1420,6 +1819,9 @@
 	}, {
 		.compatible = "rockchip,rk3328-hdmi-phy",
 		.data = &rk3328_hdmi_phy_drv_data
+	}, {
+		.compatible = "rockchip,rk3528-hdmi-phy",
+		.data = &rk3528_hdmi_phy_drv_data
 	}, { /* sentinel */ }
 };
 MODULE_DEVICE_TABLE(of, inno_hdmi_phy_of_match);
