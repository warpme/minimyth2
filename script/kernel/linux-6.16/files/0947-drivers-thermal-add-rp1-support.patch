diff --speed-large-files --no-dereference --minimal -Naur linux-6.16-rc2/drivers/thermal/broadcom/bcm2711_thermal.c linux-6.16-rc2/drivers/thermal/broadcom/bcm2711_thermal.c
--- linux-6.16-rc2/drivers/thermal/broadcom/bcm2711_thermal.c	2025-06-15 22:49:41.000000000 +0200
+++ linux-6.16-rc2/drivers/thermal/broadcom/bcm2711_thermal.c	2025-06-20 14:59:56.274693749 +0200
@@ -92,7 +92,7 @@
 						&bcm2711_thermal_of_ops);
 	if (IS_ERR(thermal)) {
 		ret = PTR_ERR(thermal);
-		dev_err(dev, "could not register sensor: %d\n", ret);
+		dev_err_probe(dev, ret, "could not register sensor: %d\n", ret);
 		return ret;
 	}
 
diff --speed-large-files --no-dereference --minimal -Naur linux-6.16-rc2/drivers/thermal/gov_step_wise.c linux-6.16-rc2/drivers/thermal/gov_step_wise.c
--- linux-6.16-rc2/drivers/thermal/gov_step_wise.c	2025-06-15 22:49:41.000000000 +0200
+++ linux-6.16-rc2/drivers/thermal/gov_step_wise.c	2025-06-20 14:59:56.274693749 +0200
@@ -17,11 +17,11 @@
 #include "thermal_core.h"
 
 /*
- * If the temperature is higher than a trip point,
+ * If the temperature is higher than a hysteresis temperature,
  *    a. if the trend is THERMAL_TREND_RAISING, use higher cooling
  *       state for this trip point
  *    b. if the trend is THERMAL_TREND_DROPPING, do nothing
- * If the temperature is lower than a trip point,
+ * If the temperature is lower than a hysteresis temperature,
  *    a. if the trend is THERMAL_TREND_RAISING, do nothing
  *    b. if the trend is THERMAL_TREND_DROPPING, use lower cooling
  *       state for this trip point, if the cooling state already
@@ -74,19 +74,35 @@
 	int trip_id = thermal_zone_trip_id(tz, trip);
 	struct thermal_instance *instance;
 	bool throttle = false;
+	int hyst_temp;
 
 	if (tz->temperature >= trip_threshold) {
 		throttle = true;
 		trace_thermal_zone_trip(tz, trip_id, trip->type);
 	}
 
-	dev_dbg(&tz->device, "Trip%d[type=%d,temp=%d]:trend=%d,throttle=%d\n",
-		trip_id, trip->type, trip_threshold, trend, throttle);
+	hyst_temp = trip->temperature - trip->hysteresis;
+
+	dev_dbg(&tz->device,
+		"Trip%d[type=%d,temp=%d,hyst=%d]:trend=%d,throttle=%d\n",
+		trip_id, trip->type, trip->temperature, hyst_temp, trend, throttle);
 
 	list_for_each_entry(instance, &td->thermal_instances, trip_node) {
 		int old_target;
 
 		old_target = instance->target;
+		throttle = false;
+		/*
+		 * Lower the mitigation only if the temperature
+		 * goes below the hysteresis temperature.
+		 */
+		if (tz->temperature >= trip->temperature ||
+		   (tz->temperature >= hyst_temp &&
+		   old_target == instance->upper)) {
+			throttle = true;
+			trace_thermal_zone_trip(tz, trip_id, trip->type);
+		}
+
 		instance->target = get_target_state(instance, trend, throttle);
 
 		dev_dbg(&instance->cdev->device, "old_target=%d, target=%ld\n",
