diff --speed-large-files --no-dereference --minimal -Naur linux-6.6/drivers/media/platform/verisilicon/rockchip_vpu_hw.c linux-6.6/drivers/media/platform/verisilicon/rockchip_vpu_hw.c
--- linux-6.6/drivers/media/platform/verisilicon/rockchip_vpu_hw.c	2023-10-30 03:31:08.000000000 +0100
+++ linux-6.6/drivers/media/platform/verisilicon/rockchip_vpu_hw.c	2023-11-04 23:14:04.896686024 +0100
@@ -16,7 +16,8 @@
 #include "rockchip_vpu981_regs.h"
 
 #define RK3066_ACLK_MAX_FREQ (300 * 1000 * 1000)
-#define RK3288_ACLK_MAX_FREQ (400 * 1000 * 1000)
+#define RK3288_ACLK_MAX_FREQ (600 * 1000 * 1000)
+#define RK3399_ACLK_MAX_FREQ (400 * 1000 * 1000)
 #define RK3588_ACLK_MAX_FREQ (300 * 1000 * 1000)
 
 #define ROCKCHIP_VPU981_MIN_SIZE 64
@@ -448,13 +449,20 @@
 	return 0;
 }
 
-static int rockchip_vpu_hw_init(struct hantro_dev *vpu)
+static int rk3288_vpu_hw_init(struct hantro_dev *vpu)
 {
 	/* Bump ACLK to max. possible freq. to improve performance. */
 	clk_set_rate(vpu->clocks[0].clk, RK3288_ACLK_MAX_FREQ);
 	return 0;
 }
 
+static int rockchip_vpu_hw_init(struct hantro_dev *vpu)
+{
+	/* Bump ACLK to max. possible freq. to improve performance. */
+	clk_set_rate(vpu->clocks[0].clk, RK3399_ACLK_MAX_FREQ);
+	return 0;
+}
+
 static void rk3066_vpu_dec_reset(struct hantro_ctx *ctx)
 {
 	struct hantro_dev *vpu = ctx->dev;
@@ -710,7 +718,7 @@
 	.codec_ops = rk3288_vpu_codec_ops,
 	.irqs = rockchip_vpu1_irqs,
 	.num_irqs = ARRAY_SIZE(rockchip_vpu1_irqs),
-	.init = rockchip_vpu_hw_init,
+	.init = rk3288_vpu_hw_init,
 	.clk_names = rockchip_vpu_clk_names,
 	.num_clocks = ARRAY_SIZE(rockchip_vpu_clk_names)
 };
diff --speed-large-files --no-dereference --minimal -Naur linux-6.6/drivers/pmdomain/rockchip/pm-domains.c linux-6.6/drivers/pmdomain/rockchip/pm-domains.c
--- linux-6.6/drivers/pmdomain/rockchip/pm-domains.c	2023-11-04 23:21:19.740020843 +0100
+++ linux-6.6/drivers/pmdomain/rockchip/pm-domains.c	2023-11-04 23:14:04.896686024 +0100
@@ -407,6 +407,29 @@
 	pd->is_qos_need_init = false;
 }
 
+int rockchip_pmu_idle_request(struct device *dev, bool idle)
+{
+	struct generic_pm_domain *genpd;
+	struct rockchip_pm_domain *pd;
+	int ret;
+
+	if (IS_ERR_OR_NULL(dev))
+		return -EINVAL;
+
+	if (IS_ERR_OR_NULL(dev->pm_domain))
+		return -EINVAL;
+
+	genpd = pd_to_genpd(dev->pm_domain);
+	pd = to_rockchip_pd(genpd);
+
+	mutex_lock(&pd->pmu->mutex);
+	ret = rockchip_pmu_set_idle_request(pd, idle);
+	mutex_unlock(&pd->pmu->mutex);
+
+	return ret;
+}
+EXPORT_SYMBOL(rockchip_pmu_idle_request);
+
 static int rockchip_pmu_save_qos(struct rockchip_pm_domain *pd)
 {
 	int i;
diff --speed-large-files --no-dereference --minimal -Naur linux-6.6/drivers/staging/media/rkvdec/rkvdec.c linux-6.6/drivers/staging/media/rkvdec/rkvdec.c
--- linux-6.6/drivers/staging/media/rkvdec/rkvdec.c	2023-11-04 23:21:17.923354170 +0100
+++ linux-6.6/drivers/staging/media/rkvdec/rkvdec.c	2023-11-04 23:18:49.880020351 +0100
@@ -10,6 +10,7 @@
  */
 
 #include <linux/clk.h>
+#include <linux/delay.h>
 #include <linux/interrupt.h>
 #include <linux/module.h>
 #include <linux/of.h>
@@ -17,6 +18,8 @@
 #include <linux/platform_device.h>
 #include <linux/pm.h>
 #include <linux/pm_runtime.h>
+#include <linux/reset.h>
+#include <linux/rockchip_pmu.h>
 #include <linux/slab.h>
 #include <linux/videodev2.h>
 #include <linux/workqueue.h>
@@ -872,6 +875,11 @@
 
 	pm_runtime_mark_last_busy(rkvdec->dev);
 	pm_runtime_put_autosuspend(rkvdec->dev);
+
+	if (result == VB2_BUF_STATE_ERROR &&
+	    rkvdec->reset_mask == RESET_NONE)
+		rkvdec->reset_mask |= RESET_SOFT;
+
 	rkvdec_job_finish_no_pm(ctx, result);
 }
 
@@ -909,6 +917,33 @@
 
 	if (WARN_ON(!desc))
 		return;
+	if (rkvdec->reset_mask != RESET_NONE) {
+
+		if (rkvdec->reset_mask & RESET_SOFT) {
+			writel(RKVDEC_SOFTRST_EN_P,
+			       rkvdec->regs + RKVDEC_REG_INTERRUPT);
+			udelay(RKVDEC_RESET_DELAY);
+			if (readl(rkvdec->regs + RKVDEC_REG_INTERRUPT)
+			    & RKVDEC_SOFTRESET_RDY)
+				dev_info_ratelimited(rkvdec->dev,
+						      "softreset failed\n");
+		}
+
+		if (rkvdec->reset_mask & RESET_HARD) {
+			rockchip_pmu_idle_request(rkvdec->dev, true);
+			ret = reset_control_assert(rkvdec->rstc);
+			if (!ret) {
+				udelay(RKVDEC_RESET_DELAY);
+				ret = reset_control_deassert(rkvdec->rstc);
+			}
+			rockchip_pmu_idle_request(rkvdec->dev, false);
+			if (ret)
+				dev_notice_ratelimited(rkvdec->dev,
+							"hardreset failed\n");
+		}
+		rkvdec->reset_mask = RESET_NONE;
+		pm_runtime_suspend(rkvdec->dev);
+	}
 
 	ret = pm_runtime_resume_and_get(rkvdec->dev);
 	if (ret < 0) {
@@ -1175,6 +1210,11 @@
 	if (cancel_delayed_work(&rkvdec->watchdog_work)) {
 		struct rkvdec_ctx *ctx;
 
+		if (state == VB2_BUF_STATE_ERROR) {
+			rkvdec->reset_mask |= (status & RKVDEC_ERR_MASK) ?
+						RESET_HARD : RESET_SOFT;
+		}
+
 		ctx = v4l2_m2m_get_curr_priv(rkvdec->m2m_dev);
 		rkvdec_job_finish(ctx, state);
 	}
@@ -1192,6 +1232,7 @@
 	ctx = v4l2_m2m_get_curr_priv(rkvdec->m2m_dev);
 	if (ctx) {
 		dev_err(rkvdec->dev, "Frame processing timed out!\n");
+		rkvdec->reset_mask |= RESET_HARD;
 		writel(RKVDEC_IRQ_DIS, rkvdec->regs + RKVDEC_REG_INTERRUPT);
 		writel(0, rkvdec->regs + RKVDEC_REG_SYSCTRL);
 		rkvdec_job_finish(ctx, VB2_BUF_STATE_ERROR);
@@ -1295,6 +1336,18 @@
 		return ret;
 	}
 
+
+	rkvdec->rstc = devm_reset_control_array_get(&pdev->dev, RESET_CONTROL_OPTIONAL_EXCLUSIVE);
+	if (IS_ERR(rkvdec->rstc)) {
+		dev_err(&pdev->dev,
+			"get resets failed %ld\n", PTR_ERR(rkvdec->rstc));
+		return PTR_ERR(rkvdec->rstc);
+	} else {
+		dev_dbg(&pdev->dev,
+			 "requested %d resets\n",
+			 reset_control_get_count(&pdev->dev));
+	}
+
 	pm_runtime_set_autosuspend_delay(&pdev->dev, 100);
 	pm_runtime_use_autosuspend(&pdev->dev);
 	pm_runtime_enable(&pdev->dev);
@@ -1317,9 +1370,9 @@
 
 	cancel_delayed_work_sync(&rkvdec->watchdog_work);
 
-	rkvdec_v4l2_cleanup(rkvdec);
-	pm_runtime_disable(&pdev->dev);
 	pm_runtime_dont_use_autosuspend(&pdev->dev);
+	pm_runtime_disable(&pdev->dev);
+	rkvdec_v4l2_cleanup(rkvdec);
 }
 
 #ifdef CONFIG_PM
diff --speed-large-files --no-dereference --minimal -Naur linux-6.6/drivers/staging/media/rkvdec/rkvdec.h linux-6.6/drivers/staging/media/rkvdec/rkvdec.h
--- linux-6.6/drivers/staging/media/rkvdec/rkvdec.h	2023-11-04 23:21:17.923354170 +0100
+++ linux-6.6/drivers/staging/media/rkvdec/rkvdec.h	2023-11-04 23:19:47.386687203 +0100
@@ -11,10 +11,11 @@
 #ifndef RKVDEC_H_
 #define RKVDEC_H_
 
+#include <linux/clk.h>
 #include <linux/platform_device.h>
+#include <linux/reset.h>
 #include <linux/videodev2.h>
 #include <linux/wait.h>
-#include <linux/clk.h>
 
 #include <media/v4l2-ctrls.h>
 #include <media/v4l2-device.h>
@@ -28,6 +29,12 @@
 
 #define RKVDEC_QUIRK_DISABLE_QOS	BIT(0)
 
+#define RESET_NONE		0
+#define RESET_SOFT		BIT(0)
+#define RESET_HARD		BIT(1)
+
+#define RKVDEC_RESET_DELAY	5
+
 struct rkvdec_ctx;
 
 struct rkvdec_ctrl_desc {
@@ -124,6 +131,8 @@
 	struct delayed_work watchdog_work;
 	unsigned int capabilities;
 	unsigned int quirks;
+	struct reset_control *rstc;
+	u8 reset_mask;
 };
 
 struct rkvdec_ctx {
diff --speed-large-files --no-dereference --minimal -Naur linux-6.6/drivers/staging/media/rkvdec/rkvdec-regs.h linux-6.6/drivers/staging/media/rkvdec/rkvdec-regs.h
--- linux-6.6/drivers/staging/media/rkvdec/rkvdec-regs.h	2023-11-04 23:21:17.923354170 +0100
+++ linux-6.6/drivers/staging/media/rkvdec/rkvdec-regs.h	2023-11-04 23:14:04.896686024 +0100
@@ -28,6 +28,11 @@
 #define RKVDEC_SOFTRST_EN_P				BIT(20)
 #define RKVDEC_FORCE_SOFTRESET_VALID			BIT(21)
 #define RKVDEC_SOFTRESET_RDY				BIT(22)
+#define RKVDEC_ERR_MASK					(RKVDEC_BUS_STA \
+							 | RKVDEC_ERR_STA \
+							 | RKVDEC_TIMEOUT_STA \
+							 | RKVDEC_BUF_EMPTY_STA \
+							 | RKVDEC_COLMV_REF_ERR_STA )
 
 #define RKVDEC_REG_SYSCTRL				0x008
 #define RKVDEC_IN_ENDIAN				BIT(0)
@@ -220,6 +225,8 @@
 
 #define RKVDEC_REG_QOS_CTRL				0x18C
 
+#define RKVDEC_QOS_CTRL					0x18C
+
 #define RKVDEC_REG_PREF_LUMA_CACHE_COMMAND		0x410
 #define RKVDEC_REG_PREF_CHR_CACHE_COMMAND		0x450
 
diff --speed-large-files --no-dereference --minimal -Naur linux-6.6/drivers/staging/media/rkvdec/rkvdec-vp9.c linux-6.6/drivers/staging/media/rkvdec/rkvdec-vp9.c
--- linux-6.6/drivers/staging/media/rkvdec/rkvdec-vp9.c	2023-11-04 23:21:17.923354170 +0100
+++ linux-6.6/drivers/staging/media/rkvdec/rkvdec-vp9.c	2023-11-04 23:14:04.896686024 +0100
@@ -803,6 +803,7 @@
 	struct rkvdec_dev *rkvdec = ctx->dev;
 	struct rkvdec_vp9_run run = { };
 	int ret;
+	u32 reg;
 
 	ret = rkvdec_vp9_run_preamble(ctx, &run);
 	if (ret) {
diff --speed-large-files --no-dereference --minimal -Naur linux-6.6/include/linux/rockchip_pmu.h linux-6.6/include/linux/rockchip_pmu.h
--- linux-6.6/include/linux/rockchip_pmu.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-6.6/include/linux/rockchip_pmu.h	2023-11-04 23:14:04.896686024 +0100
@@ -0,0 +1,15 @@
+/*
+ * pm_domain.h - Definitions and headers related to device power domains.
+ *
+ * Copyright (C) 2017 Randy Li <ayaka@soulik.info>.
+ *
+ * This file is released under the GPLv2.
+ */
+
+#ifndef _LINUX_ROCKCHIP_PM_H
+#define _LINUX_ROCKCHIP_PM_H
+#include <linux/device.h>
+
+int rockchip_pmu_idle_request(struct device *dev, bool idle);
+
+#endif /* _LINUX_ROCKCHIP_PM_H */
diff --speed-large-files --no-dereference --minimal -Naur linux-6.6/include/soc/rockchip/pm_domains.h linux-6.6/include/soc/rockchip/pm_domains.h
--- linux-6.6/include/soc/rockchip/pm_domains.h	2023-10-30 03:31:08.000000000 +0100
+++ linux-6.6/include/soc/rockchip/pm_domains.h	2023-11-04 23:14:04.896686024 +0100
@@ -10,6 +10,7 @@
 
 int rockchip_pmu_block(void);
 void rockchip_pmu_unblock(void);
+int rockchip_pmu_idle_request(struct device *dev, bool idle);
 
 #else /* CONFIG_ROCKCHIP_PM_DOMAINS */
 
@@ -20,6 +21,11 @@
 
 static inline void rockchip_pmu_unblock(void) { }
 
+static inline int rockchip_pmu_idle_request(struct device *dev, bool idle)
+{
+	return -ENOTSUPP;
+}
+
 #endif /* CONFIG_ROCKCHIP_PM_DOMAINS */
 
 #endif /* __SOC_ROCKCHIP_PM_DOMAINS_H__ */
